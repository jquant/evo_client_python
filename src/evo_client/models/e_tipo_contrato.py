# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from enum import Enum

from pydantic import BaseModel, Field


class TipoContratoEnum(str, Enum):
    """Contract type enumeration
    
    Values:
        _1: Comum (Common)
        _3: Extensão de Plano (Plan Extension) 
        _4: Extensão de Bloqueio (Block Extension)
        _5: Mensal Recorrente (Monthly Recurring)
        _6: Recorrente Mensal com Validade (Recurring with Validity)
        _7: Mensal Recorrente com Renovação Automática (Auto Renewal)
        _8: Dependente Adicional (Dependent)
        _9: Anual com Data de Término Específica (Annual with End Date)
        _10: Contrato Adicional (Additional)
    """

    _1 = "1"  # Comum
    _3 = "3"  # Extensão de Plano
    _4 = "4"  # Extensão de Bloqueio  
    _5 = "5"  # Mensal Recorrente
    _6 = "6"  # Recorrente Mensal com Validade
    _7 = "7"  # Mensal Recorrente com Renovação Automática
    _8 = "8"  # Dependente Adicional
    _9 = "9"  # Anual com Data de Término Específica
    _10 = "10" # Contrato Adicional

    @classmethod
    def get_description(cls, value: str) -> str:
        """Get the description for a contract type value."""
        try:
            enum_value = cls(value)
            descriptions = {
                cls._1: "Comum",
                cls._3: "Extensão de Plano", 
                cls._4: "Extensão de Bloqueio",
                cls._5: "Mensal Recorrente",
                cls._6: "Recorrente Mensal com Validade",
                cls._7: "Mensal Recorrente com Renovação Automática",
                cls._8: "Dependente Adicional",
                cls._9: "Anual com Data de Término Específica",
                cls._10: "Contrato Adicional"
            }
            return descriptions.get(enum_value, "Unknown")
        except ValueError:
            return "Unknown"


class ETipoContrato(BaseModel):
    """
    Atributos:
        tipo: O tipo de contrato, representado como uma enumeração. 
              Os valores possíveis correspondem a diferentes tipos de contrato, como 
              comum, extensão de plano, extensão de bloqueio, e mais.
              Exemplos:
                "1" - Comum
                "3" - Extensão de Plano
                "4" - Extensão de Bloqueio
                "5" - Mensal Recorrente
                "6" - Recorrente Mensal com Validade
                "7" - Mensal Recorrente com Renovação Automática
                "8" - Dependente Adicional
                "9" - Anual com Data de Término Específica
                "10" - Contrato Adicional
    """
    
    tipo: TipoContratoEnum = Field(
        description=(
            "O tipo de contrato, representado como uma enumeração. "
            "Os valores possíveis correspondem a diferentes tipos de contrato, como "
            "comum, extensão de plano, extensão de bloqueio, e mais."
        ),
        examples=[
            "1",  # Comum
            "3",  # Extensão de Plano
            "4",  # Extensão de Bloqueio
            "5",  # Mensal Recorrente
            "6",  # Recorrente Mensal com Validade
            "7",  # Mensal Recorrente com Renovação Automática
            "8",  # Dependente Adicional
            "9",  # Anual com Data de Término Específica
            "10"  # Contrato Adicional
        ],
    )

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self.model_dump()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ETipoContrato):
            return False
        return self.model_dump() == other.model_dump()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
