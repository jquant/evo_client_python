# coding: utf-8

"""
EVO API

Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field


class ProspectApiIntegracaoViewModel(BaseModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    name: Optional[str] = Field(
        default=None, alias="name", description="First Name of the prospect"
    )
    email: Optional[str] = Field(
        default=None, alias="email", description="E-mail of the prospect"
    )
    last_name: Optional[str] = Field(
        default=None, alias="lastName", description="Last Name of the prospect"
    )
    id_branch: Optional[int] = Field(
        default=None, alias="idBranch", description="Branch of the prospect"
    )
    ddi: Optional[str] = Field(default=None, alias="ddi", description="Cellphone DDI")
    cellphone: Optional[str] = Field(
        default=None, alias="cellphone", description="Cellphone of the prospect"
    )
    birthday: Optional[datetime] = Field(
        default=None, alias="birthday", description="Birthday of the prospect"
    )
    gender: Optional[str] = Field(
        default=None, alias="gender", description="Gender of the prospect"
    )
    visit: Optional[int] = Field(
        default=None, alias="visit", description="Origin of the visit of the prospect"
    )
    marketing_type: Optional[str] = Field(
        default=None,
        alias="marketingType",
        description="Type of marketing where the prospect met the gym",
    )
    notes: Optional[str] = Field(
        default=None, alias="notes", description="Free field for prospect notes"
    )
    current_step: Optional[str] = Field(
        default=None,
        alias="currentStep",
        description="Current step in the process for converting the prospect",
    )
    cpf: Optional[str] = Field(default=None, alias="cpf")
    token_gympass: Optional[str] = Field(default=None, alias="tokenGympass")

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self.model_dump(by_alias=True)

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProspectApiIntegracaoViewModel):
            return False

        return self.model_dump() == other.model_dump()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
