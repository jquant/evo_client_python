# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field


class EmpresasConveniosApiViewModel(BaseModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    agreement_company_id: Optional[int] = Field(
        default=None, alias="agreementCompanyId"
    )
    branch_id: Optional[int] = Field(default=None, alias="branchId")
    corporate_name: Optional[str] = Field(default=None, alias="corporateName")
    trade_name: Optional[str] = Field(default=None, alias="tradeName")
    cnpj: Optional[str] = None
    postal_code: Optional[str] = Field(default=None, alias="postalCode")
    street_address: Optional[str] = Field(default=None, alias="streetAddress")
    number: Optional[str] = None
    complement: Optional[str] = None
    neighborhood: Optional[str] = None
    city: Optional[str] = None
    state: Optional[str] = None
    business_email: Optional[str] = Field(default=None, alias="businessEmail")
    financial_email: Optional[str] = Field(default=None, alias="financialEmail")
    responsible_name: Optional[str] = Field(default=None, alias="responsibleName")
    is_deleted_flag: Optional[bool] = Field(default=None, alias="isDeletedFlag")
    deletion_date: Optional[datetime] = Field(default=None, alias="deletionDate")
    employee_deletion_id: Optional[int] = Field(
        default=None, alias="employeeDeletionId"
    )
    opening_date: Optional[datetime] = Field(default=None, alias="openingDate")
    size: Optional[str] = None
    economic_activity_description: Optional[str] = Field(
        default=None, alias="economicActivityDescription"
    )
    legal_nature_description: Optional[str] = Field(
        default=None, alias="legalNatureDescription"
    )
    phone: Optional[str] = None
    registration_status: Optional[int] = Field(default=None, alias="registrationStatus")
    category: Optional[int] = None
    fpas_contributor: Optional[bool] = Field(default=None, alias="fpasContributor")
    remarks: Optional[str] = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self.model_dump(by_alias=True, mode="json")

    def to_str(self):
        """Returns the string representation of the model"""
        return str(self.model_dump())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmpresasConveniosApiViewModel):
            return False

        return self.model_dump() == other.model_dump()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
