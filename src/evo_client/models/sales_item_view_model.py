# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from typing import List, Optional
from pydantic import BaseModel, Field

from .installment_view_model import InstallmentViewModel
from .differentials_view_model import DifferentialsViewModel


class SalesItemViewModel(BaseModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    id_membership: Optional[int] = Field(None, alias="idMembership")
    membership: Optional[str] = None
    loyalty_installment: Optional[bool] = Field(None, alias="loyaltyInstallment")
    membership_type: Optional[str] = Field(
        None, alias="membershipType"
    )  # Changed from ETipoContrato to str
    loyalty_time: Optional[int] = Field(None, alias="loyaltyTime")
    validity_description: Optional[str] = Field(None, alias="validityDescription")
    reverse_installments_description: Optional[str] = Field(
        None, alias="reverseInstallmentsDescription"
    )
    value_days_months_defined_validity: Optional[int] = Field(
        None, alias="valueDaysMonthsDefinedValidity"
    )
    service_value: Optional[float] = Field(None, alias="serviceValue")
    service_name: Optional[str] = Field(None, alias="serviceName")
    remark: Optional[str] = None
    membership_text: Optional[str] = Field(None, alias="membershipText")
    annuity_service_name: Optional[str] = Field(None, alias="annuityServiceName")
    annuity_service_value: Optional[float] = Field(None, alias="annuityServiceValue")
    annuity_day: Optional[int] = Field(None, alias="annuityDay")
    annuity_month: Optional[int] = Field(None, alias="annuityMonth")
    annuity_charge_type: Optional[int] = Field(None, alias="annuityChargeType")
    annuity_installments_count: Optional[int] = Field(
        None, alias="annuityInstallmentsCount"
    )
    promotional_days_count: Optional[int] = Field(None, alias="promotionalDaysCount")
    promo_day_month_type: Optional[int] = Field(None, alias="promoDayMonthType")
    installments_count: Optional[int] = Field(None, alias="installmentsCount")
    promotional_value_description: Optional[str] = Field(
        None, alias="promotionalValueDescription"
    )
    annuity_installments: Optional[List[InstallmentViewModel]] = Field(
        None, alias="annuityInstallments"
    )
    id_service: Optional[int] = Field(None, alias="idService")
    name: Optional[str] = None
    fl_spotlight: Optional[bool] = Field(None, alias="flSpotlight")
    order: Optional[int] = None
    type: Optional[int] = None
    charge_value: Optional[float] = Field(None, alias="chargeValue")
    charge_value_description: Optional[str] = Field(
        None, alias="chargeValueDescription"
    )
    total_value: Optional[float] = Field(None, alias="totalValue")
    tax_value: Optional[float] = Field(None, alias="taxValue")
    percentage_type: Optional[bool] = Field(None, alias="percentageType")
    fl_charge_service_automatic_renew: Optional[bool] = Field(
        None, alias="flChargeServiceAutomaticRenew"
    )
    fl_bank_slip: Optional[bool] = Field(None, alias="flBankSlip")
    fl_card: Optional[bool] = Field(None, alias="flCard")
    fl_credit_balance: Optional[bool] = Field(None, alias="flCreditBalance")
    fl_register_required_address: Optional[bool] = Field(
        None, alias="flRegisterRequiredAddress"
    )
    fl_prioritize_registration_sale: Optional[bool] = Field(
        None, alias="flPrioritizeRegistrationSale"
    )
    age_from: Optional[int] = Field(None, alias="ageFrom")
    age_to: Optional[int] = Field(None, alias="ageTo")
    differentials: Optional[List[DifferentialsViewModel]] = None
    membership_branches: Optional[List[int]] = Field(None, alias="membershipBranches")

    class Config:
        populate_by_name = True
        validate_assignment = True

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self.model_dump(by_alias=True, exclude_none=True)

    def to_str(self):
        """Returns the string representation of the model"""
        return str(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalesItemViewModel):
            return False

        return self.model_dump() == other.model_dump()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
