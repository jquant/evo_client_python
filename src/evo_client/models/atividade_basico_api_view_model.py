import pprint

from enum import IntEnum
from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field


from .periodizacao_api_view_model import PeriodizacaoApiViewModel
from .e_status_atividade import EStatusAtividade


from enum import Enum
from pydantic import BaseModel

from .atividade_sessao_participante_api_view_model import (
    AtividadeSessaoParticipanteApiViewModel,
)
from .atividade_lugar_reserva_view_model import AtividadeLugarReservaViewModel


class AtividadeBasicoApiViewModel(BaseModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    id_group_activity: Optional[int] = Field(None, alias="idGroupActivity")
    id_activity_session: Optional[int] = Field(None, alias="idActivitySession")
    id_configuration: Optional[int] = Field(None, alias="idConfiguration")
    name: Optional[str] = None
    date: Optional[datetime] = Field(None, alias="date")
    capacity: Optional[int] = None
    ocupation: Optional[int] = None
    instructor: Optional[str] = None
    instructor_photo: Optional[str] = Field(None, alias="instructorPhoto")
    area: Optional[str] = None
    status: Optional["EStatusAtividade"] = None
    selected_spot: Optional[str] = Field(None, alias="selectedSpot")
    exibir_participantes: Optional[bool] = Field(None, alias="exibirParticipantes")
    code: Optional[str] = None
    status_name: Optional[str] = Field(None, alias="statusName")
    week_day: Optional[int] = Field(None, alias="weekDay")
    allow_choosing_spot: Optional[bool] = Field(None, alias="allowChoosingSpot")
    time_tick: Optional[int] = Field(None, alias="timeTick")
    duration_tick: Optional[int] = Field(None, alias="durationTick")
    start_time: Optional[str] = Field(None, alias="startTime")
    end_time: Optional[str] = Field(None, alias="endTime")
    branch_name: Optional[str] = Field(None, alias="branchName")
    color: Optional[str] = None
    description: Optional[str] = None
    image_url: Optional[str] = Field(None, alias="imageUrl")
    enrollments: Optional[List["AtividadeSessaoParticipanteApiViewModel"]] = None
    spots: Optional[List["AtividadeLugarReservaViewModel"]] = None
    title: Optional[str] = None
    json_config_vaga_personalizada: Optional[str] = Field(
        None, alias="jsonConfigVagaPersonalizada"
    )

    class Config:
        allow_population_by_field_name = True

    def to_dict(self) -> dict:
        """Returns the model properties as a dictionary"""
        result = self.model_dump(by_alias=True)
        # Handle nested models that might not be automatically converted
        for key, value in result.items():
            if isinstance(value, list):
                result[key] = [
                    (item.model_dump() if hasattr(item, "model_dump") else item)
                    for item in value
                ]
            elif hasattr(value, "model_dump"):
                result[key] = value.model_dump()
        return result

    def to_str(self) -> str:
        """Returns the string representation of the model using pprint"""
        import pprint

        return pprint.pformat(self.model_dump(by_alias=True))

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()
