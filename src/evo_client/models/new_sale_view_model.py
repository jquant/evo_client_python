# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from typing import Optional

from pydantic import BaseModel, Field

from .card_data_view_model import CardDataViewModel
from .e_forma_pagamento_totem import EFormaPagamentoTotem
from .member_new_sale_view_model import MemberNewSaleViewModel


class NewSaleViewModel(BaseModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    id_branch: Optional[int] = Field(default=None, alias="idBranch")
    id_branch_token: Optional[str] = Field(default=None, alias="idBranchToken")
    id_membership: Optional[int] = Field(default=None, alias="idMembership")
    id_service: Optional[int] = Field(default=None, alias="idService")
    service_value: Optional[float] = Field(default=None, alias="serviceValue")
    member_data: Optional[MemberNewSaleViewModel] = Field(
        default=None, alias="memberData"
    )
    card_data: Optional[CardDataViewModel] = Field(default=None, alias="cardData")
    id_prospect: Optional[int] = Field(default=None, alias="idProspect")
    id_prospect_token: Optional[str] = Field(default=None, alias="idProspectToken")
    id_member: Optional[int] = Field(default=None, alias="idMember")
    id_member_token: Optional[str] = Field(default=None, alias="idMemberToken")
    voucher: Optional[str] = None
    id_card_member: Optional[int] = Field(default=None, alias="idCardMember")
    id_member_card_token: Optional[str] = Field(default=None, alias="idMemberCardToken")
    type_payment: Optional[str] = Field(default=None, alias="typePayment")
    total_installments: Optional[int] = Field(default=None, alias="totalInstallments")
    payment: Optional[EFormaPagamentoTotem] = None
    session_id: Optional[str] = Field(default=None, alias="sessionId")

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self.model_dump(by_alias=True, exclude_none=True)

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewSaleViewModel):
            return False
        return self.model_dump() == other.model_dump()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
