# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field

from .basic_freeze_view_model import BasicFreezeViewModel


class BasicMemberMembershipApiViewModel(BaseModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    id_venda: Optional[int] = Field(None, alias="_IdVenda")
    id_membership: Optional[int] = Field(None, alias="idMembership")
    id_member_membership: Optional[int] = Field(None, alias="idMemberMembership")
    id_member_membership_renewed: Optional[int] = Field(
        None, alias="idMemberMembershipRenewed"
    )
    num_members: Optional[int] = Field(None, alias="numMembers")
    fl_renewed: Optional[bool] = Field(None, alias="flRenewed")
    start_date: Optional[datetime] = Field(None, alias="startDate")
    end_date: Optional[datetime] = Field(None, alias="endDate")
    name: Optional[str] = Field(None)
    cancel_date: Optional[datetime] = Field(None, alias="cancelDate")
    sale_date: Optional[datetime] = Field(None, alias="saleDate")
    time_zone: Optional[str] = Field(None, alias="timeZone")
    freezes: Optional[List[BasicFreezeViewModel]] = Field(None)
    fl_suspenso: Optional[bool] = Field(None, alias="flSuspenso")
    freeze: Optional[bool] = Field(None)
    membership_status: Optional[str] = Field(None, alias="membershipStatus")
    membership_type_id: Optional[int] = Field(None, alias="membershipTypeId")
    membership_type: Optional[str] = Field(None, alias="membershipType")
    fl_additional_membership: Optional[bool] = Field(
        None, alias="flAdditionalMembership"
    )
    fl_allow_locker: Optional[bool] = Field(None, alias="flAllowLocker")
    id_category_membership: Optional[int] = Field(None, alias="idCategoryMembership")

    class Config:
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {datetime: lambda v: v.isoformat()}

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        return self.model_dump(by_alias=True, exclude_none=True)

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return str(self.model_dump(by_alias=True, exclude_none=True))

    def __eq__(self, other: object) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, BasicMemberMembershipApiViewModel):
            return False
        return self.model_dump(by_alias=True, exclude_none=True) == other.model_dump(
            by_alias=True, exclude_none=True
        )

    def __ne__(self, other: object) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
