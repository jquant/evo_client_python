# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field

from .freeze_view_model import FreezeViewModel
from .bonus_session_view_model import BonusSessionViewModel


class MemberMembershipApiViewModel(BaseModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    id_member: Optional[int] = Field(None, alias="idMember")
    id_membership: Optional[int] = Field(None, alias="idMembership")
    id_member_membership: Optional[int] = Field(None, alias="idMemberMembership")
    id_member_membership_renewed: Optional[int] = Field(
        None, alias="idMemberMembershipRenewed"
    )
    num_members: Optional[int] = Field(None, alias="numMembers")
    fl_renewed: Optional[bool] = Field(None, alias="flRenewed")
    start_date: Optional[datetime] = Field(None, alias="startDate")
    end_date: Optional[datetime] = Field(None, alias="endDate")
    name: Optional[str] = None
    cancel_date: Optional[datetime] = Field(None, alias="cancelDate")
    membership_status: Optional[str] = Field(None, alias="membershipStatus")
    value_next_month: Optional[float] = Field(None, alias="valueNextMonth")
    next_charge: Optional[datetime] = Field(None, alias="nextCharge")
    id_sale: Optional[int] = Field(None, alias="idSale")
    sale_date: Optional[datetime] = Field(None, alias="saleDate")
    contract_printing: Optional[str] = Field(None, alias="contractPrinting")
    freezes: Optional[List[FreezeViewModel]] = None
    id_category_membership: Optional[int] = Field(None, alias="idCategoryMembership")
    number_suspension_times: Optional[int] = Field(None, alias="numberSuspensionTimes")
    max_suspension_days: Optional[int] = Field(None, alias="maxSuspensionDays")
    minimum_suspension_days: Optional[int] = Field(None, alias="minimumSuspensionDays")
    disponible_suspension_days: Optional[int] = Field(
        None, alias="disponibleSuspensionDays"
    )
    disponible_suspension_times: Optional[int] = Field(
        None, alias="disponibleSuspensionTimes"
    )
    days_left_to_freeze: Optional[int] = Field(None, alias="daysLeftToFreeze")
    loyalty_end_date: Optional[datetime] = Field(None, alias="loyaltyEndDate")
    assessment_end_date: Optional[datetime] = Field(None, alias="assessmentEndDate")
    acceptance_date: Optional[datetime] = Field(None, alias="acceptanceDate")
    fl_allow_locker: Optional[bool] = Field(None, alias="flAllowLocker")
    fl_additional_membership: Optional[bool] = Field(
        None, alias="flAdditionalMembership"
    )
    bioimpedance_amount: Optional[int] = Field(None, alias="bioimpedanceAmount")
    signed_terms: Optional[bool] = Field(None, alias="signedTerms")
    original_value: Optional[float] = Field(None, alias="originalValue")
    limitless: Optional[bool] = None
    weekly_limit: Optional[int] = Field(None, alias="weeklyLimit")
    concluded_sessions: Optional[int] = Field(None, alias="concludedSessions")
    pending_sessions: Optional[int] = Field(None, alias="pendingSessions")
    scheduled_sessions: Optional[int] = Field(None, alias="scheduledSessions")
    pending_repositions: Optional[int] = Field(None, alias="pendingRepositions")
    repositions_total: Optional[int] = Field(None, alias="repositionsTotal")
    bonus_sessions: Optional[int] = Field(None, alias="bonusSessions")
    sessions: Optional[List[BonusSessionViewModel]] = None

    class Config:
        """Pydantic model configuration"""

        populate_by_name = True
        validate_assignment = True

    def to_dict(self):
        """Returns the model properties as a dict"""
        return self.model_dump(by_alias=True, exclude_none=True)

    def to_str(self):
        """Returns the string representation of the model"""
        return str(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberMembershipApiViewModel):
            return False

        return self.model_dump() == other.model_dump()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
