# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BusinessHoursViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_hour': 'int',
        'id_branch': 'int',
        'week_day': 'str',
        'hours_from': 'datetime',
        'hours_to': 'datetime',
        'fl_deleted': 'bool',
        'id_tmp': 'int',
        'creation_date': 'datetime',
        'id_employee_creation': 'int'
    }

    attribute_map = {
        'id_hour': 'idHour',
        'id_branch': 'idBranch',
        'week_day': 'weekDay',
        'hours_from': 'hoursFrom',
        'hours_to': 'hoursTo',
        'fl_deleted': 'flDeleted',
        'id_tmp': 'idTmp',
        'creation_date': 'creationDate',
        'id_employee_creation': 'idEmployeeCreation'
    }

    def __init__(self, id_hour=None, id_branch=None, week_day=None, hours_from=None, hours_to=None, fl_deleted=None, id_tmp=None, creation_date=None, id_employee_creation=None):  # noqa: E501
        """BusinessHoursViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_hour = None
        self._id_branch = None
        self._week_day = None
        self._hours_from = None
        self._hours_to = None
        self._fl_deleted = None
        self._id_tmp = None
        self._creation_date = None
        self._id_employee_creation = None
        self.discriminator = None
        if id_hour is not None:
            self.id_hour = id_hour
        if id_branch is not None:
            self.id_branch = id_branch
        if week_day is not None:
            self.week_day = week_day
        if hours_from is not None:
            self.hours_from = hours_from
        if hours_to is not None:
            self.hours_to = hours_to
        if fl_deleted is not None:
            self.fl_deleted = fl_deleted
        if id_tmp is not None:
            self.id_tmp = id_tmp
        if creation_date is not None:
            self.creation_date = creation_date
        if id_employee_creation is not None:
            self.id_employee_creation = id_employee_creation

    @property
    def id_hour(self):
        """Gets the id_hour of this BusinessHoursViewModel.  # noqa: E501


        :return: The id_hour of this BusinessHoursViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_hour

    @id_hour.setter
    def id_hour(self, id_hour):
        """Sets the id_hour of this BusinessHoursViewModel.


        :param id_hour: The id_hour of this BusinessHoursViewModel.  # noqa: E501
        :type: int
        """

        self._id_hour = id_hour

    @property
    def id_branch(self):
        """Gets the id_branch of this BusinessHoursViewModel.  # noqa: E501


        :return: The id_branch of this BusinessHoursViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_branch

    @id_branch.setter
    def id_branch(self, id_branch):
        """Sets the id_branch of this BusinessHoursViewModel.


        :param id_branch: The id_branch of this BusinessHoursViewModel.  # noqa: E501
        :type: int
        """

        self._id_branch = id_branch

    @property
    def week_day(self):
        """Gets the week_day of this BusinessHoursViewModel.  # noqa: E501


        :return: The week_day of this BusinessHoursViewModel.  # noqa: E501
        :rtype: str
        """
        return self._week_day

    @week_day.setter
    def week_day(self, week_day):
        """Sets the week_day of this BusinessHoursViewModel.


        :param week_day: The week_day of this BusinessHoursViewModel.  # noqa: E501
        :type: str
        """

        self._week_day = week_day

    @property
    def hours_from(self):
        """Gets the hours_from of this BusinessHoursViewModel.  # noqa: E501


        :return: The hours_from of this BusinessHoursViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._hours_from

    @hours_from.setter
    def hours_from(self, hours_from):
        """Sets the hours_from of this BusinessHoursViewModel.


        :param hours_from: The hours_from of this BusinessHoursViewModel.  # noqa: E501
        :type: datetime
        """

        self._hours_from = hours_from

    @property
    def hours_to(self):
        """Gets the hours_to of this BusinessHoursViewModel.  # noqa: E501


        :return: The hours_to of this BusinessHoursViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._hours_to

    @hours_to.setter
    def hours_to(self, hours_to):
        """Sets the hours_to of this BusinessHoursViewModel.


        :param hours_to: The hours_to of this BusinessHoursViewModel.  # noqa: E501
        :type: datetime
        """

        self._hours_to = hours_to

    @property
    def fl_deleted(self):
        """Gets the fl_deleted of this BusinessHoursViewModel.  # noqa: E501


        :return: The fl_deleted of this BusinessHoursViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_deleted

    @fl_deleted.setter
    def fl_deleted(self, fl_deleted):
        """Sets the fl_deleted of this BusinessHoursViewModel.


        :param fl_deleted: The fl_deleted of this BusinessHoursViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_deleted = fl_deleted

    @property
    def id_tmp(self):
        """Gets the id_tmp of this BusinessHoursViewModel.  # noqa: E501


        :return: The id_tmp of this BusinessHoursViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_tmp

    @id_tmp.setter
    def id_tmp(self, id_tmp):
        """Sets the id_tmp of this BusinessHoursViewModel.


        :param id_tmp: The id_tmp of this BusinessHoursViewModel.  # noqa: E501
        :type: int
        """

        self._id_tmp = id_tmp

    @property
    def creation_date(self):
        """Gets the creation_date of this BusinessHoursViewModel.  # noqa: E501


        :return: The creation_date of this BusinessHoursViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this BusinessHoursViewModel.


        :param creation_date: The creation_date of this BusinessHoursViewModel.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def id_employee_creation(self):
        """Gets the id_employee_creation of this BusinessHoursViewModel.  # noqa: E501


        :return: The id_employee_creation of this BusinessHoursViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_employee_creation

    @id_employee_creation.setter
    def id_employee_creation(self, id_employee_creation):
        """Sets the id_employee_creation of this BusinessHoursViewModel.


        :param id_employee_creation: The id_employee_creation of this BusinessHoursViewModel.  # noqa: E501
        :type: int
        """

        self._id_employee_creation = id_employee_creation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BusinessHoursViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessHoursViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
