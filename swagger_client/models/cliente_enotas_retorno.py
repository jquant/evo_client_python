# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClienteEnotasRetorno(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_cliente': 'int',
        'tipo_pessoa': 'str',
        'nome': 'str',
        'email': 'str',
        'cpf_cnpj': 'str',
        'inscricao_municipal': 'str',
        'telefone': 'str',
        'endereco': 'EnderecoEnotasRetorno'
    }

    attribute_map = {
        'id_cliente': 'idCliente',
        'tipo_pessoa': 'tipoPessoa',
        'nome': 'nome',
        'email': 'email',
        'cpf_cnpj': 'cpfCnpj',
        'inscricao_municipal': 'inscricaoMunicipal',
        'telefone': 'telefone',
        'endereco': 'endereco'
    }

    def __init__(self, id_cliente=None, tipo_pessoa=None, nome=None, email=None, cpf_cnpj=None, inscricao_municipal=None, telefone=None, endereco=None):  # noqa: E501
        """ClienteEnotasRetorno - a model defined in Swagger"""  # noqa: E501
        self._id_cliente = None
        self._tipo_pessoa = None
        self._nome = None
        self._email = None
        self._cpf_cnpj = None
        self._inscricao_municipal = None
        self._telefone = None
        self._endereco = None
        self.discriminator = None
        if id_cliente is not None:
            self.id_cliente = id_cliente
        if tipo_pessoa is not None:
            self.tipo_pessoa = tipo_pessoa
        if nome is not None:
            self.nome = nome
        if email is not None:
            self.email = email
        if cpf_cnpj is not None:
            self.cpf_cnpj = cpf_cnpj
        if inscricao_municipal is not None:
            self.inscricao_municipal = inscricao_municipal
        if telefone is not None:
            self.telefone = telefone
        if endereco is not None:
            self.endereco = endereco

    @property
    def id_cliente(self):
        """Gets the id_cliente of this ClienteEnotasRetorno.  # noqa: E501


        :return: The id_cliente of this ClienteEnotasRetorno.  # noqa: E501
        :rtype: int
        """
        return self._id_cliente

    @id_cliente.setter
    def id_cliente(self, id_cliente):
        """Sets the id_cliente of this ClienteEnotasRetorno.


        :param id_cliente: The id_cliente of this ClienteEnotasRetorno.  # noqa: E501
        :type: int
        """

        self._id_cliente = id_cliente

    @property
    def tipo_pessoa(self):
        """Gets the tipo_pessoa of this ClienteEnotasRetorno.  # noqa: E501


        :return: The tipo_pessoa of this ClienteEnotasRetorno.  # noqa: E501
        :rtype: str
        """
        return self._tipo_pessoa

    @tipo_pessoa.setter
    def tipo_pessoa(self, tipo_pessoa):
        """Sets the tipo_pessoa of this ClienteEnotasRetorno.


        :param tipo_pessoa: The tipo_pessoa of this ClienteEnotasRetorno.  # noqa: E501
        :type: str
        """

        self._tipo_pessoa = tipo_pessoa

    @property
    def nome(self):
        """Gets the nome of this ClienteEnotasRetorno.  # noqa: E501


        :return: The nome of this ClienteEnotasRetorno.  # noqa: E501
        :rtype: str
        """
        return self._nome

    @nome.setter
    def nome(self, nome):
        """Sets the nome of this ClienteEnotasRetorno.


        :param nome: The nome of this ClienteEnotasRetorno.  # noqa: E501
        :type: str
        """

        self._nome = nome

    @property
    def email(self):
        """Gets the email of this ClienteEnotasRetorno.  # noqa: E501


        :return: The email of this ClienteEnotasRetorno.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ClienteEnotasRetorno.


        :param email: The email of this ClienteEnotasRetorno.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def cpf_cnpj(self):
        """Gets the cpf_cnpj of this ClienteEnotasRetorno.  # noqa: E501


        :return: The cpf_cnpj of this ClienteEnotasRetorno.  # noqa: E501
        :rtype: str
        """
        return self._cpf_cnpj

    @cpf_cnpj.setter
    def cpf_cnpj(self, cpf_cnpj):
        """Sets the cpf_cnpj of this ClienteEnotasRetorno.


        :param cpf_cnpj: The cpf_cnpj of this ClienteEnotasRetorno.  # noqa: E501
        :type: str
        """

        self._cpf_cnpj = cpf_cnpj

    @property
    def inscricao_municipal(self):
        """Gets the inscricao_municipal of this ClienteEnotasRetorno.  # noqa: E501


        :return: The inscricao_municipal of this ClienteEnotasRetorno.  # noqa: E501
        :rtype: str
        """
        return self._inscricao_municipal

    @inscricao_municipal.setter
    def inscricao_municipal(self, inscricao_municipal):
        """Sets the inscricao_municipal of this ClienteEnotasRetorno.


        :param inscricao_municipal: The inscricao_municipal of this ClienteEnotasRetorno.  # noqa: E501
        :type: str
        """

        self._inscricao_municipal = inscricao_municipal

    @property
    def telefone(self):
        """Gets the telefone of this ClienteEnotasRetorno.  # noqa: E501


        :return: The telefone of this ClienteEnotasRetorno.  # noqa: E501
        :rtype: str
        """
        return self._telefone

    @telefone.setter
    def telefone(self, telefone):
        """Sets the telefone of this ClienteEnotasRetorno.


        :param telefone: The telefone of this ClienteEnotasRetorno.  # noqa: E501
        :type: str
        """

        self._telefone = telefone

    @property
    def endereco(self):
        """Gets the endereco of this ClienteEnotasRetorno.  # noqa: E501


        :return: The endereco of this ClienteEnotasRetorno.  # noqa: E501
        :rtype: EnderecoEnotasRetorno
        """
        return self._endereco

    @endereco.setter
    def endereco(self, endereco):
        """Sets the endereco of this ClienteEnotasRetorno.


        :param endereco: The endereco of this ClienteEnotasRetorno.  # noqa: E501
        :type: EnderecoEnotasRetorno
        """

        self._endereco = endereco

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClienteEnotasRetorno, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClienteEnotasRetorno):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
