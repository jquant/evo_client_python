# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SalesViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_sale': 'int',
        'id_member': 'int',
        'id_employee': 'int',
        'id_prospect': 'int',
        'id_employee_sale': 'int',
        'sale_date': 'datetime',
        'sale_date_server': 'datetime',
        'id_personal': 'int',
        'corporate_partnership_name': 'str',
        'coporate_partnership_id': 'int',
        'removed': 'bool',
        'id_employee_removal': 'int',
        'removal_date': 'datetime',
        'id_branch': 'int',
        'observations': 'str',
        'id_sale_recurrency': 'int',
        'sale_source': 'int',
        'id_sale_migration': 'str',
        'sale_itens': 'list[SaleItensViewModel]',
        'receivables': 'list[ReceivablesApiViewModel]'
    }

    attribute_map = {
        'id_sale': 'idSale',
        'id_member': 'idMember',
        'id_employee': 'idEmployee',
        'id_prospect': 'idProspect',
        'id_employee_sale': 'idEmployeeSale',
        'sale_date': 'saleDate',
        'sale_date_server': 'saleDateServer',
        'id_personal': 'idPersonal',
        'corporate_partnership_name': 'corporatePartnershipName',
        'coporate_partnership_id': 'coporatePartnershipId',
        'removed': 'removed',
        'id_employee_removal': 'idEmployeeRemoval',
        'removal_date': 'removalDate',
        'id_branch': 'idBranch',
        'observations': 'observations',
        'id_sale_recurrency': 'idSaleRecurrency',
        'sale_source': 'saleSource',
        'id_sale_migration': 'idSaleMigration',
        'sale_itens': 'saleItens',
        'receivables': 'receivables'
    }

    def __init__(self, id_sale=None, id_member=None, id_employee=None, id_prospect=None, id_employee_sale=None, sale_date=None, sale_date_server=None, id_personal=None, corporate_partnership_name=None, coporate_partnership_id=None, removed=None, id_employee_removal=None, removal_date=None, id_branch=None, observations=None, id_sale_recurrency=None, sale_source=None, id_sale_migration=None, sale_itens=None, receivables=None):  # noqa: E501
        """SalesViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_sale = None
        self._id_member = None
        self._id_employee = None
        self._id_prospect = None
        self._id_employee_sale = None
        self._sale_date = None
        self._sale_date_server = None
        self._id_personal = None
        self._corporate_partnership_name = None
        self._coporate_partnership_id = None
        self._removed = None
        self._id_employee_removal = None
        self._removal_date = None
        self._id_branch = None
        self._observations = None
        self._id_sale_recurrency = None
        self._sale_source = None
        self._id_sale_migration = None
        self._sale_itens = None
        self._receivables = None
        self.discriminator = None
        if id_sale is not None:
            self.id_sale = id_sale
        if id_member is not None:
            self.id_member = id_member
        if id_employee is not None:
            self.id_employee = id_employee
        if id_prospect is not None:
            self.id_prospect = id_prospect
        if id_employee_sale is not None:
            self.id_employee_sale = id_employee_sale
        if sale_date is not None:
            self.sale_date = sale_date
        if sale_date_server is not None:
            self.sale_date_server = sale_date_server
        if id_personal is not None:
            self.id_personal = id_personal
        if corporate_partnership_name is not None:
            self.corporate_partnership_name = corporate_partnership_name
        if coporate_partnership_id is not None:
            self.coporate_partnership_id = coporate_partnership_id
        if removed is not None:
            self.removed = removed
        if id_employee_removal is not None:
            self.id_employee_removal = id_employee_removal
        if removal_date is not None:
            self.removal_date = removal_date
        if id_branch is not None:
            self.id_branch = id_branch
        if observations is not None:
            self.observations = observations
        if id_sale_recurrency is not None:
            self.id_sale_recurrency = id_sale_recurrency
        if sale_source is not None:
            self.sale_source = sale_source
        if id_sale_migration is not None:
            self.id_sale_migration = id_sale_migration
        if sale_itens is not None:
            self.sale_itens = sale_itens
        if receivables is not None:
            self.receivables = receivables

    @property
    def id_sale(self):
        """Gets the id_sale of this SalesViewModel.  # noqa: E501


        :return: The id_sale of this SalesViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_sale

    @id_sale.setter
    def id_sale(self, id_sale):
        """Sets the id_sale of this SalesViewModel.


        :param id_sale: The id_sale of this SalesViewModel.  # noqa: E501
        :type: int
        """

        self._id_sale = id_sale

    @property
    def id_member(self):
        """Gets the id_member of this SalesViewModel.  # noqa: E501


        :return: The id_member of this SalesViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_member

    @id_member.setter
    def id_member(self, id_member):
        """Sets the id_member of this SalesViewModel.


        :param id_member: The id_member of this SalesViewModel.  # noqa: E501
        :type: int
        """

        self._id_member = id_member

    @property
    def id_employee(self):
        """Gets the id_employee of this SalesViewModel.  # noqa: E501


        :return: The id_employee of this SalesViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_employee

    @id_employee.setter
    def id_employee(self, id_employee):
        """Sets the id_employee of this SalesViewModel.


        :param id_employee: The id_employee of this SalesViewModel.  # noqa: E501
        :type: int
        """

        self._id_employee = id_employee

    @property
    def id_prospect(self):
        """Gets the id_prospect of this SalesViewModel.  # noqa: E501


        :return: The id_prospect of this SalesViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_prospect

    @id_prospect.setter
    def id_prospect(self, id_prospect):
        """Sets the id_prospect of this SalesViewModel.


        :param id_prospect: The id_prospect of this SalesViewModel.  # noqa: E501
        :type: int
        """

        self._id_prospect = id_prospect

    @property
    def id_employee_sale(self):
        """Gets the id_employee_sale of this SalesViewModel.  # noqa: E501


        :return: The id_employee_sale of this SalesViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_employee_sale

    @id_employee_sale.setter
    def id_employee_sale(self, id_employee_sale):
        """Sets the id_employee_sale of this SalesViewModel.


        :param id_employee_sale: The id_employee_sale of this SalesViewModel.  # noqa: E501
        :type: int
        """

        self._id_employee_sale = id_employee_sale

    @property
    def sale_date(self):
        """Gets the sale_date of this SalesViewModel.  # noqa: E501


        :return: The sale_date of this SalesViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._sale_date

    @sale_date.setter
    def sale_date(self, sale_date):
        """Sets the sale_date of this SalesViewModel.


        :param sale_date: The sale_date of this SalesViewModel.  # noqa: E501
        :type: datetime
        """

        self._sale_date = sale_date

    @property
    def sale_date_server(self):
        """Gets the sale_date_server of this SalesViewModel.  # noqa: E501


        :return: The sale_date_server of this SalesViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._sale_date_server

    @sale_date_server.setter
    def sale_date_server(self, sale_date_server):
        """Sets the sale_date_server of this SalesViewModel.


        :param sale_date_server: The sale_date_server of this SalesViewModel.  # noqa: E501
        :type: datetime
        """

        self._sale_date_server = sale_date_server

    @property
    def id_personal(self):
        """Gets the id_personal of this SalesViewModel.  # noqa: E501


        :return: The id_personal of this SalesViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_personal

    @id_personal.setter
    def id_personal(self, id_personal):
        """Sets the id_personal of this SalesViewModel.


        :param id_personal: The id_personal of this SalesViewModel.  # noqa: E501
        :type: int
        """

        self._id_personal = id_personal

    @property
    def corporate_partnership_name(self):
        """Gets the corporate_partnership_name of this SalesViewModel.  # noqa: E501


        :return: The corporate_partnership_name of this SalesViewModel.  # noqa: E501
        :rtype: str
        """
        return self._corporate_partnership_name

    @corporate_partnership_name.setter
    def corporate_partnership_name(self, corporate_partnership_name):
        """Sets the corporate_partnership_name of this SalesViewModel.


        :param corporate_partnership_name: The corporate_partnership_name of this SalesViewModel.  # noqa: E501
        :type: str
        """

        self._corporate_partnership_name = corporate_partnership_name

    @property
    def coporate_partnership_id(self):
        """Gets the coporate_partnership_id of this SalesViewModel.  # noqa: E501


        :return: The coporate_partnership_id of this SalesViewModel.  # noqa: E501
        :rtype: int
        """
        return self._coporate_partnership_id

    @coporate_partnership_id.setter
    def coporate_partnership_id(self, coporate_partnership_id):
        """Sets the coporate_partnership_id of this SalesViewModel.


        :param coporate_partnership_id: The coporate_partnership_id of this SalesViewModel.  # noqa: E501
        :type: int
        """

        self._coporate_partnership_id = coporate_partnership_id

    @property
    def removed(self):
        """Gets the removed of this SalesViewModel.  # noqa: E501


        :return: The removed of this SalesViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._removed

    @removed.setter
    def removed(self, removed):
        """Sets the removed of this SalesViewModel.


        :param removed: The removed of this SalesViewModel.  # noqa: E501
        :type: bool
        """

        self._removed = removed

    @property
    def id_employee_removal(self):
        """Gets the id_employee_removal of this SalesViewModel.  # noqa: E501


        :return: The id_employee_removal of this SalesViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_employee_removal

    @id_employee_removal.setter
    def id_employee_removal(self, id_employee_removal):
        """Sets the id_employee_removal of this SalesViewModel.


        :param id_employee_removal: The id_employee_removal of this SalesViewModel.  # noqa: E501
        :type: int
        """

        self._id_employee_removal = id_employee_removal

    @property
    def removal_date(self):
        """Gets the removal_date of this SalesViewModel.  # noqa: E501


        :return: The removal_date of this SalesViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._removal_date

    @removal_date.setter
    def removal_date(self, removal_date):
        """Sets the removal_date of this SalesViewModel.


        :param removal_date: The removal_date of this SalesViewModel.  # noqa: E501
        :type: datetime
        """

        self._removal_date = removal_date

    @property
    def id_branch(self):
        """Gets the id_branch of this SalesViewModel.  # noqa: E501


        :return: The id_branch of this SalesViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_branch

    @id_branch.setter
    def id_branch(self, id_branch):
        """Sets the id_branch of this SalesViewModel.


        :param id_branch: The id_branch of this SalesViewModel.  # noqa: E501
        :type: int
        """

        self._id_branch = id_branch

    @property
    def observations(self):
        """Gets the observations of this SalesViewModel.  # noqa: E501


        :return: The observations of this SalesViewModel.  # noqa: E501
        :rtype: str
        """
        return self._observations

    @observations.setter
    def observations(self, observations):
        """Sets the observations of this SalesViewModel.


        :param observations: The observations of this SalesViewModel.  # noqa: E501
        :type: str
        """

        self._observations = observations

    @property
    def id_sale_recurrency(self):
        """Gets the id_sale_recurrency of this SalesViewModel.  # noqa: E501


        :return: The id_sale_recurrency of this SalesViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_sale_recurrency

    @id_sale_recurrency.setter
    def id_sale_recurrency(self, id_sale_recurrency):
        """Sets the id_sale_recurrency of this SalesViewModel.


        :param id_sale_recurrency: The id_sale_recurrency of this SalesViewModel.  # noqa: E501
        :type: int
        """

        self._id_sale_recurrency = id_sale_recurrency

    @property
    def sale_source(self):
        """Gets the sale_source of this SalesViewModel.  # noqa: E501


        :return: The sale_source of this SalesViewModel.  # noqa: E501
        :rtype: int
        """
        return self._sale_source

    @sale_source.setter
    def sale_source(self, sale_source):
        """Sets the sale_source of this SalesViewModel.


        :param sale_source: The sale_source of this SalesViewModel.  # noqa: E501
        :type: int
        """

        self._sale_source = sale_source

    @property
    def id_sale_migration(self):
        """Gets the id_sale_migration of this SalesViewModel.  # noqa: E501


        :return: The id_sale_migration of this SalesViewModel.  # noqa: E501
        :rtype: str
        """
        return self._id_sale_migration

    @id_sale_migration.setter
    def id_sale_migration(self, id_sale_migration):
        """Sets the id_sale_migration of this SalesViewModel.


        :param id_sale_migration: The id_sale_migration of this SalesViewModel.  # noqa: E501
        :type: str
        """

        self._id_sale_migration = id_sale_migration

    @property
    def sale_itens(self):
        """Gets the sale_itens of this SalesViewModel.  # noqa: E501


        :return: The sale_itens of this SalesViewModel.  # noqa: E501
        :rtype: list[SaleItensViewModel]
        """
        return self._sale_itens

    @sale_itens.setter
    def sale_itens(self, sale_itens):
        """Sets the sale_itens of this SalesViewModel.


        :param sale_itens: The sale_itens of this SalesViewModel.  # noqa: E501
        :type: list[SaleItensViewModel]
        """

        self._sale_itens = sale_itens

    @property
    def receivables(self):
        """Gets the receivables of this SalesViewModel.  # noqa: E501


        :return: The receivables of this SalesViewModel.  # noqa: E501
        :rtype: list[ReceivablesApiViewModel]
        """
        return self._receivables

    @receivables.setter
    def receivables(self, receivables):
        """Sets the receivables of this SalesViewModel.


        :param receivables: The receivables of this SalesViewModel.  # noqa: E501
        :type: list[ReceivablesApiViewModel]
        """

        self._receivables = receivables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalesViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalesViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
