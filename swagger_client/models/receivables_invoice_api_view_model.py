# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReceivablesInvoiceApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invoice_number': 'str',
        'issued_amount': 'float',
        'status': 'str',
        'send_date': 'datetime',
        'canceled_date': 'datetime',
        'url_pdf': 'str',
        'id_invoice_type': 'int',
        'invoice_type': 'str'
    }

    attribute_map = {
        'invoice_number': 'invoiceNumber',
        'issued_amount': 'issuedAmount',
        'status': 'status',
        'send_date': 'sendDate',
        'canceled_date': 'canceledDate',
        'url_pdf': 'urlPdf',
        'id_invoice_type': 'idInvoiceType',
        'invoice_type': 'invoiceType'
    }

    def __init__(self, invoice_number=None, issued_amount=None, status=None, send_date=None, canceled_date=None, url_pdf=None, id_invoice_type=None, invoice_type=None):  # noqa: E501
        """ReceivablesInvoiceApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._invoice_number = None
        self._issued_amount = None
        self._status = None
        self._send_date = None
        self._canceled_date = None
        self._url_pdf = None
        self._id_invoice_type = None
        self._invoice_type = None
        self.discriminator = None
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if issued_amount is not None:
            self.issued_amount = issued_amount
        if status is not None:
            self.status = status
        if send_date is not None:
            self.send_date = send_date
        if canceled_date is not None:
            self.canceled_date = canceled_date
        if url_pdf is not None:
            self.url_pdf = url_pdf
        if id_invoice_type is not None:
            self.id_invoice_type = id_invoice_type
        if invoice_type is not None:
            self.invoice_type = invoice_type

    @property
    def invoice_number(self):
        """Gets the invoice_number of this ReceivablesInvoiceApiViewModel.  # noqa: E501


        :return: The invoice_number of this ReceivablesInvoiceApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this ReceivablesInvoiceApiViewModel.


        :param invoice_number: The invoice_number of this ReceivablesInvoiceApiViewModel.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def issued_amount(self):
        """Gets the issued_amount of this ReceivablesInvoiceApiViewModel.  # noqa: E501


        :return: The issued_amount of this ReceivablesInvoiceApiViewModel.  # noqa: E501
        :rtype: float
        """
        return self._issued_amount

    @issued_amount.setter
    def issued_amount(self, issued_amount):
        """Sets the issued_amount of this ReceivablesInvoiceApiViewModel.


        :param issued_amount: The issued_amount of this ReceivablesInvoiceApiViewModel.  # noqa: E501
        :type: float
        """

        self._issued_amount = issued_amount

    @property
    def status(self):
        """Gets the status of this ReceivablesInvoiceApiViewModel.  # noqa: E501


        :return: The status of this ReceivablesInvoiceApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReceivablesInvoiceApiViewModel.


        :param status: The status of this ReceivablesInvoiceApiViewModel.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def send_date(self):
        """Gets the send_date of this ReceivablesInvoiceApiViewModel.  # noqa: E501


        :return: The send_date of this ReceivablesInvoiceApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._send_date

    @send_date.setter
    def send_date(self, send_date):
        """Sets the send_date of this ReceivablesInvoiceApiViewModel.


        :param send_date: The send_date of this ReceivablesInvoiceApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._send_date = send_date

    @property
    def canceled_date(self):
        """Gets the canceled_date of this ReceivablesInvoiceApiViewModel.  # noqa: E501


        :return: The canceled_date of this ReceivablesInvoiceApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._canceled_date

    @canceled_date.setter
    def canceled_date(self, canceled_date):
        """Sets the canceled_date of this ReceivablesInvoiceApiViewModel.


        :param canceled_date: The canceled_date of this ReceivablesInvoiceApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._canceled_date = canceled_date

    @property
    def url_pdf(self):
        """Gets the url_pdf of this ReceivablesInvoiceApiViewModel.  # noqa: E501


        :return: The url_pdf of this ReceivablesInvoiceApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._url_pdf

    @url_pdf.setter
    def url_pdf(self, url_pdf):
        """Sets the url_pdf of this ReceivablesInvoiceApiViewModel.


        :param url_pdf: The url_pdf of this ReceivablesInvoiceApiViewModel.  # noqa: E501
        :type: str
        """

        self._url_pdf = url_pdf

    @property
    def id_invoice_type(self):
        """Gets the id_invoice_type of this ReceivablesInvoiceApiViewModel.  # noqa: E501


        :return: The id_invoice_type of this ReceivablesInvoiceApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_invoice_type

    @id_invoice_type.setter
    def id_invoice_type(self, id_invoice_type):
        """Sets the id_invoice_type of this ReceivablesInvoiceApiViewModel.


        :param id_invoice_type: The id_invoice_type of this ReceivablesInvoiceApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_invoice_type = id_invoice_type

    @property
    def invoice_type(self):
        """Gets the invoice_type of this ReceivablesInvoiceApiViewModel.  # noqa: E501


        :return: The invoice_type of this ReceivablesInvoiceApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._invoice_type

    @invoice_type.setter
    def invoice_type(self, invoice_type):
        """Sets the invoice_type of this ReceivablesInvoiceApiViewModel.


        :param invoice_type: The invoice_type of this ReceivablesInvoiceApiViewModel.  # noqa: E501
        :type: str
        """

        self._invoice_type = invoice_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReceivablesInvoiceApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReceivablesInvoiceApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
