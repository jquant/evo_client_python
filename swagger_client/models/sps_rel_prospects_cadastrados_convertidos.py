# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SpsRelProspectsCadastradosConvertidos(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_filial': 'int',
        'nome_filial': 'str',
        'status': 'str',
        'id_prospect': 'int',
        'nome': 'str',
        'dt_cadastro': 'datetime',
        'primeira_visita': 'str',
        'convertido_por': 'str',
        'dt_conversao': 'datetime',
        'id_cliente': 'int',
        'descricao': 'str',
        'primeiro_contrato': 'str',
        'apelido': 'str',
        'marketing': 'str'
    }

    attribute_map = {
        'id_filial': 'idFilial',
        'nome_filial': 'nomeFilial',
        'status': 'status',
        'id_prospect': 'idProspect',
        'nome': 'nome',
        'dt_cadastro': 'dtCadastro',
        'primeira_visita': 'primeiraVisita',
        'convertido_por': 'convertidoPor',
        'dt_conversao': 'dtConversao',
        'id_cliente': 'idCliente',
        'descricao': 'descricao',
        'primeiro_contrato': 'primeiroContrato',
        'apelido': 'apelido',
        'marketing': 'marketing'
    }

    def __init__(self, id_filial=None, nome_filial=None, status=None, id_prospect=None, nome=None, dt_cadastro=None, primeira_visita=None, convertido_por=None, dt_conversao=None, id_cliente=None, descricao=None, primeiro_contrato=None, apelido=None, marketing=None):  # noqa: E501
        """SpsRelProspectsCadastradosConvertidos - a model defined in Swagger"""  # noqa: E501
        self._id_filial = None
        self._nome_filial = None
        self._status = None
        self._id_prospect = None
        self._nome = None
        self._dt_cadastro = None
        self._primeira_visita = None
        self._convertido_por = None
        self._dt_conversao = None
        self._id_cliente = None
        self._descricao = None
        self._primeiro_contrato = None
        self._apelido = None
        self._marketing = None
        self.discriminator = None
        if id_filial is not None:
            self.id_filial = id_filial
        if nome_filial is not None:
            self.nome_filial = nome_filial
        if status is not None:
            self.status = status
        if id_prospect is not None:
            self.id_prospect = id_prospect
        if nome is not None:
            self.nome = nome
        if dt_cadastro is not None:
            self.dt_cadastro = dt_cadastro
        if primeira_visita is not None:
            self.primeira_visita = primeira_visita
        if convertido_por is not None:
            self.convertido_por = convertido_por
        if dt_conversao is not None:
            self.dt_conversao = dt_conversao
        if id_cliente is not None:
            self.id_cliente = id_cliente
        if descricao is not None:
            self.descricao = descricao
        if primeiro_contrato is not None:
            self.primeiro_contrato = primeiro_contrato
        if apelido is not None:
            self.apelido = apelido
        if marketing is not None:
            self.marketing = marketing

    @property
    def id_filial(self):
        """Gets the id_filial of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501


        :return: The id_filial of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :rtype: int
        """
        return self._id_filial

    @id_filial.setter
    def id_filial(self, id_filial):
        """Sets the id_filial of this SpsRelProspectsCadastradosConvertidos.


        :param id_filial: The id_filial of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :type: int
        """

        self._id_filial = id_filial

    @property
    def nome_filial(self):
        """Gets the nome_filial of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501


        :return: The nome_filial of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :rtype: str
        """
        return self._nome_filial

    @nome_filial.setter
    def nome_filial(self, nome_filial):
        """Sets the nome_filial of this SpsRelProspectsCadastradosConvertidos.


        :param nome_filial: The nome_filial of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :type: str
        """

        self._nome_filial = nome_filial

    @property
    def status(self):
        """Gets the status of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501


        :return: The status of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SpsRelProspectsCadastradosConvertidos.


        :param status: The status of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def id_prospect(self):
        """Gets the id_prospect of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501


        :return: The id_prospect of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :rtype: int
        """
        return self._id_prospect

    @id_prospect.setter
    def id_prospect(self, id_prospect):
        """Sets the id_prospect of this SpsRelProspectsCadastradosConvertidos.


        :param id_prospect: The id_prospect of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :type: int
        """

        self._id_prospect = id_prospect

    @property
    def nome(self):
        """Gets the nome of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501


        :return: The nome of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :rtype: str
        """
        return self._nome

    @nome.setter
    def nome(self, nome):
        """Sets the nome of this SpsRelProspectsCadastradosConvertidos.


        :param nome: The nome of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :type: str
        """

        self._nome = nome

    @property
    def dt_cadastro(self):
        """Gets the dt_cadastro of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501


        :return: The dt_cadastro of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_cadastro

    @dt_cadastro.setter
    def dt_cadastro(self, dt_cadastro):
        """Sets the dt_cadastro of this SpsRelProspectsCadastradosConvertidos.


        :param dt_cadastro: The dt_cadastro of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :type: datetime
        """

        self._dt_cadastro = dt_cadastro

    @property
    def primeira_visita(self):
        """Gets the primeira_visita of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501


        :return: The primeira_visita of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :rtype: str
        """
        return self._primeira_visita

    @primeira_visita.setter
    def primeira_visita(self, primeira_visita):
        """Sets the primeira_visita of this SpsRelProspectsCadastradosConvertidos.


        :param primeira_visita: The primeira_visita of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :type: str
        """

        self._primeira_visita = primeira_visita

    @property
    def convertido_por(self):
        """Gets the convertido_por of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501


        :return: The convertido_por of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :rtype: str
        """
        return self._convertido_por

    @convertido_por.setter
    def convertido_por(self, convertido_por):
        """Sets the convertido_por of this SpsRelProspectsCadastradosConvertidos.


        :param convertido_por: The convertido_por of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :type: str
        """

        self._convertido_por = convertido_por

    @property
    def dt_conversao(self):
        """Gets the dt_conversao of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501


        :return: The dt_conversao of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_conversao

    @dt_conversao.setter
    def dt_conversao(self, dt_conversao):
        """Sets the dt_conversao of this SpsRelProspectsCadastradosConvertidos.


        :param dt_conversao: The dt_conversao of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :type: datetime
        """

        self._dt_conversao = dt_conversao

    @property
    def id_cliente(self):
        """Gets the id_cliente of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501


        :return: The id_cliente of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :rtype: int
        """
        return self._id_cliente

    @id_cliente.setter
    def id_cliente(self, id_cliente):
        """Sets the id_cliente of this SpsRelProspectsCadastradosConvertidos.


        :param id_cliente: The id_cliente of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :type: int
        """

        self._id_cliente = id_cliente

    @property
    def descricao(self):
        """Gets the descricao of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501


        :return: The descricao of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :rtype: str
        """
        return self._descricao

    @descricao.setter
    def descricao(self, descricao):
        """Sets the descricao of this SpsRelProspectsCadastradosConvertidos.


        :param descricao: The descricao of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :type: str
        """

        self._descricao = descricao

    @property
    def primeiro_contrato(self):
        """Gets the primeiro_contrato of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501


        :return: The primeiro_contrato of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :rtype: str
        """
        return self._primeiro_contrato

    @primeiro_contrato.setter
    def primeiro_contrato(self, primeiro_contrato):
        """Sets the primeiro_contrato of this SpsRelProspectsCadastradosConvertidos.


        :param primeiro_contrato: The primeiro_contrato of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :type: str
        """

        self._primeiro_contrato = primeiro_contrato

    @property
    def apelido(self):
        """Gets the apelido of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501


        :return: The apelido of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :rtype: str
        """
        return self._apelido

    @apelido.setter
    def apelido(self, apelido):
        """Sets the apelido of this SpsRelProspectsCadastradosConvertidos.


        :param apelido: The apelido of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :type: str
        """

        self._apelido = apelido

    @property
    def marketing(self):
        """Gets the marketing of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501


        :return: The marketing of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :rtype: str
        """
        return self._marketing

    @marketing.setter
    def marketing(self, marketing):
        """Sets the marketing of this SpsRelProspectsCadastradosConvertidos.


        :param marketing: The marketing of this SpsRelProspectsCadastradosConvertidos.  # noqa: E501
        :type: str
        """

        self._marketing = marketing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpsRelProspectsCadastradosConvertidos, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpsRelProspectsCadastradosConvertidos):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
