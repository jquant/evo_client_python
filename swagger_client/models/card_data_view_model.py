# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CardDataViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'temporary_token': 'str',
        'branch_token': 'str',
        'total_installments': 'int',
        'truncated_card_number': 'str',
        'brand': 'str',
        'card_holder_name': 'str',
        'card_expiration_year': 'int',
        'card_expiration_month': 'int'
    }

    attribute_map = {
        'token': 'token',
        'temporary_token': 'temporaryToken',
        'branch_token': 'branchToken',
        'total_installments': 'totalInstallments',
        'truncated_card_number': 'truncatedCardNumber',
        'brand': 'brand',
        'card_holder_name': 'cardHolderName',
        'card_expiration_year': 'cardExpirationYear',
        'card_expiration_month': 'cardExpirationMonth'
    }

    def __init__(self, token=None, temporary_token=None, branch_token=None, total_installments=None, truncated_card_number=None, brand=None, card_holder_name=None, card_expiration_year=None, card_expiration_month=None):  # noqa: E501
        """CardDataViewModel - a model defined in Swagger"""  # noqa: E501
        self._token = None
        self._temporary_token = None
        self._branch_token = None
        self._total_installments = None
        self._truncated_card_number = None
        self._brand = None
        self._card_holder_name = None
        self._card_expiration_year = None
        self._card_expiration_month = None
        self.discriminator = None
        if token is not None:
            self.token = token
        if temporary_token is not None:
            self.temporary_token = temporary_token
        if branch_token is not None:
            self.branch_token = branch_token
        if total_installments is not None:
            self.total_installments = total_installments
        if truncated_card_number is not None:
            self.truncated_card_number = truncated_card_number
        if brand is not None:
            self.brand = brand
        if card_holder_name is not None:
            self.card_holder_name = card_holder_name
        if card_expiration_year is not None:
            self.card_expiration_year = card_expiration_year
        if card_expiration_month is not None:
            self.card_expiration_month = card_expiration_month

    @property
    def token(self):
        """Gets the token of this CardDataViewModel.  # noqa: E501


        :return: The token of this CardDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CardDataViewModel.


        :param token: The token of this CardDataViewModel.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def temporary_token(self):
        """Gets the temporary_token of this CardDataViewModel.  # noqa: E501


        :return: The temporary_token of this CardDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._temporary_token

    @temporary_token.setter
    def temporary_token(self, temporary_token):
        """Sets the temporary_token of this CardDataViewModel.


        :param temporary_token: The temporary_token of this CardDataViewModel.  # noqa: E501
        :type: str
        """

        self._temporary_token = temporary_token

    @property
    def branch_token(self):
        """Gets the branch_token of this CardDataViewModel.  # noqa: E501


        :return: The branch_token of this CardDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._branch_token

    @branch_token.setter
    def branch_token(self, branch_token):
        """Sets the branch_token of this CardDataViewModel.


        :param branch_token: The branch_token of this CardDataViewModel.  # noqa: E501
        :type: str
        """

        self._branch_token = branch_token

    @property
    def total_installments(self):
        """Gets the total_installments of this CardDataViewModel.  # noqa: E501


        :return: The total_installments of this CardDataViewModel.  # noqa: E501
        :rtype: int
        """
        return self._total_installments

    @total_installments.setter
    def total_installments(self, total_installments):
        """Sets the total_installments of this CardDataViewModel.


        :param total_installments: The total_installments of this CardDataViewModel.  # noqa: E501
        :type: int
        """

        self._total_installments = total_installments

    @property
    def truncated_card_number(self):
        """Gets the truncated_card_number of this CardDataViewModel.  # noqa: E501


        :return: The truncated_card_number of this CardDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._truncated_card_number

    @truncated_card_number.setter
    def truncated_card_number(self, truncated_card_number):
        """Sets the truncated_card_number of this CardDataViewModel.


        :param truncated_card_number: The truncated_card_number of this CardDataViewModel.  # noqa: E501
        :type: str
        """

        self._truncated_card_number = truncated_card_number

    @property
    def brand(self):
        """Gets the brand of this CardDataViewModel.  # noqa: E501


        :return: The brand of this CardDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this CardDataViewModel.


        :param brand: The brand of this CardDataViewModel.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def card_holder_name(self):
        """Gets the card_holder_name of this CardDataViewModel.  # noqa: E501


        :return: The card_holder_name of this CardDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._card_holder_name

    @card_holder_name.setter
    def card_holder_name(self, card_holder_name):
        """Sets the card_holder_name of this CardDataViewModel.


        :param card_holder_name: The card_holder_name of this CardDataViewModel.  # noqa: E501
        :type: str
        """

        self._card_holder_name = card_holder_name

    @property
    def card_expiration_year(self):
        """Gets the card_expiration_year of this CardDataViewModel.  # noqa: E501


        :return: The card_expiration_year of this CardDataViewModel.  # noqa: E501
        :rtype: int
        """
        return self._card_expiration_year

    @card_expiration_year.setter
    def card_expiration_year(self, card_expiration_year):
        """Sets the card_expiration_year of this CardDataViewModel.


        :param card_expiration_year: The card_expiration_year of this CardDataViewModel.  # noqa: E501
        :type: int
        """

        self._card_expiration_year = card_expiration_year

    @property
    def card_expiration_month(self):
        """Gets the card_expiration_month of this CardDataViewModel.  # noqa: E501


        :return: The card_expiration_month of this CardDataViewModel.  # noqa: E501
        :rtype: int
        """
        return self._card_expiration_month

    @card_expiration_month.setter
    def card_expiration_month(self, card_expiration_month):
        """Sets the card_expiration_month of this CardDataViewModel.


        :param card_expiration_month: The card_expiration_month of this CardDataViewModel.  # noqa: E501
        :type: int
        """

        self._card_expiration_month = card_expiration_month

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CardDataViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardDataViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
