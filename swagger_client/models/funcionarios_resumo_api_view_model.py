# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FuncionariosResumoApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_employee': 'int',
        'name': 'str',
        'email': 'str',
        'telephone': 'str',
        'job_position': 'str',
        'status': 'bool',
        'photo_url': 'str'
    }

    attribute_map = {
        'id_employee': 'idEmployee',
        'name': 'name',
        'email': 'email',
        'telephone': 'telephone',
        'job_position': 'jobPosition',
        'status': 'status',
        'photo_url': 'photoUrl'
    }

    def __init__(self, id_employee=None, name=None, email=None, telephone=None, job_position=None, status=None, photo_url=None):  # noqa: E501
        """FuncionariosResumoApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_employee = None
        self._name = None
        self._email = None
        self._telephone = None
        self._job_position = None
        self._status = None
        self._photo_url = None
        self.discriminator = None
        if id_employee is not None:
            self.id_employee = id_employee
        if name is not None:
            self.name = name
        if email is not None:
            self.email = email
        if telephone is not None:
            self.telephone = telephone
        if job_position is not None:
            self.job_position = job_position
        if status is not None:
            self.status = status
        if photo_url is not None:
            self.photo_url = photo_url

    @property
    def id_employee(self):
        """Gets the id_employee of this FuncionariosResumoApiViewModel.  # noqa: E501


        :return: The id_employee of this FuncionariosResumoApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_employee

    @id_employee.setter
    def id_employee(self, id_employee):
        """Sets the id_employee of this FuncionariosResumoApiViewModel.


        :param id_employee: The id_employee of this FuncionariosResumoApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_employee = id_employee

    @property
    def name(self):
        """Gets the name of this FuncionariosResumoApiViewModel.  # noqa: E501


        :return: The name of this FuncionariosResumoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FuncionariosResumoApiViewModel.


        :param name: The name of this FuncionariosResumoApiViewModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this FuncionariosResumoApiViewModel.  # noqa: E501


        :return: The email of this FuncionariosResumoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this FuncionariosResumoApiViewModel.


        :param email: The email of this FuncionariosResumoApiViewModel.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def telephone(self):
        """Gets the telephone of this FuncionariosResumoApiViewModel.  # noqa: E501


        :return: The telephone of this FuncionariosResumoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this FuncionariosResumoApiViewModel.


        :param telephone: The telephone of this FuncionariosResumoApiViewModel.  # noqa: E501
        :type: str
        """

        self._telephone = telephone

    @property
    def job_position(self):
        """Gets the job_position of this FuncionariosResumoApiViewModel.  # noqa: E501


        :return: The job_position of this FuncionariosResumoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._job_position

    @job_position.setter
    def job_position(self, job_position):
        """Sets the job_position of this FuncionariosResumoApiViewModel.


        :param job_position: The job_position of this FuncionariosResumoApiViewModel.  # noqa: E501
        :type: str
        """

        self._job_position = job_position

    @property
    def status(self):
        """Gets the status of this FuncionariosResumoApiViewModel.  # noqa: E501


        :return: The status of this FuncionariosResumoApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FuncionariosResumoApiViewModel.


        :param status: The status of this FuncionariosResumoApiViewModel.  # noqa: E501
        :type: bool
        """

        self._status = status

    @property
    def photo_url(self):
        """Gets the photo_url of this FuncionariosResumoApiViewModel.  # noqa: E501


        :return: The photo_url of this FuncionariosResumoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this FuncionariosResumoApiViewModel.


        :param photo_url: The photo_url of this FuncionariosResumoApiViewModel.  # noqa: E501
        :type: str
        """

        self._photo_url = photo_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FuncionariosResumoApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FuncionariosResumoApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
