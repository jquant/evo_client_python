# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReceivablesCreditDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_credit': 'int',
        'id_cancelation_credit': 'int',
        'id_branch_origin': 'int',
        'ammount': 'float',
        'branch_document': 'str',
        'id_sale_origin': 'int',
        'id_receivable_origin': 'int'
    }

    attribute_map = {
        'id_credit': 'idCredit',
        'id_cancelation_credit': 'idCancelationCredit',
        'id_branch_origin': 'idBranchOrigin',
        'ammount': 'ammount',
        'branch_document': 'branchDocument',
        'id_sale_origin': 'idSaleOrigin',
        'id_receivable_origin': 'idReceivableOrigin'
    }

    def __init__(self, id_credit=None, id_cancelation_credit=None, id_branch_origin=None, ammount=None, branch_document=None, id_sale_origin=None, id_receivable_origin=None):  # noqa: E501
        """ReceivablesCreditDetails - a model defined in Swagger"""  # noqa: E501
        self._id_credit = None
        self._id_cancelation_credit = None
        self._id_branch_origin = None
        self._ammount = None
        self._branch_document = None
        self._id_sale_origin = None
        self._id_receivable_origin = None
        self.discriminator = None
        if id_credit is not None:
            self.id_credit = id_credit
        if id_cancelation_credit is not None:
            self.id_cancelation_credit = id_cancelation_credit
        if id_branch_origin is not None:
            self.id_branch_origin = id_branch_origin
        if ammount is not None:
            self.ammount = ammount
        if branch_document is not None:
            self.branch_document = branch_document
        if id_sale_origin is not None:
            self.id_sale_origin = id_sale_origin
        if id_receivable_origin is not None:
            self.id_receivable_origin = id_receivable_origin

    @property
    def id_credit(self):
        """Gets the id_credit of this ReceivablesCreditDetails.  # noqa: E501


        :return: The id_credit of this ReceivablesCreditDetails.  # noqa: E501
        :rtype: int
        """
        return self._id_credit

    @id_credit.setter
    def id_credit(self, id_credit):
        """Sets the id_credit of this ReceivablesCreditDetails.


        :param id_credit: The id_credit of this ReceivablesCreditDetails.  # noqa: E501
        :type: int
        """

        self._id_credit = id_credit

    @property
    def id_cancelation_credit(self):
        """Gets the id_cancelation_credit of this ReceivablesCreditDetails.  # noqa: E501


        :return: The id_cancelation_credit of this ReceivablesCreditDetails.  # noqa: E501
        :rtype: int
        """
        return self._id_cancelation_credit

    @id_cancelation_credit.setter
    def id_cancelation_credit(self, id_cancelation_credit):
        """Sets the id_cancelation_credit of this ReceivablesCreditDetails.


        :param id_cancelation_credit: The id_cancelation_credit of this ReceivablesCreditDetails.  # noqa: E501
        :type: int
        """

        self._id_cancelation_credit = id_cancelation_credit

    @property
    def id_branch_origin(self):
        """Gets the id_branch_origin of this ReceivablesCreditDetails.  # noqa: E501


        :return: The id_branch_origin of this ReceivablesCreditDetails.  # noqa: E501
        :rtype: int
        """
        return self._id_branch_origin

    @id_branch_origin.setter
    def id_branch_origin(self, id_branch_origin):
        """Sets the id_branch_origin of this ReceivablesCreditDetails.


        :param id_branch_origin: The id_branch_origin of this ReceivablesCreditDetails.  # noqa: E501
        :type: int
        """

        self._id_branch_origin = id_branch_origin

    @property
    def ammount(self):
        """Gets the ammount of this ReceivablesCreditDetails.  # noqa: E501


        :return: The ammount of this ReceivablesCreditDetails.  # noqa: E501
        :rtype: float
        """
        return self._ammount

    @ammount.setter
    def ammount(self, ammount):
        """Sets the ammount of this ReceivablesCreditDetails.


        :param ammount: The ammount of this ReceivablesCreditDetails.  # noqa: E501
        :type: float
        """

        self._ammount = ammount

    @property
    def branch_document(self):
        """Gets the branch_document of this ReceivablesCreditDetails.  # noqa: E501


        :return: The branch_document of this ReceivablesCreditDetails.  # noqa: E501
        :rtype: str
        """
        return self._branch_document

    @branch_document.setter
    def branch_document(self, branch_document):
        """Sets the branch_document of this ReceivablesCreditDetails.


        :param branch_document: The branch_document of this ReceivablesCreditDetails.  # noqa: E501
        :type: str
        """

        self._branch_document = branch_document

    @property
    def id_sale_origin(self):
        """Gets the id_sale_origin of this ReceivablesCreditDetails.  # noqa: E501


        :return: The id_sale_origin of this ReceivablesCreditDetails.  # noqa: E501
        :rtype: int
        """
        return self._id_sale_origin

    @id_sale_origin.setter
    def id_sale_origin(self, id_sale_origin):
        """Sets the id_sale_origin of this ReceivablesCreditDetails.


        :param id_sale_origin: The id_sale_origin of this ReceivablesCreditDetails.  # noqa: E501
        :type: int
        """

        self._id_sale_origin = id_sale_origin

    @property
    def id_receivable_origin(self):
        """Gets the id_receivable_origin of this ReceivablesCreditDetails.  # noqa: E501


        :return: The id_receivable_origin of this ReceivablesCreditDetails.  # noqa: E501
        :rtype: int
        """
        return self._id_receivable_origin

    @id_receivable_origin.setter
    def id_receivable_origin(self, id_receivable_origin):
        """Sets the id_receivable_origin of this ReceivablesCreditDetails.


        :param id_receivable_origin: The id_receivable_origin of this ReceivablesCreditDetails.  # noqa: E501
        :type: int
        """

        self._id_receivable_origin = id_receivable_origin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReceivablesCreditDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReceivablesCreditDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
