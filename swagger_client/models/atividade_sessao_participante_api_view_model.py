# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AtividadeSessaoParticipanteApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_member': 'int',
        'id_employee': 'int',
        'id_prospect': 'int',
        'id': 'int',
        'slot_number': 'int',
        'name': 'str',
        'photo': 'str',
        'justified_absence': 'bool',
        'id_sale_item': 'int',
        'status': 'EStatusAtividadeSessao',
        'exclusive': 'bool',
        'id_branch': 'int',
        'branch_name': 'str',
        'replacement': 'bool',
        'suspended': 'bool',
        'removed': 'bool'
    }

    attribute_map = {
        'id_member': 'idMember',
        'id_employee': 'idEmployee',
        'id_prospect': 'idProspect',
        'id': 'id',
        'slot_number': 'slotNumber',
        'name': 'name',
        'photo': 'photo',
        'justified_absence': 'justifiedAbsence',
        'id_sale_item': 'idSaleItem',
        'status': 'status',
        'exclusive': 'exclusive',
        'id_branch': 'idBranch',
        'branch_name': 'branchName',
        'replacement': 'replacement',
        'suspended': 'suspended',
        'removed': 'removed'
    }

    def __init__(self, id_member=None, id_employee=None, id_prospect=None, id=None, slot_number=None, name=None, photo=None, justified_absence=None, id_sale_item=None, status=None, exclusive=None, id_branch=None, branch_name=None, replacement=None, suspended=None, removed=None):  # noqa: E501
        """AtividadeSessaoParticipanteApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_member = None
        self._id_employee = None
        self._id_prospect = None
        self._id = None
        self._slot_number = None
        self._name = None
        self._photo = None
        self._justified_absence = None
        self._id_sale_item = None
        self._status = None
        self._exclusive = None
        self._id_branch = None
        self._branch_name = None
        self._replacement = None
        self._suspended = None
        self._removed = None
        self.discriminator = None
        if id_member is not None:
            self.id_member = id_member
        if id_employee is not None:
            self.id_employee = id_employee
        if id_prospect is not None:
            self.id_prospect = id_prospect
        if id is not None:
            self.id = id
        if slot_number is not None:
            self.slot_number = slot_number
        if name is not None:
            self.name = name
        if photo is not None:
            self.photo = photo
        if justified_absence is not None:
            self.justified_absence = justified_absence
        if id_sale_item is not None:
            self.id_sale_item = id_sale_item
        if status is not None:
            self.status = status
        if exclusive is not None:
            self.exclusive = exclusive
        if id_branch is not None:
            self.id_branch = id_branch
        if branch_name is not None:
            self.branch_name = branch_name
        if replacement is not None:
            self.replacement = replacement
        if suspended is not None:
            self.suspended = suspended
        if removed is not None:
            self.removed = removed

    @property
    def id_member(self):
        """Gets the id_member of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501


        :return: The id_member of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_member

    @id_member.setter
    def id_member(self, id_member):
        """Sets the id_member of this AtividadeSessaoParticipanteApiViewModel.


        :param id_member: The id_member of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_member = id_member

    @property
    def id_employee(self):
        """Gets the id_employee of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501


        :return: The id_employee of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_employee

    @id_employee.setter
    def id_employee(self, id_employee):
        """Sets the id_employee of this AtividadeSessaoParticipanteApiViewModel.


        :param id_employee: The id_employee of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_employee = id_employee

    @property
    def id_prospect(self):
        """Gets the id_prospect of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501


        :return: The id_prospect of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_prospect

    @id_prospect.setter
    def id_prospect(self, id_prospect):
        """Sets the id_prospect of this AtividadeSessaoParticipanteApiViewModel.


        :param id_prospect: The id_prospect of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_prospect = id_prospect

    @property
    def id(self):
        """Gets the id of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501


        :return: The id of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AtividadeSessaoParticipanteApiViewModel.


        :param id: The id of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def slot_number(self):
        """Gets the slot_number of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501


        :return: The slot_number of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._slot_number

    @slot_number.setter
    def slot_number(self, slot_number):
        """Sets the slot_number of this AtividadeSessaoParticipanteApiViewModel.


        :param slot_number: The slot_number of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :type: int
        """

        self._slot_number = slot_number

    @property
    def name(self):
        """Gets the name of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501


        :return: The name of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AtividadeSessaoParticipanteApiViewModel.


        :param name: The name of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def photo(self):
        """Gets the photo of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501


        :return: The photo of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this AtividadeSessaoParticipanteApiViewModel.


        :param photo: The photo of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :type: str
        """

        self._photo = photo

    @property
    def justified_absence(self):
        """Gets the justified_absence of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501


        :return: The justified_absence of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._justified_absence

    @justified_absence.setter
    def justified_absence(self, justified_absence):
        """Sets the justified_absence of this AtividadeSessaoParticipanteApiViewModel.


        :param justified_absence: The justified_absence of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :type: bool
        """

        self._justified_absence = justified_absence

    @property
    def id_sale_item(self):
        """Gets the id_sale_item of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501


        :return: The id_sale_item of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_sale_item

    @id_sale_item.setter
    def id_sale_item(self, id_sale_item):
        """Sets the id_sale_item of this AtividadeSessaoParticipanteApiViewModel.


        :param id_sale_item: The id_sale_item of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_sale_item = id_sale_item

    @property
    def status(self):
        """Gets the status of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501


        :return: The status of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :rtype: EStatusAtividadeSessao
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AtividadeSessaoParticipanteApiViewModel.


        :param status: The status of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :type: EStatusAtividadeSessao
        """

        self._status = status

    @property
    def exclusive(self):
        """Gets the exclusive of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501


        :return: The exclusive of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._exclusive

    @exclusive.setter
    def exclusive(self, exclusive):
        """Sets the exclusive of this AtividadeSessaoParticipanteApiViewModel.


        :param exclusive: The exclusive of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :type: bool
        """

        self._exclusive = exclusive

    @property
    def id_branch(self):
        """Gets the id_branch of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501


        :return: The id_branch of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_branch

    @id_branch.setter
    def id_branch(self, id_branch):
        """Sets the id_branch of this AtividadeSessaoParticipanteApiViewModel.


        :param id_branch: The id_branch of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_branch = id_branch

    @property
    def branch_name(self):
        """Gets the branch_name of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501


        :return: The branch_name of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """Sets the branch_name of this AtividadeSessaoParticipanteApiViewModel.


        :param branch_name: The branch_name of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :type: str
        """

        self._branch_name = branch_name

    @property
    def replacement(self):
        """Gets the replacement of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501


        :return: The replacement of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._replacement

    @replacement.setter
    def replacement(self, replacement):
        """Sets the replacement of this AtividadeSessaoParticipanteApiViewModel.


        :param replacement: The replacement of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :type: bool
        """

        self._replacement = replacement

    @property
    def suspended(self):
        """Gets the suspended of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501


        :return: The suspended of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._suspended

    @suspended.setter
    def suspended(self, suspended):
        """Sets the suspended of this AtividadeSessaoParticipanteApiViewModel.


        :param suspended: The suspended of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :type: bool
        """

        self._suspended = suspended

    @property
    def removed(self):
        """Gets the removed of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501


        :return: The removed of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._removed

    @removed.setter
    def removed(self, removed):
        """Sets the removed of this AtividadeSessaoParticipanteApiViewModel.


        :param removed: The removed of this AtividadeSessaoParticipanteApiViewModel.  # noqa: E501
        :type: bool
        """

        self._removed = removed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AtividadeSessaoParticipanteApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AtividadeSessaoParticipanteApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
