# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SalesItemsViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name_sale_page': 'str',
        'order': 'int',
        'id_employee_commission': 'int',
        'id_branch': 'int',
        'id_sale_item': 'int',
        'checkout_url': 'str',
        'not_inaugurated': 'bool',
        'itens': 'list[SalesItemViewModel]'
    }

    attribute_map = {
        'name_sale_page': 'nameSalePage',
        'order': 'order',
        'id_employee_commission': 'idEmployeeCommission',
        'id_branch': 'idBranch',
        'id_sale_item': 'idSaleItem',
        'checkout_url': 'checkoutUrl',
        'not_inaugurated': 'notInaugurated',
        'itens': 'itens'
    }

    def __init__(self, name_sale_page=None, order=None, id_employee_commission=None, id_branch=None, id_sale_item=None, checkout_url=None, not_inaugurated=None, itens=None):  # noqa: E501
        """SalesItemsViewModel - a model defined in Swagger"""  # noqa: E501
        self._name_sale_page = None
        self._order = None
        self._id_employee_commission = None
        self._id_branch = None
        self._id_sale_item = None
        self._checkout_url = None
        self._not_inaugurated = None
        self._itens = None
        self.discriminator = None
        if name_sale_page is not None:
            self.name_sale_page = name_sale_page
        if order is not None:
            self.order = order
        if id_employee_commission is not None:
            self.id_employee_commission = id_employee_commission
        if id_branch is not None:
            self.id_branch = id_branch
        if id_sale_item is not None:
            self.id_sale_item = id_sale_item
        if checkout_url is not None:
            self.checkout_url = checkout_url
        if not_inaugurated is not None:
            self.not_inaugurated = not_inaugurated
        if itens is not None:
            self.itens = itens

    @property
    def name_sale_page(self):
        """Gets the name_sale_page of this SalesItemsViewModel.  # noqa: E501


        :return: The name_sale_page of this SalesItemsViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name_sale_page

    @name_sale_page.setter
    def name_sale_page(self, name_sale_page):
        """Sets the name_sale_page of this SalesItemsViewModel.


        :param name_sale_page: The name_sale_page of this SalesItemsViewModel.  # noqa: E501
        :type: str
        """

        self._name_sale_page = name_sale_page

    @property
    def order(self):
        """Gets the order of this SalesItemsViewModel.  # noqa: E501


        :return: The order of this SalesItemsViewModel.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this SalesItemsViewModel.


        :param order: The order of this SalesItemsViewModel.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def id_employee_commission(self):
        """Gets the id_employee_commission of this SalesItemsViewModel.  # noqa: E501


        :return: The id_employee_commission of this SalesItemsViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_employee_commission

    @id_employee_commission.setter
    def id_employee_commission(self, id_employee_commission):
        """Sets the id_employee_commission of this SalesItemsViewModel.


        :param id_employee_commission: The id_employee_commission of this SalesItemsViewModel.  # noqa: E501
        :type: int
        """

        self._id_employee_commission = id_employee_commission

    @property
    def id_branch(self):
        """Gets the id_branch of this SalesItemsViewModel.  # noqa: E501


        :return: The id_branch of this SalesItemsViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_branch

    @id_branch.setter
    def id_branch(self, id_branch):
        """Sets the id_branch of this SalesItemsViewModel.


        :param id_branch: The id_branch of this SalesItemsViewModel.  # noqa: E501
        :type: int
        """

        self._id_branch = id_branch

    @property
    def id_sale_item(self):
        """Gets the id_sale_item of this SalesItemsViewModel.  # noqa: E501


        :return: The id_sale_item of this SalesItemsViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_sale_item

    @id_sale_item.setter
    def id_sale_item(self, id_sale_item):
        """Sets the id_sale_item of this SalesItemsViewModel.


        :param id_sale_item: The id_sale_item of this SalesItemsViewModel.  # noqa: E501
        :type: int
        """

        self._id_sale_item = id_sale_item

    @property
    def checkout_url(self):
        """Gets the checkout_url of this SalesItemsViewModel.  # noqa: E501


        :return: The checkout_url of this SalesItemsViewModel.  # noqa: E501
        :rtype: str
        """
        return self._checkout_url

    @checkout_url.setter
    def checkout_url(self, checkout_url):
        """Sets the checkout_url of this SalesItemsViewModel.


        :param checkout_url: The checkout_url of this SalesItemsViewModel.  # noqa: E501
        :type: str
        """

        self._checkout_url = checkout_url

    @property
    def not_inaugurated(self):
        """Gets the not_inaugurated of this SalesItemsViewModel.  # noqa: E501


        :return: The not_inaugurated of this SalesItemsViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._not_inaugurated

    @not_inaugurated.setter
    def not_inaugurated(self, not_inaugurated):
        """Sets the not_inaugurated of this SalesItemsViewModel.


        :param not_inaugurated: The not_inaugurated of this SalesItemsViewModel.  # noqa: E501
        :type: bool
        """

        self._not_inaugurated = not_inaugurated

    @property
    def itens(self):
        """Gets the itens of this SalesItemsViewModel.  # noqa: E501


        :return: The itens of this SalesItemsViewModel.  # noqa: E501
        :rtype: list[SalesItemViewModel]
        """
        return self._itens

    @itens.setter
    def itens(self, itens):
        """Sets the itens of this SalesItemsViewModel.


        :param itens: The itens of this SalesItemsViewModel.  # noqa: E501
        :type: list[SalesItemViewModel]
        """

        self._itens = itens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalesItemsViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalesItemsViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
