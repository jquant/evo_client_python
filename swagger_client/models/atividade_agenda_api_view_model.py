# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AtividadeAgendaApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_configuration': 'int',
        'id_activity': 'int',
        'id_group_activity': 'int',
        'name': 'str',
        'description': 'str',
        'image_url': 'str',
        'area': 'str',
        'id_area': 'int',
        'capacity': 'int',
        'ocupation': 'int',
        'allow_choosing_spot': 'bool',
        'start_time': 'str',
        'end_time': 'str',
        'booking_start_time': 'str',
        'booking_end_time': 'str',
        'instructor': 'str',
        'instructor_photo': 'str',
        'activity_date': 'datetime',
        'audience': 'str',
        'id_audience': 'int',
        'code': 'str',
        'confirmed': 'bool',
        'start_hour_tick': 'int',
        'end_hour_tick': 'int',
        'spots': 'list[AtividadeLugarReservaApiViewModel]',
        'periodization': 'list[PeriodizacaoApiViewModel]',
        'status': 'EStatusAtividade',
        'status_name': 'str'
    }

    attribute_map = {
        'id_configuration': 'idConfiguration',
        'id_activity': 'idActivity',
        'id_group_activity': 'idGroupActivity',
        'name': 'name',
        'description': 'description',
        'image_url': 'imageUrl',
        'area': 'area',
        'id_area': 'idArea',
        'capacity': 'capacity',
        'ocupation': 'ocupation',
        'allow_choosing_spot': 'allowChoosingSpot',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'booking_start_time': 'bookingStartTime',
        'booking_end_time': 'bookingEndTime',
        'instructor': 'instructor',
        'instructor_photo': 'instructorPhoto',
        'activity_date': 'activityDate',
        'audience': 'audience',
        'id_audience': 'idAudience',
        'code': 'code',
        'confirmed': 'confirmed',
        'start_hour_tick': 'startHourTick',
        'end_hour_tick': 'endHourTick',
        'spots': 'spots',
        'periodization': 'periodization',
        'status': 'status',
        'status_name': 'statusName'
    }

    def __init__(self, id_configuration=None, id_activity=None, id_group_activity=None, name=None, description=None, image_url=None, area=None, id_area=None, capacity=None, ocupation=None, allow_choosing_spot=None, start_time=None, end_time=None, booking_start_time=None, booking_end_time=None, instructor=None, instructor_photo=None, activity_date=None, audience=None, id_audience=None, code=None, confirmed=None, start_hour_tick=None, end_hour_tick=None, spots=None, periodization=None, status=None, status_name=None):  # noqa: E501
        """AtividadeAgendaApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_configuration = None
        self._id_activity = None
        self._id_group_activity = None
        self._name = None
        self._description = None
        self._image_url = None
        self._area = None
        self._id_area = None
        self._capacity = None
        self._ocupation = None
        self._allow_choosing_spot = None
        self._start_time = None
        self._end_time = None
        self._booking_start_time = None
        self._booking_end_time = None
        self._instructor = None
        self._instructor_photo = None
        self._activity_date = None
        self._audience = None
        self._id_audience = None
        self._code = None
        self._confirmed = None
        self._start_hour_tick = None
        self._end_hour_tick = None
        self._spots = None
        self._periodization = None
        self._status = None
        self._status_name = None
        self.discriminator = None
        if id_configuration is not None:
            self.id_configuration = id_configuration
        if id_activity is not None:
            self.id_activity = id_activity
        if id_group_activity is not None:
            self.id_group_activity = id_group_activity
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if image_url is not None:
            self.image_url = image_url
        if area is not None:
            self.area = area
        if id_area is not None:
            self.id_area = id_area
        if capacity is not None:
            self.capacity = capacity
        if ocupation is not None:
            self.ocupation = ocupation
        if allow_choosing_spot is not None:
            self.allow_choosing_spot = allow_choosing_spot
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if booking_start_time is not None:
            self.booking_start_time = booking_start_time
        if booking_end_time is not None:
            self.booking_end_time = booking_end_time
        if instructor is not None:
            self.instructor = instructor
        if instructor_photo is not None:
            self.instructor_photo = instructor_photo
        if activity_date is not None:
            self.activity_date = activity_date
        if audience is not None:
            self.audience = audience
        if id_audience is not None:
            self.id_audience = id_audience
        if code is not None:
            self.code = code
        if confirmed is not None:
            self.confirmed = confirmed
        if start_hour_tick is not None:
            self.start_hour_tick = start_hour_tick
        if end_hour_tick is not None:
            self.end_hour_tick = end_hour_tick
        if spots is not None:
            self.spots = spots
        if periodization is not None:
            self.periodization = periodization
        if status is not None:
            self.status = status
        if status_name is not None:
            self.status_name = status_name

    @property
    def id_configuration(self):
        """Gets the id_configuration of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The id_configuration of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_configuration

    @id_configuration.setter
    def id_configuration(self, id_configuration):
        """Sets the id_configuration of this AtividadeAgendaApiViewModel.


        :param id_configuration: The id_configuration of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_configuration = id_configuration

    @property
    def id_activity(self):
        """Gets the id_activity of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The id_activity of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_activity

    @id_activity.setter
    def id_activity(self, id_activity):
        """Sets the id_activity of this AtividadeAgendaApiViewModel.


        :param id_activity: The id_activity of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_activity = id_activity

    @property
    def id_group_activity(self):
        """Gets the id_group_activity of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The id_group_activity of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_group_activity

    @id_group_activity.setter
    def id_group_activity(self, id_group_activity):
        """Sets the id_group_activity of this AtividadeAgendaApiViewModel.


        :param id_group_activity: The id_group_activity of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_group_activity = id_group_activity

    @property
    def name(self):
        """Gets the name of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The name of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AtividadeAgendaApiViewModel.


        :param name: The name of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The description of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AtividadeAgendaApiViewModel.


        :param description: The description of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def image_url(self):
        """Gets the image_url of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The image_url of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this AtividadeAgendaApiViewModel.


        :param image_url: The image_url of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def area(self):
        """Gets the area of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The area of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this AtividadeAgendaApiViewModel.


        :param area: The area of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: str
        """

        self._area = area

    @property
    def id_area(self):
        """Gets the id_area of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The id_area of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_area

    @id_area.setter
    def id_area(self, id_area):
        """Sets the id_area of this AtividadeAgendaApiViewModel.


        :param id_area: The id_area of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_area = id_area

    @property
    def capacity(self):
        """Gets the capacity of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The capacity of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this AtividadeAgendaApiViewModel.


        :param capacity: The capacity of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: int
        """

        self._capacity = capacity

    @property
    def ocupation(self):
        """Gets the ocupation of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The ocupation of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._ocupation

    @ocupation.setter
    def ocupation(self, ocupation):
        """Sets the ocupation of this AtividadeAgendaApiViewModel.


        :param ocupation: The ocupation of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: int
        """

        self._ocupation = ocupation

    @property
    def allow_choosing_spot(self):
        """Gets the allow_choosing_spot of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The allow_choosing_spot of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._allow_choosing_spot

    @allow_choosing_spot.setter
    def allow_choosing_spot(self, allow_choosing_spot):
        """Sets the allow_choosing_spot of this AtividadeAgendaApiViewModel.


        :param allow_choosing_spot: The allow_choosing_spot of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: bool
        """

        self._allow_choosing_spot = allow_choosing_spot

    @property
    def start_time(self):
        """Gets the start_time of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The start_time of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this AtividadeAgendaApiViewModel.


        :param start_time: The start_time of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The end_time of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this AtividadeAgendaApiViewModel.


        :param end_time: The end_time of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def booking_start_time(self):
        """Gets the booking_start_time of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The booking_start_time of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._booking_start_time

    @booking_start_time.setter
    def booking_start_time(self, booking_start_time):
        """Sets the booking_start_time of this AtividadeAgendaApiViewModel.


        :param booking_start_time: The booking_start_time of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: str
        """

        self._booking_start_time = booking_start_time

    @property
    def booking_end_time(self):
        """Gets the booking_end_time of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The booking_end_time of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._booking_end_time

    @booking_end_time.setter
    def booking_end_time(self, booking_end_time):
        """Sets the booking_end_time of this AtividadeAgendaApiViewModel.


        :param booking_end_time: The booking_end_time of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: str
        """

        self._booking_end_time = booking_end_time

    @property
    def instructor(self):
        """Gets the instructor of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The instructor of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._instructor

    @instructor.setter
    def instructor(self, instructor):
        """Sets the instructor of this AtividadeAgendaApiViewModel.


        :param instructor: The instructor of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: str
        """

        self._instructor = instructor

    @property
    def instructor_photo(self):
        """Gets the instructor_photo of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The instructor_photo of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._instructor_photo

    @instructor_photo.setter
    def instructor_photo(self, instructor_photo):
        """Sets the instructor_photo of this AtividadeAgendaApiViewModel.


        :param instructor_photo: The instructor_photo of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: str
        """

        self._instructor_photo = instructor_photo

    @property
    def activity_date(self):
        """Gets the activity_date of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The activity_date of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._activity_date

    @activity_date.setter
    def activity_date(self, activity_date):
        """Sets the activity_date of this AtividadeAgendaApiViewModel.


        :param activity_date: The activity_date of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._activity_date = activity_date

    @property
    def audience(self):
        """Gets the audience of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The audience of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this AtividadeAgendaApiViewModel.


        :param audience: The audience of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: str
        """

        self._audience = audience

    @property
    def id_audience(self):
        """Gets the id_audience of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The id_audience of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_audience

    @id_audience.setter
    def id_audience(self, id_audience):
        """Sets the id_audience of this AtividadeAgendaApiViewModel.


        :param id_audience: The id_audience of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_audience = id_audience

    @property
    def code(self):
        """Gets the code of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The code of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AtividadeAgendaApiViewModel.


        :param code: The code of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def confirmed(self):
        """Gets the confirmed of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The confirmed of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this AtividadeAgendaApiViewModel.


        :param confirmed: The confirmed of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: bool
        """

        self._confirmed = confirmed

    @property
    def start_hour_tick(self):
        """Gets the start_hour_tick of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The start_hour_tick of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._start_hour_tick

    @start_hour_tick.setter
    def start_hour_tick(self, start_hour_tick):
        """Sets the start_hour_tick of this AtividadeAgendaApiViewModel.


        :param start_hour_tick: The start_hour_tick of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: int
        """

        self._start_hour_tick = start_hour_tick

    @property
    def end_hour_tick(self):
        """Gets the end_hour_tick of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The end_hour_tick of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._end_hour_tick

    @end_hour_tick.setter
    def end_hour_tick(self, end_hour_tick):
        """Sets the end_hour_tick of this AtividadeAgendaApiViewModel.


        :param end_hour_tick: The end_hour_tick of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: int
        """

        self._end_hour_tick = end_hour_tick

    @property
    def spots(self):
        """Gets the spots of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The spots of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: list[AtividadeLugarReservaApiViewModel]
        """
        return self._spots

    @spots.setter
    def spots(self, spots):
        """Sets the spots of this AtividadeAgendaApiViewModel.


        :param spots: The spots of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: list[AtividadeLugarReservaApiViewModel]
        """

        self._spots = spots

    @property
    def periodization(self):
        """Gets the periodization of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The periodization of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: list[PeriodizacaoApiViewModel]
        """
        return self._periodization

    @periodization.setter
    def periodization(self, periodization):
        """Sets the periodization of this AtividadeAgendaApiViewModel.


        :param periodization: The periodization of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: list[PeriodizacaoApiViewModel]
        """

        self._periodization = periodization

    @property
    def status(self):
        """Gets the status of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The status of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: EStatusAtividade
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AtividadeAgendaApiViewModel.


        :param status: The status of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: EStatusAtividade
        """

        self._status = status

    @property
    def status_name(self):
        """Gets the status_name of this AtividadeAgendaApiViewModel.  # noqa: E501


        :return: The status_name of this AtividadeAgendaApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._status_name

    @status_name.setter
    def status_name(self, status_name):
        """Sets the status_name of this AtividadeAgendaApiViewModel.


        :param status_name: The status_name of this AtividadeAgendaApiViewModel.  # noqa: E501
        :type: str
        """

        self._status_name = status_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AtividadeAgendaApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AtividadeAgendaApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
