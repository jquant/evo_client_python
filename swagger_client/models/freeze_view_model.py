# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FreezeViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_suspend': 'datetime',
        'end_suspend': 'datetime',
        'unlock_date': 'datetime',
        'id_employee': 'int',
        'reason': 'str',
        'fl_use_membership_freeze_days': 'bool',
        'days_freeze': 'int',
        'id_freeze': 'int'
    }

    attribute_map = {
        'start_suspend': 'startSuspend',
        'end_suspend': 'endSuspend',
        'unlock_date': 'unlockDate',
        'id_employee': 'idEmployee',
        'reason': 'reason',
        'fl_use_membership_freeze_days': 'flUseMembershipFreezeDays',
        'days_freeze': 'daysFreeze',
        'id_freeze': 'idFreeze'
    }

    def __init__(self, start_suspend=None, end_suspend=None, unlock_date=None, id_employee=None, reason=None, fl_use_membership_freeze_days=None, days_freeze=None, id_freeze=None):  # noqa: E501
        """FreezeViewModel - a model defined in Swagger"""  # noqa: E501
        self._start_suspend = None
        self._end_suspend = None
        self._unlock_date = None
        self._id_employee = None
        self._reason = None
        self._fl_use_membership_freeze_days = None
        self._days_freeze = None
        self._id_freeze = None
        self.discriminator = None
        if start_suspend is not None:
            self.start_suspend = start_suspend
        if end_suspend is not None:
            self.end_suspend = end_suspend
        if unlock_date is not None:
            self.unlock_date = unlock_date
        if id_employee is not None:
            self.id_employee = id_employee
        if reason is not None:
            self.reason = reason
        if fl_use_membership_freeze_days is not None:
            self.fl_use_membership_freeze_days = fl_use_membership_freeze_days
        if days_freeze is not None:
            self.days_freeze = days_freeze
        if id_freeze is not None:
            self.id_freeze = id_freeze

    @property
    def start_suspend(self):
        """Gets the start_suspend of this FreezeViewModel.  # noqa: E501


        :return: The start_suspend of this FreezeViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start_suspend

    @start_suspend.setter
    def start_suspend(self, start_suspend):
        """Sets the start_suspend of this FreezeViewModel.


        :param start_suspend: The start_suspend of this FreezeViewModel.  # noqa: E501
        :type: datetime
        """

        self._start_suspend = start_suspend

    @property
    def end_suspend(self):
        """Gets the end_suspend of this FreezeViewModel.  # noqa: E501


        :return: The end_suspend of this FreezeViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._end_suspend

    @end_suspend.setter
    def end_suspend(self, end_suspend):
        """Sets the end_suspend of this FreezeViewModel.


        :param end_suspend: The end_suspend of this FreezeViewModel.  # noqa: E501
        :type: datetime
        """

        self._end_suspend = end_suspend

    @property
    def unlock_date(self):
        """Gets the unlock_date of this FreezeViewModel.  # noqa: E501


        :return: The unlock_date of this FreezeViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._unlock_date

    @unlock_date.setter
    def unlock_date(self, unlock_date):
        """Sets the unlock_date of this FreezeViewModel.


        :param unlock_date: The unlock_date of this FreezeViewModel.  # noqa: E501
        :type: datetime
        """

        self._unlock_date = unlock_date

    @property
    def id_employee(self):
        """Gets the id_employee of this FreezeViewModel.  # noqa: E501


        :return: The id_employee of this FreezeViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_employee

    @id_employee.setter
    def id_employee(self, id_employee):
        """Sets the id_employee of this FreezeViewModel.


        :param id_employee: The id_employee of this FreezeViewModel.  # noqa: E501
        :type: int
        """

        self._id_employee = id_employee

    @property
    def reason(self):
        """Gets the reason of this FreezeViewModel.  # noqa: E501


        :return: The reason of this FreezeViewModel.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this FreezeViewModel.


        :param reason: The reason of this FreezeViewModel.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def fl_use_membership_freeze_days(self):
        """Gets the fl_use_membership_freeze_days of this FreezeViewModel.  # noqa: E501


        :return: The fl_use_membership_freeze_days of this FreezeViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_use_membership_freeze_days

    @fl_use_membership_freeze_days.setter
    def fl_use_membership_freeze_days(self, fl_use_membership_freeze_days):
        """Sets the fl_use_membership_freeze_days of this FreezeViewModel.


        :param fl_use_membership_freeze_days: The fl_use_membership_freeze_days of this FreezeViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_use_membership_freeze_days = fl_use_membership_freeze_days

    @property
    def days_freeze(self):
        """Gets the days_freeze of this FreezeViewModel.  # noqa: E501


        :return: The days_freeze of this FreezeViewModel.  # noqa: E501
        :rtype: int
        """
        return self._days_freeze

    @days_freeze.setter
    def days_freeze(self, days_freeze):
        """Sets the days_freeze of this FreezeViewModel.


        :param days_freeze: The days_freeze of this FreezeViewModel.  # noqa: E501
        :type: int
        """

        self._days_freeze = days_freeze

    @property
    def id_freeze(self):
        """Gets the id_freeze of this FreezeViewModel.  # noqa: E501


        :return: The id_freeze of this FreezeViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_freeze

    @id_freeze.setter
    def id_freeze(self, id_freeze):
        """Sets the id_freeze of this FreezeViewModel.


        :param id_freeze: The id_freeze of this FreezeViewModel.  # noqa: E501
        :type: int
        """

        self._id_freeze = id_freeze

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FreezeViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FreezeViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
