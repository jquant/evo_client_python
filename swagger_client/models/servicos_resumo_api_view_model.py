# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServicosResumoApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_service': 'int',
        'id_branch': 'int',
        'name_service': 'str',
        'value': 'float',
        'allow_entries': 'bool',
        'experimental_class': 'bool',
        'max_amount_installments': 'int',
        'url_sale': 'str',
        'inactive': 'bool',
        'online_sales_observations': 'str'
    }

    attribute_map = {
        'id_service': 'idService',
        'id_branch': 'idBranch',
        'name_service': 'nameService',
        'value': 'value',
        'allow_entries': 'allowEntries',
        'experimental_class': 'experimentalClass',
        'max_amount_installments': 'maxAmountInstallments',
        'url_sale': 'urlSale',
        'inactive': 'inactive',
        'online_sales_observations': 'onlineSalesObservations'
    }

    def __init__(self, id_service=None, id_branch=None, name_service=None, value=None, allow_entries=None, experimental_class=None, max_amount_installments=None, url_sale=None, inactive=None, online_sales_observations=None):  # noqa: E501
        """ServicosResumoApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_service = None
        self._id_branch = None
        self._name_service = None
        self._value = None
        self._allow_entries = None
        self._experimental_class = None
        self._max_amount_installments = None
        self._url_sale = None
        self._inactive = None
        self._online_sales_observations = None
        self.discriminator = None
        if id_service is not None:
            self.id_service = id_service
        if id_branch is not None:
            self.id_branch = id_branch
        if name_service is not None:
            self.name_service = name_service
        if value is not None:
            self.value = value
        if allow_entries is not None:
            self.allow_entries = allow_entries
        if experimental_class is not None:
            self.experimental_class = experimental_class
        if max_amount_installments is not None:
            self.max_amount_installments = max_amount_installments
        if url_sale is not None:
            self.url_sale = url_sale
        if inactive is not None:
            self.inactive = inactive
        if online_sales_observations is not None:
            self.online_sales_observations = online_sales_observations

    @property
    def id_service(self):
        """Gets the id_service of this ServicosResumoApiViewModel.  # noqa: E501


        :return: The id_service of this ServicosResumoApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_service

    @id_service.setter
    def id_service(self, id_service):
        """Sets the id_service of this ServicosResumoApiViewModel.


        :param id_service: The id_service of this ServicosResumoApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_service = id_service

    @property
    def id_branch(self):
        """Gets the id_branch of this ServicosResumoApiViewModel.  # noqa: E501


        :return: The id_branch of this ServicosResumoApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_branch

    @id_branch.setter
    def id_branch(self, id_branch):
        """Sets the id_branch of this ServicosResumoApiViewModel.


        :param id_branch: The id_branch of this ServicosResumoApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_branch = id_branch

    @property
    def name_service(self):
        """Gets the name_service of this ServicosResumoApiViewModel.  # noqa: E501


        :return: The name_service of this ServicosResumoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name_service

    @name_service.setter
    def name_service(self, name_service):
        """Sets the name_service of this ServicosResumoApiViewModel.


        :param name_service: The name_service of this ServicosResumoApiViewModel.  # noqa: E501
        :type: str
        """

        self._name_service = name_service

    @property
    def value(self):
        """Gets the value of this ServicosResumoApiViewModel.  # noqa: E501


        :return: The value of this ServicosResumoApiViewModel.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ServicosResumoApiViewModel.


        :param value: The value of this ServicosResumoApiViewModel.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def allow_entries(self):
        """Gets the allow_entries of this ServicosResumoApiViewModel.  # noqa: E501


        :return: The allow_entries of this ServicosResumoApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._allow_entries

    @allow_entries.setter
    def allow_entries(self, allow_entries):
        """Sets the allow_entries of this ServicosResumoApiViewModel.


        :param allow_entries: The allow_entries of this ServicosResumoApiViewModel.  # noqa: E501
        :type: bool
        """

        self._allow_entries = allow_entries

    @property
    def experimental_class(self):
        """Gets the experimental_class of this ServicosResumoApiViewModel.  # noqa: E501


        :return: The experimental_class of this ServicosResumoApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._experimental_class

    @experimental_class.setter
    def experimental_class(self, experimental_class):
        """Sets the experimental_class of this ServicosResumoApiViewModel.


        :param experimental_class: The experimental_class of this ServicosResumoApiViewModel.  # noqa: E501
        :type: bool
        """

        self._experimental_class = experimental_class

    @property
    def max_amount_installments(self):
        """Gets the max_amount_installments of this ServicosResumoApiViewModel.  # noqa: E501


        :return: The max_amount_installments of this ServicosResumoApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._max_amount_installments

    @max_amount_installments.setter
    def max_amount_installments(self, max_amount_installments):
        """Sets the max_amount_installments of this ServicosResumoApiViewModel.


        :param max_amount_installments: The max_amount_installments of this ServicosResumoApiViewModel.  # noqa: E501
        :type: int
        """

        self._max_amount_installments = max_amount_installments

    @property
    def url_sale(self):
        """Gets the url_sale of this ServicosResumoApiViewModel.  # noqa: E501


        :return: The url_sale of this ServicosResumoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._url_sale

    @url_sale.setter
    def url_sale(self, url_sale):
        """Sets the url_sale of this ServicosResumoApiViewModel.


        :param url_sale: The url_sale of this ServicosResumoApiViewModel.  # noqa: E501
        :type: str
        """

        self._url_sale = url_sale

    @property
    def inactive(self):
        """Gets the inactive of this ServicosResumoApiViewModel.  # noqa: E501


        :return: The inactive of this ServicosResumoApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """Sets the inactive of this ServicosResumoApiViewModel.


        :param inactive: The inactive of this ServicosResumoApiViewModel.  # noqa: E501
        :type: bool
        """

        self._inactive = inactive

    @property
    def online_sales_observations(self):
        """Gets the online_sales_observations of this ServicosResumoApiViewModel.  # noqa: E501


        :return: The online_sales_observations of this ServicosResumoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._online_sales_observations

    @online_sales_observations.setter
    def online_sales_observations(self, online_sales_observations):
        """Sets the online_sales_observations of this ServicosResumoApiViewModel.


        :param online_sales_observations: The online_sales_observations of this ServicosResumoApiViewModel.  # noqa: E501
        :type: str
        """

        self._online_sales_observations = online_sales_observations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServicosResumoApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicosResumoApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
