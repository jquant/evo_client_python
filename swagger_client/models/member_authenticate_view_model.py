# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MemberAuthenticateViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_member': 'int',
        'id_branch': 'int',
        'id_enterprise': 'int',
        'name': 'str',
        'dns': 'str',
        'success_authenticate': 'bool',
        'url_reset_password': 'str',
        'url_member_area': 'str'
    }

    attribute_map = {
        'id_member': 'idMember',
        'id_branch': 'idBranch',
        'id_enterprise': 'idEnterprise',
        'name': 'name',
        'dns': 'dns',
        'success_authenticate': 'successAuthenticate',
        'url_reset_password': 'urlResetPassword',
        'url_member_area': 'urlMemberArea'
    }

    def __init__(self, id_member=None, id_branch=None, id_enterprise=None, name=None, dns=None, success_authenticate=None, url_reset_password=None, url_member_area=None):  # noqa: E501
        """MemberAuthenticateViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_member = None
        self._id_branch = None
        self._id_enterprise = None
        self._name = None
        self._dns = None
        self._success_authenticate = None
        self._url_reset_password = None
        self._url_member_area = None
        self.discriminator = None
        if id_member is not None:
            self.id_member = id_member
        if id_branch is not None:
            self.id_branch = id_branch
        if id_enterprise is not None:
            self.id_enterprise = id_enterprise
        if name is not None:
            self.name = name
        if dns is not None:
            self.dns = dns
        if success_authenticate is not None:
            self.success_authenticate = success_authenticate
        if url_reset_password is not None:
            self.url_reset_password = url_reset_password
        if url_member_area is not None:
            self.url_member_area = url_member_area

    @property
    def id_member(self):
        """Gets the id_member of this MemberAuthenticateViewModel.  # noqa: E501


        :return: The id_member of this MemberAuthenticateViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_member

    @id_member.setter
    def id_member(self, id_member):
        """Sets the id_member of this MemberAuthenticateViewModel.


        :param id_member: The id_member of this MemberAuthenticateViewModel.  # noqa: E501
        :type: int
        """

        self._id_member = id_member

    @property
    def id_branch(self):
        """Gets the id_branch of this MemberAuthenticateViewModel.  # noqa: E501


        :return: The id_branch of this MemberAuthenticateViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_branch

    @id_branch.setter
    def id_branch(self, id_branch):
        """Sets the id_branch of this MemberAuthenticateViewModel.


        :param id_branch: The id_branch of this MemberAuthenticateViewModel.  # noqa: E501
        :type: int
        """

        self._id_branch = id_branch

    @property
    def id_enterprise(self):
        """Gets the id_enterprise of this MemberAuthenticateViewModel.  # noqa: E501


        :return: The id_enterprise of this MemberAuthenticateViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_enterprise

    @id_enterprise.setter
    def id_enterprise(self, id_enterprise):
        """Sets the id_enterprise of this MemberAuthenticateViewModel.


        :param id_enterprise: The id_enterprise of this MemberAuthenticateViewModel.  # noqa: E501
        :type: int
        """

        self._id_enterprise = id_enterprise

    @property
    def name(self):
        """Gets the name of this MemberAuthenticateViewModel.  # noqa: E501


        :return: The name of this MemberAuthenticateViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MemberAuthenticateViewModel.


        :param name: The name of this MemberAuthenticateViewModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def dns(self):
        """Gets the dns of this MemberAuthenticateViewModel.  # noqa: E501


        :return: The dns of this MemberAuthenticateViewModel.  # noqa: E501
        :rtype: str
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this MemberAuthenticateViewModel.


        :param dns: The dns of this MemberAuthenticateViewModel.  # noqa: E501
        :type: str
        """

        self._dns = dns

    @property
    def success_authenticate(self):
        """Gets the success_authenticate of this MemberAuthenticateViewModel.  # noqa: E501


        :return: The success_authenticate of this MemberAuthenticateViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._success_authenticate

    @success_authenticate.setter
    def success_authenticate(self, success_authenticate):
        """Sets the success_authenticate of this MemberAuthenticateViewModel.


        :param success_authenticate: The success_authenticate of this MemberAuthenticateViewModel.  # noqa: E501
        :type: bool
        """

        self._success_authenticate = success_authenticate

    @property
    def url_reset_password(self):
        """Gets the url_reset_password of this MemberAuthenticateViewModel.  # noqa: E501


        :return: The url_reset_password of this MemberAuthenticateViewModel.  # noqa: E501
        :rtype: str
        """
        return self._url_reset_password

    @url_reset_password.setter
    def url_reset_password(self, url_reset_password):
        """Sets the url_reset_password of this MemberAuthenticateViewModel.


        :param url_reset_password: The url_reset_password of this MemberAuthenticateViewModel.  # noqa: E501
        :type: str
        """

        self._url_reset_password = url_reset_password

    @property
    def url_member_area(self):
        """Gets the url_member_area of this MemberAuthenticateViewModel.  # noqa: E501


        :return: The url_member_area of this MemberAuthenticateViewModel.  # noqa: E501
        :rtype: str
        """
        return self._url_member_area

    @url_member_area.setter
    def url_member_area(self, url_member_area):
        """Sets the url_member_area of this MemberAuthenticateViewModel.


        :param url_member_area: The url_member_area of this MemberAuthenticateViewModel.  # noqa: E501
        :type: str
        """

        self._url_member_area = url_member_area

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemberAuthenticateViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberAuthenticateViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
