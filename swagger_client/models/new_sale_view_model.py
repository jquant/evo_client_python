# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewSaleViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_branch': 'int',
        'id_branch_token': 'str',
        'id_membership': 'int',
        'id_service': 'int',
        'service_value': 'float',
        'member_data': 'MemberNewSaleViewModel',
        'card_data': 'CardDataViewModel',
        'id_prospect': 'int',
        'id_prospect_token': 'str',
        'id_member': 'int',
        'id_member_token': 'str',
        'voucher': 'str',
        'id_card_member': 'int',
        'id_member_card_token': 'str',
        'type_payment': 'str',
        'total_installments': 'int',
        'payment': 'EFormaPagamentoTotem',
        'session_id': 'str'
    }

    attribute_map = {
        'id_branch': 'idBranch',
        'id_branch_token': 'idBranchToken',
        'id_membership': 'idMembership',
        'id_service': 'idService',
        'service_value': 'serviceValue',
        'member_data': 'memberData',
        'card_data': 'cardData',
        'id_prospect': 'idProspect',
        'id_prospect_token': 'idProspectToken',
        'id_member': 'idMember',
        'id_member_token': 'idMemberToken',
        'voucher': 'voucher',
        'id_card_member': 'idCardMember',
        'id_member_card_token': 'idMemberCardToken',
        'type_payment': 'typePayment',
        'total_installments': 'totalInstallments',
        'payment': 'payment',
        'session_id': 'sessionId'
    }

    def __init__(self, id_branch=None, id_branch_token=None, id_membership=None, id_service=None, service_value=None, member_data=None, card_data=None, id_prospect=None, id_prospect_token=None, id_member=None, id_member_token=None, voucher=None, id_card_member=None, id_member_card_token=None, type_payment=None, total_installments=None, payment=None, session_id=None):  # noqa: E501
        """NewSaleViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_branch = None
        self._id_branch_token = None
        self._id_membership = None
        self._id_service = None
        self._service_value = None
        self._member_data = None
        self._card_data = None
        self._id_prospect = None
        self._id_prospect_token = None
        self._id_member = None
        self._id_member_token = None
        self._voucher = None
        self._id_card_member = None
        self._id_member_card_token = None
        self._type_payment = None
        self._total_installments = None
        self._payment = None
        self._session_id = None
        self.discriminator = None
        if id_branch is not None:
            self.id_branch = id_branch
        if id_branch_token is not None:
            self.id_branch_token = id_branch_token
        if id_membership is not None:
            self.id_membership = id_membership
        if id_service is not None:
            self.id_service = id_service
        if service_value is not None:
            self.service_value = service_value
        if member_data is not None:
            self.member_data = member_data
        if card_data is not None:
            self.card_data = card_data
        if id_prospect is not None:
            self.id_prospect = id_prospect
        if id_prospect_token is not None:
            self.id_prospect_token = id_prospect_token
        if id_member is not None:
            self.id_member = id_member
        if id_member_token is not None:
            self.id_member_token = id_member_token
        if voucher is not None:
            self.voucher = voucher
        if id_card_member is not None:
            self.id_card_member = id_card_member
        if id_member_card_token is not None:
            self.id_member_card_token = id_member_card_token
        if type_payment is not None:
            self.type_payment = type_payment
        if total_installments is not None:
            self.total_installments = total_installments
        if payment is not None:
            self.payment = payment
        if session_id is not None:
            self.session_id = session_id

    @property
    def id_branch(self):
        """Gets the id_branch of this NewSaleViewModel.  # noqa: E501


        :return: The id_branch of this NewSaleViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_branch

    @id_branch.setter
    def id_branch(self, id_branch):
        """Sets the id_branch of this NewSaleViewModel.


        :param id_branch: The id_branch of this NewSaleViewModel.  # noqa: E501
        :type: int
        """

        self._id_branch = id_branch

    @property
    def id_branch_token(self):
        """Gets the id_branch_token of this NewSaleViewModel.  # noqa: E501


        :return: The id_branch_token of this NewSaleViewModel.  # noqa: E501
        :rtype: str
        """
        return self._id_branch_token

    @id_branch_token.setter
    def id_branch_token(self, id_branch_token):
        """Sets the id_branch_token of this NewSaleViewModel.


        :param id_branch_token: The id_branch_token of this NewSaleViewModel.  # noqa: E501
        :type: str
        """

        self._id_branch_token = id_branch_token

    @property
    def id_membership(self):
        """Gets the id_membership of this NewSaleViewModel.  # noqa: E501


        :return: The id_membership of this NewSaleViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_membership

    @id_membership.setter
    def id_membership(self, id_membership):
        """Sets the id_membership of this NewSaleViewModel.


        :param id_membership: The id_membership of this NewSaleViewModel.  # noqa: E501
        :type: int
        """

        self._id_membership = id_membership

    @property
    def id_service(self):
        """Gets the id_service of this NewSaleViewModel.  # noqa: E501


        :return: The id_service of this NewSaleViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_service

    @id_service.setter
    def id_service(self, id_service):
        """Sets the id_service of this NewSaleViewModel.


        :param id_service: The id_service of this NewSaleViewModel.  # noqa: E501
        :type: int
        """

        self._id_service = id_service

    @property
    def service_value(self):
        """Gets the service_value of this NewSaleViewModel.  # noqa: E501


        :return: The service_value of this NewSaleViewModel.  # noqa: E501
        :rtype: float
        """
        return self._service_value

    @service_value.setter
    def service_value(self, service_value):
        """Sets the service_value of this NewSaleViewModel.


        :param service_value: The service_value of this NewSaleViewModel.  # noqa: E501
        :type: float
        """

        self._service_value = service_value

    @property
    def member_data(self):
        """Gets the member_data of this NewSaleViewModel.  # noqa: E501


        :return: The member_data of this NewSaleViewModel.  # noqa: E501
        :rtype: MemberNewSaleViewModel
        """
        return self._member_data

    @member_data.setter
    def member_data(self, member_data):
        """Sets the member_data of this NewSaleViewModel.


        :param member_data: The member_data of this NewSaleViewModel.  # noqa: E501
        :type: MemberNewSaleViewModel
        """

        self._member_data = member_data

    @property
    def card_data(self):
        """Gets the card_data of this NewSaleViewModel.  # noqa: E501


        :return: The card_data of this NewSaleViewModel.  # noqa: E501
        :rtype: CardDataViewModel
        """
        return self._card_data

    @card_data.setter
    def card_data(self, card_data):
        """Sets the card_data of this NewSaleViewModel.


        :param card_data: The card_data of this NewSaleViewModel.  # noqa: E501
        :type: CardDataViewModel
        """

        self._card_data = card_data

    @property
    def id_prospect(self):
        """Gets the id_prospect of this NewSaleViewModel.  # noqa: E501


        :return: The id_prospect of this NewSaleViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_prospect

    @id_prospect.setter
    def id_prospect(self, id_prospect):
        """Sets the id_prospect of this NewSaleViewModel.


        :param id_prospect: The id_prospect of this NewSaleViewModel.  # noqa: E501
        :type: int
        """

        self._id_prospect = id_prospect

    @property
    def id_prospect_token(self):
        """Gets the id_prospect_token of this NewSaleViewModel.  # noqa: E501


        :return: The id_prospect_token of this NewSaleViewModel.  # noqa: E501
        :rtype: str
        """
        return self._id_prospect_token

    @id_prospect_token.setter
    def id_prospect_token(self, id_prospect_token):
        """Sets the id_prospect_token of this NewSaleViewModel.


        :param id_prospect_token: The id_prospect_token of this NewSaleViewModel.  # noqa: E501
        :type: str
        """

        self._id_prospect_token = id_prospect_token

    @property
    def id_member(self):
        """Gets the id_member of this NewSaleViewModel.  # noqa: E501


        :return: The id_member of this NewSaleViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_member

    @id_member.setter
    def id_member(self, id_member):
        """Sets the id_member of this NewSaleViewModel.


        :param id_member: The id_member of this NewSaleViewModel.  # noqa: E501
        :type: int
        """

        self._id_member = id_member

    @property
    def id_member_token(self):
        """Gets the id_member_token of this NewSaleViewModel.  # noqa: E501


        :return: The id_member_token of this NewSaleViewModel.  # noqa: E501
        :rtype: str
        """
        return self._id_member_token

    @id_member_token.setter
    def id_member_token(self, id_member_token):
        """Sets the id_member_token of this NewSaleViewModel.


        :param id_member_token: The id_member_token of this NewSaleViewModel.  # noqa: E501
        :type: str
        """

        self._id_member_token = id_member_token

    @property
    def voucher(self):
        """Gets the voucher of this NewSaleViewModel.  # noqa: E501


        :return: The voucher of this NewSaleViewModel.  # noqa: E501
        :rtype: str
        """
        return self._voucher

    @voucher.setter
    def voucher(self, voucher):
        """Sets the voucher of this NewSaleViewModel.


        :param voucher: The voucher of this NewSaleViewModel.  # noqa: E501
        :type: str
        """

        self._voucher = voucher

    @property
    def id_card_member(self):
        """Gets the id_card_member of this NewSaleViewModel.  # noqa: E501


        :return: The id_card_member of this NewSaleViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_card_member

    @id_card_member.setter
    def id_card_member(self, id_card_member):
        """Sets the id_card_member of this NewSaleViewModel.


        :param id_card_member: The id_card_member of this NewSaleViewModel.  # noqa: E501
        :type: int
        """

        self._id_card_member = id_card_member

    @property
    def id_member_card_token(self):
        """Gets the id_member_card_token of this NewSaleViewModel.  # noqa: E501


        :return: The id_member_card_token of this NewSaleViewModel.  # noqa: E501
        :rtype: str
        """
        return self._id_member_card_token

    @id_member_card_token.setter
    def id_member_card_token(self, id_member_card_token):
        """Sets the id_member_card_token of this NewSaleViewModel.


        :param id_member_card_token: The id_member_card_token of this NewSaleViewModel.  # noqa: E501
        :type: str
        """

        self._id_member_card_token = id_member_card_token

    @property
    def type_payment(self):
        """Gets the type_payment of this NewSaleViewModel.  # noqa: E501


        :return: The type_payment of this NewSaleViewModel.  # noqa: E501
        :rtype: str
        """
        return self._type_payment

    @type_payment.setter
    def type_payment(self, type_payment):
        """Sets the type_payment of this NewSaleViewModel.


        :param type_payment: The type_payment of this NewSaleViewModel.  # noqa: E501
        :type: str
        """

        self._type_payment = type_payment

    @property
    def total_installments(self):
        """Gets the total_installments of this NewSaleViewModel.  # noqa: E501


        :return: The total_installments of this NewSaleViewModel.  # noqa: E501
        :rtype: int
        """
        return self._total_installments

    @total_installments.setter
    def total_installments(self, total_installments):
        """Sets the total_installments of this NewSaleViewModel.


        :param total_installments: The total_installments of this NewSaleViewModel.  # noqa: E501
        :type: int
        """

        self._total_installments = total_installments

    @property
    def payment(self):
        """Gets the payment of this NewSaleViewModel.  # noqa: E501


        :return: The payment of this NewSaleViewModel.  # noqa: E501
        :rtype: EFormaPagamentoTotem
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this NewSaleViewModel.


        :param payment: The payment of this NewSaleViewModel.  # noqa: E501
        :type: EFormaPagamentoTotem
        """

        self._payment = payment

    @property
    def session_id(self):
        """Gets the session_id of this NewSaleViewModel.  # noqa: E501


        :return: The session_id of this NewSaleViewModel.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this NewSaleViewModel.


        :param session_id: The session_id of this NewSaleViewModel.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewSaleViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewSaleViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
