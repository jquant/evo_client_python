# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CostCenterApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_cost_center': 'int',
        'description': 'str',
        'id_cost_center_father': 'int',
        'active': 'bool',
        'id_dre_group': 'int',
        'level': 'int'
    }

    attribute_map = {
        'id_cost_center': 'idCostCenter',
        'description': 'description',
        'id_cost_center_father': 'idCostCenterFather',
        'active': 'active',
        'id_dre_group': 'idDreGroup',
        'level': 'level'
    }

    def __init__(self, id_cost_center=None, description=None, id_cost_center_father=None, active=None, id_dre_group=None, level=None):  # noqa: E501
        """CostCenterApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_cost_center = None
        self._description = None
        self._id_cost_center_father = None
        self._active = None
        self._id_dre_group = None
        self._level = None
        self.discriminator = None
        if id_cost_center is not None:
            self.id_cost_center = id_cost_center
        if description is not None:
            self.description = description
        if id_cost_center_father is not None:
            self.id_cost_center_father = id_cost_center_father
        if active is not None:
            self.active = active
        if id_dre_group is not None:
            self.id_dre_group = id_dre_group
        if level is not None:
            self.level = level

    @property
    def id_cost_center(self):
        """Gets the id_cost_center of this CostCenterApiViewModel.  # noqa: E501


        :return: The id_cost_center of this CostCenterApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_cost_center

    @id_cost_center.setter
    def id_cost_center(self, id_cost_center):
        """Sets the id_cost_center of this CostCenterApiViewModel.


        :param id_cost_center: The id_cost_center of this CostCenterApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_cost_center = id_cost_center

    @property
    def description(self):
        """Gets the description of this CostCenterApiViewModel.  # noqa: E501


        :return: The description of this CostCenterApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CostCenterApiViewModel.


        :param description: The description of this CostCenterApiViewModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id_cost_center_father(self):
        """Gets the id_cost_center_father of this CostCenterApiViewModel.  # noqa: E501


        :return: The id_cost_center_father of this CostCenterApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_cost_center_father

    @id_cost_center_father.setter
    def id_cost_center_father(self, id_cost_center_father):
        """Sets the id_cost_center_father of this CostCenterApiViewModel.


        :param id_cost_center_father: The id_cost_center_father of this CostCenterApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_cost_center_father = id_cost_center_father

    @property
    def active(self):
        """Gets the active of this CostCenterApiViewModel.  # noqa: E501


        :return: The active of this CostCenterApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CostCenterApiViewModel.


        :param active: The active of this CostCenterApiViewModel.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def id_dre_group(self):
        """Gets the id_dre_group of this CostCenterApiViewModel.  # noqa: E501


        :return: The id_dre_group of this CostCenterApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_dre_group

    @id_dre_group.setter
    def id_dre_group(self, id_dre_group):
        """Sets the id_dre_group of this CostCenterApiViewModel.


        :param id_dre_group: The id_dre_group of this CostCenterApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_dre_group = id_dre_group

    @property
    def level(self):
        """Gets the level of this CostCenterApiViewModel.  # noqa: E501


        :return: The level of this CostCenterApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this CostCenterApiViewModel.


        :param level: The level of this CostCenterApiViewModel.  # noqa: E501
        :type: int
        """

        self._level = level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CostCenterApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CostCenterApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
