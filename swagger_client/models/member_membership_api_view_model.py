# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MemberMembershipApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_member': 'int',
        'id_membership': 'int',
        'id_member_membership': 'int',
        'id_member_membership_renewed': 'int',
        'num_members': 'int',
        'fl_renewed': 'bool',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'name': 'str',
        'cancel_date': 'datetime',
        'membership_status': 'str',
        'value_next_month': 'float',
        'next_charge': 'datetime',
        'id_sale': 'int',
        'sale_date': 'datetime',
        'contract_printing': 'str',
        'freezes': 'list[FreezeViewModel]',
        'id_category_membership': 'int',
        'number_suspension_times': 'int',
        'max_suspension_days': 'int',
        'minimum_suspension_days': 'int',
        'disponible_suspension_days': 'int',
        'disponible_suspension_times': 'int',
        'days_left_to_freeze': 'int',
        'loyalty_end_date': 'datetime',
        'assessment_end_date': 'datetime',
        'acceptance_date': 'datetime',
        'fl_allow_locker': 'bool',
        'fl_additional_membership': 'bool',
        'bioimpedance_amount': 'int',
        'signed_terms': 'bool',
        'original_value': 'float',
        'limitless': 'bool',
        'weekly_limit': 'int',
        'concluded_sessions': 'int',
        'pending_sessions': 'int',
        'scheduled_sessions': 'int',
        'pending_repositions': 'int',
        'repositions_total': 'int',
        'bonus_sessions': 'int',
        'sessions': 'list[BonusSessionViewModel]'
    }

    attribute_map = {
        'id_member': 'idMember',
        'id_membership': 'idMembership',
        'id_member_membership': 'idMemberMembership',
        'id_member_membership_renewed': 'idMemberMembershipRenewed',
        'num_members': 'numMembers',
        'fl_renewed': 'flRenewed',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'name': 'name',
        'cancel_date': 'cancelDate',
        'membership_status': 'membershipStatus',
        'value_next_month': 'valueNextMonth',
        'next_charge': 'nextCharge',
        'id_sale': 'idSale',
        'sale_date': 'saleDate',
        'contract_printing': 'contractPrinting',
        'freezes': 'freezes',
        'id_category_membership': 'idCategoryMembership',
        'number_suspension_times': 'numberSuspensionTimes',
        'max_suspension_days': 'maxSuspensionDays',
        'minimum_suspension_days': 'minimumSuspensionDays',
        'disponible_suspension_days': 'disponibleSuspensionDays',
        'disponible_suspension_times': 'disponibleSuspensionTimes',
        'days_left_to_freeze': 'daysLeftToFreeze',
        'loyalty_end_date': 'loyaltyEndDate',
        'assessment_end_date': 'assessmentEndDate',
        'acceptance_date': 'acceptanceDate',
        'fl_allow_locker': 'flAllowLocker',
        'fl_additional_membership': 'flAdditionalMembership',
        'bioimpedance_amount': 'bioimpedanceAmount',
        'signed_terms': 'signedTerms',
        'original_value': 'originalValue',
        'limitless': 'limitless',
        'weekly_limit': 'weeklyLimit',
        'concluded_sessions': 'concludedSessions',
        'pending_sessions': 'pendingSessions',
        'scheduled_sessions': 'scheduledSessions',
        'pending_repositions': 'pendingRepositions',
        'repositions_total': 'repositionsTotal',
        'bonus_sessions': 'bonusSessions',
        'sessions': 'sessions'
    }

    def __init__(self, id_member=None, id_membership=None, id_member_membership=None, id_member_membership_renewed=None, num_members=None, fl_renewed=None, start_date=None, end_date=None, name=None, cancel_date=None, membership_status=None, value_next_month=None, next_charge=None, id_sale=None, sale_date=None, contract_printing=None, freezes=None, id_category_membership=None, number_suspension_times=None, max_suspension_days=None, minimum_suspension_days=None, disponible_suspension_days=None, disponible_suspension_times=None, days_left_to_freeze=None, loyalty_end_date=None, assessment_end_date=None, acceptance_date=None, fl_allow_locker=None, fl_additional_membership=None, bioimpedance_amount=None, signed_terms=None, original_value=None, limitless=None, weekly_limit=None, concluded_sessions=None, pending_sessions=None, scheduled_sessions=None, pending_repositions=None, repositions_total=None, bonus_sessions=None, sessions=None):  # noqa: E501
        """MemberMembershipApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_member = None
        self._id_membership = None
        self._id_member_membership = None
        self._id_member_membership_renewed = None
        self._num_members = None
        self._fl_renewed = None
        self._start_date = None
        self._end_date = None
        self._name = None
        self._cancel_date = None
        self._membership_status = None
        self._value_next_month = None
        self._next_charge = None
        self._id_sale = None
        self._sale_date = None
        self._contract_printing = None
        self._freezes = None
        self._id_category_membership = None
        self._number_suspension_times = None
        self._max_suspension_days = None
        self._minimum_suspension_days = None
        self._disponible_suspension_days = None
        self._disponible_suspension_times = None
        self._days_left_to_freeze = None
        self._loyalty_end_date = None
        self._assessment_end_date = None
        self._acceptance_date = None
        self._fl_allow_locker = None
        self._fl_additional_membership = None
        self._bioimpedance_amount = None
        self._signed_terms = None
        self._original_value = None
        self._limitless = None
        self._weekly_limit = None
        self._concluded_sessions = None
        self._pending_sessions = None
        self._scheduled_sessions = None
        self._pending_repositions = None
        self._repositions_total = None
        self._bonus_sessions = None
        self._sessions = None
        self.discriminator = None
        if id_member is not None:
            self.id_member = id_member
        if id_membership is not None:
            self.id_membership = id_membership
        if id_member_membership is not None:
            self.id_member_membership = id_member_membership
        if id_member_membership_renewed is not None:
            self.id_member_membership_renewed = id_member_membership_renewed
        if num_members is not None:
            self.num_members = num_members
        if fl_renewed is not None:
            self.fl_renewed = fl_renewed
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if name is not None:
            self.name = name
        if cancel_date is not None:
            self.cancel_date = cancel_date
        if membership_status is not None:
            self.membership_status = membership_status
        if value_next_month is not None:
            self.value_next_month = value_next_month
        if next_charge is not None:
            self.next_charge = next_charge
        if id_sale is not None:
            self.id_sale = id_sale
        if sale_date is not None:
            self.sale_date = sale_date
        if contract_printing is not None:
            self.contract_printing = contract_printing
        if freezes is not None:
            self.freezes = freezes
        if id_category_membership is not None:
            self.id_category_membership = id_category_membership
        if number_suspension_times is not None:
            self.number_suspension_times = number_suspension_times
        if max_suspension_days is not None:
            self.max_suspension_days = max_suspension_days
        if minimum_suspension_days is not None:
            self.minimum_suspension_days = minimum_suspension_days
        if disponible_suspension_days is not None:
            self.disponible_suspension_days = disponible_suspension_days
        if disponible_suspension_times is not None:
            self.disponible_suspension_times = disponible_suspension_times
        if days_left_to_freeze is not None:
            self.days_left_to_freeze = days_left_to_freeze
        if loyalty_end_date is not None:
            self.loyalty_end_date = loyalty_end_date
        if assessment_end_date is not None:
            self.assessment_end_date = assessment_end_date
        if acceptance_date is not None:
            self.acceptance_date = acceptance_date
        if fl_allow_locker is not None:
            self.fl_allow_locker = fl_allow_locker
        if fl_additional_membership is not None:
            self.fl_additional_membership = fl_additional_membership
        if bioimpedance_amount is not None:
            self.bioimpedance_amount = bioimpedance_amount
        if signed_terms is not None:
            self.signed_terms = signed_terms
        if original_value is not None:
            self.original_value = original_value
        if limitless is not None:
            self.limitless = limitless
        if weekly_limit is not None:
            self.weekly_limit = weekly_limit
        if concluded_sessions is not None:
            self.concluded_sessions = concluded_sessions
        if pending_sessions is not None:
            self.pending_sessions = pending_sessions
        if scheduled_sessions is not None:
            self.scheduled_sessions = scheduled_sessions
        if pending_repositions is not None:
            self.pending_repositions = pending_repositions
        if repositions_total is not None:
            self.repositions_total = repositions_total
        if bonus_sessions is not None:
            self.bonus_sessions = bonus_sessions
        if sessions is not None:
            self.sessions = sessions

    @property
    def id_member(self):
        """Gets the id_member of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The id_member of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_member

    @id_member.setter
    def id_member(self, id_member):
        """Sets the id_member of this MemberMembershipApiViewModel.


        :param id_member: The id_member of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_member = id_member

    @property
    def id_membership(self):
        """Gets the id_membership of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The id_membership of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_membership

    @id_membership.setter
    def id_membership(self, id_membership):
        """Sets the id_membership of this MemberMembershipApiViewModel.


        :param id_membership: The id_membership of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_membership = id_membership

    @property
    def id_member_membership(self):
        """Gets the id_member_membership of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The id_member_membership of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_member_membership

    @id_member_membership.setter
    def id_member_membership(self, id_member_membership):
        """Sets the id_member_membership of this MemberMembershipApiViewModel.


        :param id_member_membership: The id_member_membership of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_member_membership = id_member_membership

    @property
    def id_member_membership_renewed(self):
        """Gets the id_member_membership_renewed of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The id_member_membership_renewed of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_member_membership_renewed

    @id_member_membership_renewed.setter
    def id_member_membership_renewed(self, id_member_membership_renewed):
        """Sets the id_member_membership_renewed of this MemberMembershipApiViewModel.


        :param id_member_membership_renewed: The id_member_membership_renewed of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_member_membership_renewed = id_member_membership_renewed

    @property
    def num_members(self):
        """Gets the num_members of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The num_members of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._num_members

    @num_members.setter
    def num_members(self, num_members):
        """Sets the num_members of this MemberMembershipApiViewModel.


        :param num_members: The num_members of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._num_members = num_members

    @property
    def fl_renewed(self):
        """Gets the fl_renewed of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The fl_renewed of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_renewed

    @fl_renewed.setter
    def fl_renewed(self, fl_renewed):
        """Sets the fl_renewed of this MemberMembershipApiViewModel.


        :param fl_renewed: The fl_renewed of this MemberMembershipApiViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_renewed = fl_renewed

    @property
    def start_date(self):
        """Gets the start_date of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The start_date of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this MemberMembershipApiViewModel.


        :param start_date: The start_date of this MemberMembershipApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The end_date of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this MemberMembershipApiViewModel.


        :param end_date: The end_date of this MemberMembershipApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def name(self):
        """Gets the name of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The name of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MemberMembershipApiViewModel.


        :param name: The name of this MemberMembershipApiViewModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def cancel_date(self):
        """Gets the cancel_date of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The cancel_date of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._cancel_date

    @cancel_date.setter
    def cancel_date(self, cancel_date):
        """Sets the cancel_date of this MemberMembershipApiViewModel.


        :param cancel_date: The cancel_date of this MemberMembershipApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._cancel_date = cancel_date

    @property
    def membership_status(self):
        """Gets the membership_status of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The membership_status of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._membership_status

    @membership_status.setter
    def membership_status(self, membership_status):
        """Sets the membership_status of this MemberMembershipApiViewModel.


        :param membership_status: The membership_status of this MemberMembershipApiViewModel.  # noqa: E501
        :type: str
        """

        self._membership_status = membership_status

    @property
    def value_next_month(self):
        """Gets the value_next_month of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The value_next_month of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: float
        """
        return self._value_next_month

    @value_next_month.setter
    def value_next_month(self, value_next_month):
        """Sets the value_next_month of this MemberMembershipApiViewModel.


        :param value_next_month: The value_next_month of this MemberMembershipApiViewModel.  # noqa: E501
        :type: float
        """

        self._value_next_month = value_next_month

    @property
    def next_charge(self):
        """Gets the next_charge of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The next_charge of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._next_charge

    @next_charge.setter
    def next_charge(self, next_charge):
        """Sets the next_charge of this MemberMembershipApiViewModel.


        :param next_charge: The next_charge of this MemberMembershipApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._next_charge = next_charge

    @property
    def id_sale(self):
        """Gets the id_sale of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The id_sale of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_sale

    @id_sale.setter
    def id_sale(self, id_sale):
        """Sets the id_sale of this MemberMembershipApiViewModel.


        :param id_sale: The id_sale of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_sale = id_sale

    @property
    def sale_date(self):
        """Gets the sale_date of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The sale_date of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._sale_date

    @sale_date.setter
    def sale_date(self, sale_date):
        """Sets the sale_date of this MemberMembershipApiViewModel.


        :param sale_date: The sale_date of this MemberMembershipApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._sale_date = sale_date

    @property
    def contract_printing(self):
        """Gets the contract_printing of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The contract_printing of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._contract_printing

    @contract_printing.setter
    def contract_printing(self, contract_printing):
        """Sets the contract_printing of this MemberMembershipApiViewModel.


        :param contract_printing: The contract_printing of this MemberMembershipApiViewModel.  # noqa: E501
        :type: str
        """

        self._contract_printing = contract_printing

    @property
    def freezes(self):
        """Gets the freezes of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The freezes of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: list[FreezeViewModel]
        """
        return self._freezes

    @freezes.setter
    def freezes(self, freezes):
        """Sets the freezes of this MemberMembershipApiViewModel.


        :param freezes: The freezes of this MemberMembershipApiViewModel.  # noqa: E501
        :type: list[FreezeViewModel]
        """

        self._freezes = freezes

    @property
    def id_category_membership(self):
        """Gets the id_category_membership of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The id_category_membership of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_category_membership

    @id_category_membership.setter
    def id_category_membership(self, id_category_membership):
        """Sets the id_category_membership of this MemberMembershipApiViewModel.


        :param id_category_membership: The id_category_membership of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_category_membership = id_category_membership

    @property
    def number_suspension_times(self):
        """Gets the number_suspension_times of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The number_suspension_times of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._number_suspension_times

    @number_suspension_times.setter
    def number_suspension_times(self, number_suspension_times):
        """Sets the number_suspension_times of this MemberMembershipApiViewModel.


        :param number_suspension_times: The number_suspension_times of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._number_suspension_times = number_suspension_times

    @property
    def max_suspension_days(self):
        """Gets the max_suspension_days of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The max_suspension_days of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._max_suspension_days

    @max_suspension_days.setter
    def max_suspension_days(self, max_suspension_days):
        """Sets the max_suspension_days of this MemberMembershipApiViewModel.


        :param max_suspension_days: The max_suspension_days of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._max_suspension_days = max_suspension_days

    @property
    def minimum_suspension_days(self):
        """Gets the minimum_suspension_days of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The minimum_suspension_days of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._minimum_suspension_days

    @minimum_suspension_days.setter
    def minimum_suspension_days(self, minimum_suspension_days):
        """Sets the minimum_suspension_days of this MemberMembershipApiViewModel.


        :param minimum_suspension_days: The minimum_suspension_days of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._minimum_suspension_days = minimum_suspension_days

    @property
    def disponible_suspension_days(self):
        """Gets the disponible_suspension_days of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The disponible_suspension_days of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._disponible_suspension_days

    @disponible_suspension_days.setter
    def disponible_suspension_days(self, disponible_suspension_days):
        """Sets the disponible_suspension_days of this MemberMembershipApiViewModel.


        :param disponible_suspension_days: The disponible_suspension_days of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._disponible_suspension_days = disponible_suspension_days

    @property
    def disponible_suspension_times(self):
        """Gets the disponible_suspension_times of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The disponible_suspension_times of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._disponible_suspension_times

    @disponible_suspension_times.setter
    def disponible_suspension_times(self, disponible_suspension_times):
        """Sets the disponible_suspension_times of this MemberMembershipApiViewModel.


        :param disponible_suspension_times: The disponible_suspension_times of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._disponible_suspension_times = disponible_suspension_times

    @property
    def days_left_to_freeze(self):
        """Gets the days_left_to_freeze of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The days_left_to_freeze of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._days_left_to_freeze

    @days_left_to_freeze.setter
    def days_left_to_freeze(self, days_left_to_freeze):
        """Sets the days_left_to_freeze of this MemberMembershipApiViewModel.


        :param days_left_to_freeze: The days_left_to_freeze of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._days_left_to_freeze = days_left_to_freeze

    @property
    def loyalty_end_date(self):
        """Gets the loyalty_end_date of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The loyalty_end_date of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._loyalty_end_date

    @loyalty_end_date.setter
    def loyalty_end_date(self, loyalty_end_date):
        """Sets the loyalty_end_date of this MemberMembershipApiViewModel.


        :param loyalty_end_date: The loyalty_end_date of this MemberMembershipApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._loyalty_end_date = loyalty_end_date

    @property
    def assessment_end_date(self):
        """Gets the assessment_end_date of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The assessment_end_date of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._assessment_end_date

    @assessment_end_date.setter
    def assessment_end_date(self, assessment_end_date):
        """Sets the assessment_end_date of this MemberMembershipApiViewModel.


        :param assessment_end_date: The assessment_end_date of this MemberMembershipApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._assessment_end_date = assessment_end_date

    @property
    def acceptance_date(self):
        """Gets the acceptance_date of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The acceptance_date of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._acceptance_date

    @acceptance_date.setter
    def acceptance_date(self, acceptance_date):
        """Sets the acceptance_date of this MemberMembershipApiViewModel.


        :param acceptance_date: The acceptance_date of this MemberMembershipApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._acceptance_date = acceptance_date

    @property
    def fl_allow_locker(self):
        """Gets the fl_allow_locker of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The fl_allow_locker of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_allow_locker

    @fl_allow_locker.setter
    def fl_allow_locker(self, fl_allow_locker):
        """Sets the fl_allow_locker of this MemberMembershipApiViewModel.


        :param fl_allow_locker: The fl_allow_locker of this MemberMembershipApiViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_allow_locker = fl_allow_locker

    @property
    def fl_additional_membership(self):
        """Gets the fl_additional_membership of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The fl_additional_membership of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_additional_membership

    @fl_additional_membership.setter
    def fl_additional_membership(self, fl_additional_membership):
        """Sets the fl_additional_membership of this MemberMembershipApiViewModel.


        :param fl_additional_membership: The fl_additional_membership of this MemberMembershipApiViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_additional_membership = fl_additional_membership

    @property
    def bioimpedance_amount(self):
        """Gets the bioimpedance_amount of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The bioimpedance_amount of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._bioimpedance_amount

    @bioimpedance_amount.setter
    def bioimpedance_amount(self, bioimpedance_amount):
        """Sets the bioimpedance_amount of this MemberMembershipApiViewModel.


        :param bioimpedance_amount: The bioimpedance_amount of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._bioimpedance_amount = bioimpedance_amount

    @property
    def signed_terms(self):
        """Gets the signed_terms of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The signed_terms of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._signed_terms

    @signed_terms.setter
    def signed_terms(self, signed_terms):
        """Sets the signed_terms of this MemberMembershipApiViewModel.


        :param signed_terms: The signed_terms of this MemberMembershipApiViewModel.  # noqa: E501
        :type: bool
        """

        self._signed_terms = signed_terms

    @property
    def original_value(self):
        """Gets the original_value of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The original_value of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: float
        """
        return self._original_value

    @original_value.setter
    def original_value(self, original_value):
        """Sets the original_value of this MemberMembershipApiViewModel.


        :param original_value: The original_value of this MemberMembershipApiViewModel.  # noqa: E501
        :type: float
        """

        self._original_value = original_value

    @property
    def limitless(self):
        """Gets the limitless of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The limitless of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._limitless

    @limitless.setter
    def limitless(self, limitless):
        """Sets the limitless of this MemberMembershipApiViewModel.


        :param limitless: The limitless of this MemberMembershipApiViewModel.  # noqa: E501
        :type: bool
        """

        self._limitless = limitless

    @property
    def weekly_limit(self):
        """Gets the weekly_limit of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The weekly_limit of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._weekly_limit

    @weekly_limit.setter
    def weekly_limit(self, weekly_limit):
        """Sets the weekly_limit of this MemberMembershipApiViewModel.


        :param weekly_limit: The weekly_limit of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._weekly_limit = weekly_limit

    @property
    def concluded_sessions(self):
        """Gets the concluded_sessions of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The concluded_sessions of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._concluded_sessions

    @concluded_sessions.setter
    def concluded_sessions(self, concluded_sessions):
        """Sets the concluded_sessions of this MemberMembershipApiViewModel.


        :param concluded_sessions: The concluded_sessions of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._concluded_sessions = concluded_sessions

    @property
    def pending_sessions(self):
        """Gets the pending_sessions of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The pending_sessions of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._pending_sessions

    @pending_sessions.setter
    def pending_sessions(self, pending_sessions):
        """Sets the pending_sessions of this MemberMembershipApiViewModel.


        :param pending_sessions: The pending_sessions of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._pending_sessions = pending_sessions

    @property
    def scheduled_sessions(self):
        """Gets the scheduled_sessions of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The scheduled_sessions of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._scheduled_sessions

    @scheduled_sessions.setter
    def scheduled_sessions(self, scheduled_sessions):
        """Sets the scheduled_sessions of this MemberMembershipApiViewModel.


        :param scheduled_sessions: The scheduled_sessions of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._scheduled_sessions = scheduled_sessions

    @property
    def pending_repositions(self):
        """Gets the pending_repositions of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The pending_repositions of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._pending_repositions

    @pending_repositions.setter
    def pending_repositions(self, pending_repositions):
        """Sets the pending_repositions of this MemberMembershipApiViewModel.


        :param pending_repositions: The pending_repositions of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._pending_repositions = pending_repositions

    @property
    def repositions_total(self):
        """Gets the repositions_total of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The repositions_total of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._repositions_total

    @repositions_total.setter
    def repositions_total(self, repositions_total):
        """Sets the repositions_total of this MemberMembershipApiViewModel.


        :param repositions_total: The repositions_total of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._repositions_total = repositions_total

    @property
    def bonus_sessions(self):
        """Gets the bonus_sessions of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The bonus_sessions of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._bonus_sessions

    @bonus_sessions.setter
    def bonus_sessions(self, bonus_sessions):
        """Sets the bonus_sessions of this MemberMembershipApiViewModel.


        :param bonus_sessions: The bonus_sessions of this MemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._bonus_sessions = bonus_sessions

    @property
    def sessions(self):
        """Gets the sessions of this MemberMembershipApiViewModel.  # noqa: E501


        :return: The sessions of this MemberMembershipApiViewModel.  # noqa: E501
        :rtype: list[BonusSessionViewModel]
        """
        return self._sessions

    @sessions.setter
    def sessions(self, sessions):
        """Sets the sessions of this MemberMembershipApiViewModel.


        :param sessions: The sessions of this MemberMembershipApiViewModel.  # noqa: E501
        :type: list[BonusSessionViewModel]
        """

        self._sessions = sessions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemberMembershipApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberMembershipApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
