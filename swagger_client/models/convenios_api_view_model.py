# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConveniosApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_partnership': 'int',
        'description': 'str',
        'is_blocked_flag': 'bool',
        'is_inactive_flag': 'bool',
        'company': 'EmpresasConveniosApiViewModel',
        'is_recurring_discount_flag': 'bool',
        'discount': 'float',
        'discount_type': 'float',
        'advanced_discount': 'int'
    }

    attribute_map = {
        'id_partnership': 'idPartnership',
        'description': 'description',
        'is_blocked_flag': 'isBlockedFlag',
        'is_inactive_flag': 'isInactiveFlag',
        'company': 'company',
        'is_recurring_discount_flag': 'isRecurringDiscountFlag',
        'discount': 'discount',
        'discount_type': 'discountType',
        'advanced_discount': 'advancedDiscount'
    }

    def __init__(self, id_partnership=None, description=None, is_blocked_flag=None, is_inactive_flag=None, company=None, is_recurring_discount_flag=None, discount=None, discount_type=None, advanced_discount=None):  # noqa: E501
        """ConveniosApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_partnership = None
        self._description = None
        self._is_blocked_flag = None
        self._is_inactive_flag = None
        self._company = None
        self._is_recurring_discount_flag = None
        self._discount = None
        self._discount_type = None
        self._advanced_discount = None
        self.discriminator = None
        if id_partnership is not None:
            self.id_partnership = id_partnership
        if description is not None:
            self.description = description
        if is_blocked_flag is not None:
            self.is_blocked_flag = is_blocked_flag
        if is_inactive_flag is not None:
            self.is_inactive_flag = is_inactive_flag
        if company is not None:
            self.company = company
        if is_recurring_discount_flag is not None:
            self.is_recurring_discount_flag = is_recurring_discount_flag
        if discount is not None:
            self.discount = discount
        if discount_type is not None:
            self.discount_type = discount_type
        if advanced_discount is not None:
            self.advanced_discount = advanced_discount

    @property
    def id_partnership(self):
        """Gets the id_partnership of this ConveniosApiViewModel.  # noqa: E501


        :return: The id_partnership of this ConveniosApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_partnership

    @id_partnership.setter
    def id_partnership(self, id_partnership):
        """Sets the id_partnership of this ConveniosApiViewModel.


        :param id_partnership: The id_partnership of this ConveniosApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_partnership = id_partnership

    @property
    def description(self):
        """Gets the description of this ConveniosApiViewModel.  # noqa: E501


        :return: The description of this ConveniosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConveniosApiViewModel.


        :param description: The description of this ConveniosApiViewModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_blocked_flag(self):
        """Gets the is_blocked_flag of this ConveniosApiViewModel.  # noqa: E501


        :return: The is_blocked_flag of this ConveniosApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_blocked_flag

    @is_blocked_flag.setter
    def is_blocked_flag(self, is_blocked_flag):
        """Sets the is_blocked_flag of this ConveniosApiViewModel.


        :param is_blocked_flag: The is_blocked_flag of this ConveniosApiViewModel.  # noqa: E501
        :type: bool
        """

        self._is_blocked_flag = is_blocked_flag

    @property
    def is_inactive_flag(self):
        """Gets the is_inactive_flag of this ConveniosApiViewModel.  # noqa: E501


        :return: The is_inactive_flag of this ConveniosApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_inactive_flag

    @is_inactive_flag.setter
    def is_inactive_flag(self, is_inactive_flag):
        """Sets the is_inactive_flag of this ConveniosApiViewModel.


        :param is_inactive_flag: The is_inactive_flag of this ConveniosApiViewModel.  # noqa: E501
        :type: bool
        """

        self._is_inactive_flag = is_inactive_flag

    @property
    def company(self):
        """Gets the company of this ConveniosApiViewModel.  # noqa: E501


        :return: The company of this ConveniosApiViewModel.  # noqa: E501
        :rtype: EmpresasConveniosApiViewModel
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this ConveniosApiViewModel.


        :param company: The company of this ConveniosApiViewModel.  # noqa: E501
        :type: EmpresasConveniosApiViewModel
        """

        self._company = company

    @property
    def is_recurring_discount_flag(self):
        """Gets the is_recurring_discount_flag of this ConveniosApiViewModel.  # noqa: E501


        :return: The is_recurring_discount_flag of this ConveniosApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_recurring_discount_flag

    @is_recurring_discount_flag.setter
    def is_recurring_discount_flag(self, is_recurring_discount_flag):
        """Sets the is_recurring_discount_flag of this ConveniosApiViewModel.


        :param is_recurring_discount_flag: The is_recurring_discount_flag of this ConveniosApiViewModel.  # noqa: E501
        :type: bool
        """

        self._is_recurring_discount_flag = is_recurring_discount_flag

    @property
    def discount(self):
        """Gets the discount of this ConveniosApiViewModel.  # noqa: E501


        :return: The discount of this ConveniosApiViewModel.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this ConveniosApiViewModel.


        :param discount: The discount of this ConveniosApiViewModel.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def discount_type(self):
        """Gets the discount_type of this ConveniosApiViewModel.  # noqa: E501


        :return: The discount_type of this ConveniosApiViewModel.  # noqa: E501
        :rtype: float
        """
        return self._discount_type

    @discount_type.setter
    def discount_type(self, discount_type):
        """Sets the discount_type of this ConveniosApiViewModel.


        :param discount_type: The discount_type of this ConveniosApiViewModel.  # noqa: E501
        :type: float
        """

        self._discount_type = discount_type

    @property
    def advanced_discount(self):
        """Gets the advanced_discount of this ConveniosApiViewModel.  # noqa: E501


        :return: The advanced_discount of this ConveniosApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._advanced_discount

    @advanced_discount.setter
    def advanced_discount(self, advanced_discount):
        """Sets the advanced_discount of this ConveniosApiViewModel.


        :param advanced_discount: The advanced_discount of this ConveniosApiViewModel.  # noqa: E501
        :type: int
        """

        self._advanced_discount = advanced_discount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConveniosApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConveniosApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
