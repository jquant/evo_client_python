# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContratosCanceladosParcelasApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_receivable': 'int',
        'description': 'str',
        'ammount': 'float',
        'ammount_paid': 'float',
        'current_installment': 'int',
        'total_installments': 'int',
        'tid': 'str',
        'nsu': 'str',
        'authorization': 'str',
        'canceled': 'bool',
        'cancellation_date': 'datetime',
        'cancellation_description': 'str',
        'registration_date': 'datetime',
        'due_date': 'datetime',
        'receiving_date': 'datetime',
        'payment_type': 'ReceivablesApiSubTypesViewModel'
    }

    attribute_map = {
        'id_receivable': 'idReceivable',
        'description': 'description',
        'ammount': 'ammount',
        'ammount_paid': 'ammountPaid',
        'current_installment': 'currentInstallment',
        'total_installments': 'totalInstallments',
        'tid': 'tid',
        'nsu': 'nsu',
        'authorization': 'authorization',
        'canceled': 'canceled',
        'cancellation_date': 'cancellationDate',
        'cancellation_description': 'cancellationDescription',
        'registration_date': 'registrationDate',
        'due_date': 'dueDate',
        'receiving_date': 'receivingDate',
        'payment_type': 'paymentType'
    }

    def __init__(self, id_receivable=None, description=None, ammount=None, ammount_paid=None, current_installment=None, total_installments=None, tid=None, nsu=None, authorization=None, canceled=None, cancellation_date=None, cancellation_description=None, registration_date=None, due_date=None, receiving_date=None, payment_type=None):  # noqa: E501
        """ContratosCanceladosParcelasApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_receivable = None
        self._description = None
        self._ammount = None
        self._ammount_paid = None
        self._current_installment = None
        self._total_installments = None
        self._tid = None
        self._nsu = None
        self._authorization = None
        self._canceled = None
        self._cancellation_date = None
        self._cancellation_description = None
        self._registration_date = None
        self._due_date = None
        self._receiving_date = None
        self._payment_type = None
        self.discriminator = None
        if id_receivable is not None:
            self.id_receivable = id_receivable
        if description is not None:
            self.description = description
        if ammount is not None:
            self.ammount = ammount
        if ammount_paid is not None:
            self.ammount_paid = ammount_paid
        if current_installment is not None:
            self.current_installment = current_installment
        if total_installments is not None:
            self.total_installments = total_installments
        if tid is not None:
            self.tid = tid
        if nsu is not None:
            self.nsu = nsu
        if authorization is not None:
            self.authorization = authorization
        if canceled is not None:
            self.canceled = canceled
        if cancellation_date is not None:
            self.cancellation_date = cancellation_date
        if cancellation_description is not None:
            self.cancellation_description = cancellation_description
        if registration_date is not None:
            self.registration_date = registration_date
        if due_date is not None:
            self.due_date = due_date
        if receiving_date is not None:
            self.receiving_date = receiving_date
        if payment_type is not None:
            self.payment_type = payment_type

    @property
    def id_receivable(self):
        """Gets the id_receivable of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501


        :return: The id_receivable of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_receivable

    @id_receivable.setter
    def id_receivable(self, id_receivable):
        """Sets the id_receivable of this ContratosCanceladosParcelasApiViewModel.


        :param id_receivable: The id_receivable of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_receivable = id_receivable

    @property
    def description(self):
        """Gets the description of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501


        :return: The description of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ContratosCanceladosParcelasApiViewModel.


        :param description: The description of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def ammount(self):
        """Gets the ammount of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501


        :return: The ammount of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :rtype: float
        """
        return self._ammount

    @ammount.setter
    def ammount(self, ammount):
        """Sets the ammount of this ContratosCanceladosParcelasApiViewModel.


        :param ammount: The ammount of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :type: float
        """

        self._ammount = ammount

    @property
    def ammount_paid(self):
        """Gets the ammount_paid of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501


        :return: The ammount_paid of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :rtype: float
        """
        return self._ammount_paid

    @ammount_paid.setter
    def ammount_paid(self, ammount_paid):
        """Sets the ammount_paid of this ContratosCanceladosParcelasApiViewModel.


        :param ammount_paid: The ammount_paid of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :type: float
        """

        self._ammount_paid = ammount_paid

    @property
    def current_installment(self):
        """Gets the current_installment of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501


        :return: The current_installment of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._current_installment

    @current_installment.setter
    def current_installment(self, current_installment):
        """Sets the current_installment of this ContratosCanceladosParcelasApiViewModel.


        :param current_installment: The current_installment of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :type: int
        """

        self._current_installment = current_installment

    @property
    def total_installments(self):
        """Gets the total_installments of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501


        :return: The total_installments of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._total_installments

    @total_installments.setter
    def total_installments(self, total_installments):
        """Sets the total_installments of this ContratosCanceladosParcelasApiViewModel.


        :param total_installments: The total_installments of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :type: int
        """

        self._total_installments = total_installments

    @property
    def tid(self):
        """Gets the tid of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501


        :return: The tid of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._tid

    @tid.setter
    def tid(self, tid):
        """Sets the tid of this ContratosCanceladosParcelasApiViewModel.


        :param tid: The tid of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :type: str
        """

        self._tid = tid

    @property
    def nsu(self):
        """Gets the nsu of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501


        :return: The nsu of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._nsu

    @nsu.setter
    def nsu(self, nsu):
        """Sets the nsu of this ContratosCanceladosParcelasApiViewModel.


        :param nsu: The nsu of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :type: str
        """

        self._nsu = nsu

    @property
    def authorization(self):
        """Gets the authorization of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501


        :return: The authorization of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this ContratosCanceladosParcelasApiViewModel.


        :param authorization: The authorization of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :type: str
        """

        self._authorization = authorization

    @property
    def canceled(self):
        """Gets the canceled of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501


        :return: The canceled of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._canceled

    @canceled.setter
    def canceled(self, canceled):
        """Sets the canceled of this ContratosCanceladosParcelasApiViewModel.


        :param canceled: The canceled of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :type: bool
        """

        self._canceled = canceled

    @property
    def cancellation_date(self):
        """Gets the cancellation_date of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501


        :return: The cancellation_date of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._cancellation_date

    @cancellation_date.setter
    def cancellation_date(self, cancellation_date):
        """Sets the cancellation_date of this ContratosCanceladosParcelasApiViewModel.


        :param cancellation_date: The cancellation_date of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._cancellation_date = cancellation_date

    @property
    def cancellation_description(self):
        """Gets the cancellation_description of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501


        :return: The cancellation_description of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._cancellation_description

    @cancellation_description.setter
    def cancellation_description(self, cancellation_description):
        """Sets the cancellation_description of this ContratosCanceladosParcelasApiViewModel.


        :param cancellation_description: The cancellation_description of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :type: str
        """

        self._cancellation_description = cancellation_description

    @property
    def registration_date(self):
        """Gets the registration_date of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501


        :return: The registration_date of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this ContratosCanceladosParcelasApiViewModel.


        :param registration_date: The registration_date of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._registration_date = registration_date

    @property
    def due_date(self):
        """Gets the due_date of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501


        :return: The due_date of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this ContratosCanceladosParcelasApiViewModel.


        :param due_date: The due_date of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def receiving_date(self):
        """Gets the receiving_date of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501


        :return: The receiving_date of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._receiving_date

    @receiving_date.setter
    def receiving_date(self, receiving_date):
        """Sets the receiving_date of this ContratosCanceladosParcelasApiViewModel.


        :param receiving_date: The receiving_date of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._receiving_date = receiving_date

    @property
    def payment_type(self):
        """Gets the payment_type of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501


        :return: The payment_type of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :rtype: ReceivablesApiSubTypesViewModel
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this ContratosCanceladosParcelasApiViewModel.


        :param payment_type: The payment_type of this ContratosCanceladosParcelasApiViewModel.  # noqa: E501
        :type: ReceivablesApiSubTypesViewModel
        """

        self._payment_type = payment_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContratosCanceladosParcelasApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContratosCanceladosParcelasApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
