# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContratoNaoRenovadosViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_filial': 'int',
        'nome_filial': 'str',
        'id_cliente': 'int',
        'status': 'str',
        'contrato_ativo': 'str',
        'nome': 'str',
        'sobrenome': 'str',
        'contrato_vencido': 'str',
        'data_inicio': 'datetime',
        'data_fim': 'datetime',
        'meses_permanencia': 'int',
        'valor': 'float',
        'fl_cancelado': 'bool',
        'dt_cancelamento': 'datetime',
        'contrato_cancelado': 'str',
        'motivo_cancelamento': 'str',
        'nome_consultor': 'str',
        'celular': 'str',
        'email': 'str'
    }

    attribute_map = {
        'id_filial': 'idFilial',
        'nome_filial': 'nomeFilial',
        'id_cliente': 'idCliente',
        'status': 'status',
        'contrato_ativo': 'contratoAtivo',
        'nome': 'nome',
        'sobrenome': 'sobrenome',
        'contrato_vencido': 'contratoVencido',
        'data_inicio': 'dataInicio',
        'data_fim': 'dataFim',
        'meses_permanencia': 'mesesPermanencia',
        'valor': 'valor',
        'fl_cancelado': 'flCancelado',
        'dt_cancelamento': 'dtCancelamento',
        'contrato_cancelado': 'contratoCancelado',
        'motivo_cancelamento': 'motivoCancelamento',
        'nome_consultor': 'nomeConsultor',
        'celular': 'celular',
        'email': 'email'
    }

    def __init__(self, id_filial=None, nome_filial=None, id_cliente=None, status=None, contrato_ativo=None, nome=None, sobrenome=None, contrato_vencido=None, data_inicio=None, data_fim=None, meses_permanencia=None, valor=None, fl_cancelado=None, dt_cancelamento=None, contrato_cancelado=None, motivo_cancelamento=None, nome_consultor=None, celular=None, email=None):  # noqa: E501
        """ContratoNaoRenovadosViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_filial = None
        self._nome_filial = None
        self._id_cliente = None
        self._status = None
        self._contrato_ativo = None
        self._nome = None
        self._sobrenome = None
        self._contrato_vencido = None
        self._data_inicio = None
        self._data_fim = None
        self._meses_permanencia = None
        self._valor = None
        self._fl_cancelado = None
        self._dt_cancelamento = None
        self._contrato_cancelado = None
        self._motivo_cancelamento = None
        self._nome_consultor = None
        self._celular = None
        self._email = None
        self.discriminator = None
        if id_filial is not None:
            self.id_filial = id_filial
        if nome_filial is not None:
            self.nome_filial = nome_filial
        if id_cliente is not None:
            self.id_cliente = id_cliente
        if status is not None:
            self.status = status
        if contrato_ativo is not None:
            self.contrato_ativo = contrato_ativo
        if nome is not None:
            self.nome = nome
        if sobrenome is not None:
            self.sobrenome = sobrenome
        if contrato_vencido is not None:
            self.contrato_vencido = contrato_vencido
        if data_inicio is not None:
            self.data_inicio = data_inicio
        if data_fim is not None:
            self.data_fim = data_fim
        if meses_permanencia is not None:
            self.meses_permanencia = meses_permanencia
        if valor is not None:
            self.valor = valor
        if fl_cancelado is not None:
            self.fl_cancelado = fl_cancelado
        if dt_cancelamento is not None:
            self.dt_cancelamento = dt_cancelamento
        if contrato_cancelado is not None:
            self.contrato_cancelado = contrato_cancelado
        if motivo_cancelamento is not None:
            self.motivo_cancelamento = motivo_cancelamento
        if nome_consultor is not None:
            self.nome_consultor = nome_consultor
        if celular is not None:
            self.celular = celular
        if email is not None:
            self.email = email

    @property
    def id_filial(self):
        """Gets the id_filial of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The id_filial of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_filial

    @id_filial.setter
    def id_filial(self, id_filial):
        """Sets the id_filial of this ContratoNaoRenovadosViewModel.


        :param id_filial: The id_filial of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: int
        """

        self._id_filial = id_filial

    @property
    def nome_filial(self):
        """Gets the nome_filial of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The nome_filial of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: str
        """
        return self._nome_filial

    @nome_filial.setter
    def nome_filial(self, nome_filial):
        """Sets the nome_filial of this ContratoNaoRenovadosViewModel.


        :param nome_filial: The nome_filial of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: str
        """

        self._nome_filial = nome_filial

    @property
    def id_cliente(self):
        """Gets the id_cliente of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The id_cliente of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_cliente

    @id_cliente.setter
    def id_cliente(self, id_cliente):
        """Sets the id_cliente of this ContratoNaoRenovadosViewModel.


        :param id_cliente: The id_cliente of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: int
        """

        self._id_cliente = id_cliente

    @property
    def status(self):
        """Gets the status of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The status of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContratoNaoRenovadosViewModel.


        :param status: The status of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def contrato_ativo(self):
        """Gets the contrato_ativo of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The contrato_ativo of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: str
        """
        return self._contrato_ativo

    @contrato_ativo.setter
    def contrato_ativo(self, contrato_ativo):
        """Sets the contrato_ativo of this ContratoNaoRenovadosViewModel.


        :param contrato_ativo: The contrato_ativo of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: str
        """

        self._contrato_ativo = contrato_ativo

    @property
    def nome(self):
        """Gets the nome of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The nome of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: str
        """
        return self._nome

    @nome.setter
    def nome(self, nome):
        """Sets the nome of this ContratoNaoRenovadosViewModel.


        :param nome: The nome of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: str
        """

        self._nome = nome

    @property
    def sobrenome(self):
        """Gets the sobrenome of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The sobrenome of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: str
        """
        return self._sobrenome

    @sobrenome.setter
    def sobrenome(self, sobrenome):
        """Sets the sobrenome of this ContratoNaoRenovadosViewModel.


        :param sobrenome: The sobrenome of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: str
        """

        self._sobrenome = sobrenome

    @property
    def contrato_vencido(self):
        """Gets the contrato_vencido of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The contrato_vencido of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: str
        """
        return self._contrato_vencido

    @contrato_vencido.setter
    def contrato_vencido(self, contrato_vencido):
        """Sets the contrato_vencido of this ContratoNaoRenovadosViewModel.


        :param contrato_vencido: The contrato_vencido of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: str
        """

        self._contrato_vencido = contrato_vencido

    @property
    def data_inicio(self):
        """Gets the data_inicio of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The data_inicio of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._data_inicio

    @data_inicio.setter
    def data_inicio(self, data_inicio):
        """Sets the data_inicio of this ContratoNaoRenovadosViewModel.


        :param data_inicio: The data_inicio of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: datetime
        """

        self._data_inicio = data_inicio

    @property
    def data_fim(self):
        """Gets the data_fim of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The data_fim of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._data_fim

    @data_fim.setter
    def data_fim(self, data_fim):
        """Sets the data_fim of this ContratoNaoRenovadosViewModel.


        :param data_fim: The data_fim of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: datetime
        """

        self._data_fim = data_fim

    @property
    def meses_permanencia(self):
        """Gets the meses_permanencia of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The meses_permanencia of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: int
        """
        return self._meses_permanencia

    @meses_permanencia.setter
    def meses_permanencia(self, meses_permanencia):
        """Sets the meses_permanencia of this ContratoNaoRenovadosViewModel.


        :param meses_permanencia: The meses_permanencia of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: int
        """

        self._meses_permanencia = meses_permanencia

    @property
    def valor(self):
        """Gets the valor of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The valor of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: float
        """
        return self._valor

    @valor.setter
    def valor(self, valor):
        """Sets the valor of this ContratoNaoRenovadosViewModel.


        :param valor: The valor of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: float
        """

        self._valor = valor

    @property
    def fl_cancelado(self):
        """Gets the fl_cancelado of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The fl_cancelado of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_cancelado

    @fl_cancelado.setter
    def fl_cancelado(self, fl_cancelado):
        """Sets the fl_cancelado of this ContratoNaoRenovadosViewModel.


        :param fl_cancelado: The fl_cancelado of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_cancelado = fl_cancelado

    @property
    def dt_cancelamento(self):
        """Gets the dt_cancelamento of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The dt_cancelamento of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_cancelamento

    @dt_cancelamento.setter
    def dt_cancelamento(self, dt_cancelamento):
        """Sets the dt_cancelamento of this ContratoNaoRenovadosViewModel.


        :param dt_cancelamento: The dt_cancelamento of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: datetime
        """

        self._dt_cancelamento = dt_cancelamento

    @property
    def contrato_cancelado(self):
        """Gets the contrato_cancelado of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The contrato_cancelado of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: str
        """
        return self._contrato_cancelado

    @contrato_cancelado.setter
    def contrato_cancelado(self, contrato_cancelado):
        """Sets the contrato_cancelado of this ContratoNaoRenovadosViewModel.


        :param contrato_cancelado: The contrato_cancelado of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: str
        """

        self._contrato_cancelado = contrato_cancelado

    @property
    def motivo_cancelamento(self):
        """Gets the motivo_cancelamento of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The motivo_cancelamento of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: str
        """
        return self._motivo_cancelamento

    @motivo_cancelamento.setter
    def motivo_cancelamento(self, motivo_cancelamento):
        """Sets the motivo_cancelamento of this ContratoNaoRenovadosViewModel.


        :param motivo_cancelamento: The motivo_cancelamento of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: str
        """

        self._motivo_cancelamento = motivo_cancelamento

    @property
    def nome_consultor(self):
        """Gets the nome_consultor of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The nome_consultor of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: str
        """
        return self._nome_consultor

    @nome_consultor.setter
    def nome_consultor(self, nome_consultor):
        """Sets the nome_consultor of this ContratoNaoRenovadosViewModel.


        :param nome_consultor: The nome_consultor of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: str
        """

        self._nome_consultor = nome_consultor

    @property
    def celular(self):
        """Gets the celular of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The celular of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: str
        """
        return self._celular

    @celular.setter
    def celular(self, celular):
        """Sets the celular of this ContratoNaoRenovadosViewModel.


        :param celular: The celular of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: str
        """

        self._celular = celular

    @property
    def email(self):
        """Gets the email of this ContratoNaoRenovadosViewModel.  # noqa: E501


        :return: The email of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContratoNaoRenovadosViewModel.


        :param email: The email of this ContratoNaoRenovadosViewModel.  # noqa: E501
        :type: str
        """

        self._email = email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContratoNaoRenovadosViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContratoNaoRenovadosViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
