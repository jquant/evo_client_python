# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContratosResumoApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_membership': 'int',
        'id_branch': 'int',
        'name_membership': 'str',
        'membership_type': 'str',
        'duration_type': 'str',
        'duration': 'int',
        'value': 'float',
        'max_amount_installments': 'int',
        'description': 'str',
        'url_sale': 'str',
        'online_sales_observations': 'str',
        'differentials': 'list[DiferenciaisApiViewModel]',
        'access_branches': 'list[ContratoFiliaisResumoApiViewModel]',
        'additional_service': 'ServicoAdicionalApiViewModel',
        'service_yearly': 'ServicoAnualApiViewModel',
        'type_promotional_period': 'int',
        'value_promotional_period': 'float',
        'months_promotional_period': 'int',
        'days_promotional_period': 'int',
        'min_period_stay_membership': 'int',
        'installments_promotional_period': 'int',
        'inactive': 'bool',
        'display_name': 'str',
        'entries': 'ContratoEntradasApiViewModel',
        'sales_page': 'list[ContratosResumoPaginaVendaViewModel]'
    }

    attribute_map = {
        'id_membership': 'idMembership',
        'id_branch': 'idBranch',
        'name_membership': 'nameMembership',
        'membership_type': 'membershipType',
        'duration_type': 'durationType',
        'duration': 'duration',
        'value': 'value',
        'max_amount_installments': 'maxAmountInstallments',
        'description': 'description',
        'url_sale': 'urlSale',
        'online_sales_observations': 'onlineSalesObservations',
        'differentials': 'differentials',
        'access_branches': 'accessBranches',
        'additional_service': 'additionalService',
        'service_yearly': 'serviceYearly',
        'type_promotional_period': 'typePromotionalPeriod',
        'value_promotional_period': 'valuePromotionalPeriod',
        'months_promotional_period': 'monthsPromotionalPeriod',
        'days_promotional_period': 'daysPromotionalPeriod',
        'min_period_stay_membership': 'minPeriodStayMembership',
        'installments_promotional_period': 'installmentsPromotionalPeriod',
        'inactive': 'inactive',
        'display_name': 'displayName',
        'entries': 'entries',
        'sales_page': 'salesPage'
    }

    def __init__(self, id_membership=None, id_branch=None, name_membership=None, membership_type=None, duration_type=None, duration=None, value=None, max_amount_installments=None, description=None, url_sale=None, online_sales_observations=None, differentials=None, access_branches=None, additional_service=None, service_yearly=None, type_promotional_period=None, value_promotional_period=None, months_promotional_period=None, days_promotional_period=None, min_period_stay_membership=None, installments_promotional_period=None, inactive=None, display_name=None, entries=None, sales_page=None):  # noqa: E501
        """ContratosResumoApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_membership = None
        self._id_branch = None
        self._name_membership = None
        self._membership_type = None
        self._duration_type = None
        self._duration = None
        self._value = None
        self._max_amount_installments = None
        self._description = None
        self._url_sale = None
        self._online_sales_observations = None
        self._differentials = None
        self._access_branches = None
        self._additional_service = None
        self._service_yearly = None
        self._type_promotional_period = None
        self._value_promotional_period = None
        self._months_promotional_period = None
        self._days_promotional_period = None
        self._min_period_stay_membership = None
        self._installments_promotional_period = None
        self._inactive = None
        self._display_name = None
        self._entries = None
        self._sales_page = None
        self.discriminator = None
        if id_membership is not None:
            self.id_membership = id_membership
        if id_branch is not None:
            self.id_branch = id_branch
        if name_membership is not None:
            self.name_membership = name_membership
        if membership_type is not None:
            self.membership_type = membership_type
        if duration_type is not None:
            self.duration_type = duration_type
        if duration is not None:
            self.duration = duration
        if value is not None:
            self.value = value
        if max_amount_installments is not None:
            self.max_amount_installments = max_amount_installments
        if description is not None:
            self.description = description
        if url_sale is not None:
            self.url_sale = url_sale
        if online_sales_observations is not None:
            self.online_sales_observations = online_sales_observations
        if differentials is not None:
            self.differentials = differentials
        if access_branches is not None:
            self.access_branches = access_branches
        if additional_service is not None:
            self.additional_service = additional_service
        if service_yearly is not None:
            self.service_yearly = service_yearly
        if type_promotional_period is not None:
            self.type_promotional_period = type_promotional_period
        if value_promotional_period is not None:
            self.value_promotional_period = value_promotional_period
        if months_promotional_period is not None:
            self.months_promotional_period = months_promotional_period
        if days_promotional_period is not None:
            self.days_promotional_period = days_promotional_period
        if min_period_stay_membership is not None:
            self.min_period_stay_membership = min_period_stay_membership
        if installments_promotional_period is not None:
            self.installments_promotional_period = installments_promotional_period
        if inactive is not None:
            self.inactive = inactive
        if display_name is not None:
            self.display_name = display_name
        if entries is not None:
            self.entries = entries
        if sales_page is not None:
            self.sales_page = sales_page

    @property
    def id_membership(self):
        """Gets the id_membership of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The id_membership of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_membership

    @id_membership.setter
    def id_membership(self, id_membership):
        """Sets the id_membership of this ContratosResumoApiViewModel.


        :param id_membership: The id_membership of this ContratosResumoApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_membership = id_membership

    @property
    def id_branch(self):
        """Gets the id_branch of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The id_branch of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_branch

    @id_branch.setter
    def id_branch(self, id_branch):
        """Sets the id_branch of this ContratosResumoApiViewModel.


        :param id_branch: The id_branch of this ContratosResumoApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_branch = id_branch

    @property
    def name_membership(self):
        """Gets the name_membership of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The name_membership of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name_membership

    @name_membership.setter
    def name_membership(self, name_membership):
        """Sets the name_membership of this ContratosResumoApiViewModel.


        :param name_membership: The name_membership of this ContratosResumoApiViewModel.  # noqa: E501
        :type: str
        """

        self._name_membership = name_membership

    @property
    def membership_type(self):
        """Gets the membership_type of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The membership_type of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._membership_type

    @membership_type.setter
    def membership_type(self, membership_type):
        """Sets the membership_type of this ContratosResumoApiViewModel.


        :param membership_type: The membership_type of this ContratosResumoApiViewModel.  # noqa: E501
        :type: str
        """

        self._membership_type = membership_type

    @property
    def duration_type(self):
        """Gets the duration_type of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The duration_type of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._duration_type

    @duration_type.setter
    def duration_type(self, duration_type):
        """Sets the duration_type of this ContratosResumoApiViewModel.


        :param duration_type: The duration_type of this ContratosResumoApiViewModel.  # noqa: E501
        :type: str
        """

        self._duration_type = duration_type

    @property
    def duration(self):
        """Gets the duration of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The duration of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ContratosResumoApiViewModel.


        :param duration: The duration of this ContratosResumoApiViewModel.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def value(self):
        """Gets the value of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The value of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ContratosResumoApiViewModel.


        :param value: The value of this ContratosResumoApiViewModel.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def max_amount_installments(self):
        """Gets the max_amount_installments of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The max_amount_installments of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._max_amount_installments

    @max_amount_installments.setter
    def max_amount_installments(self, max_amount_installments):
        """Sets the max_amount_installments of this ContratosResumoApiViewModel.


        :param max_amount_installments: The max_amount_installments of this ContratosResumoApiViewModel.  # noqa: E501
        :type: int
        """

        self._max_amount_installments = max_amount_installments

    @property
    def description(self):
        """Gets the description of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The description of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ContratosResumoApiViewModel.


        :param description: The description of this ContratosResumoApiViewModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def url_sale(self):
        """Gets the url_sale of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The url_sale of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._url_sale

    @url_sale.setter
    def url_sale(self, url_sale):
        """Sets the url_sale of this ContratosResumoApiViewModel.


        :param url_sale: The url_sale of this ContratosResumoApiViewModel.  # noqa: E501
        :type: str
        """

        self._url_sale = url_sale

    @property
    def online_sales_observations(self):
        """Gets the online_sales_observations of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The online_sales_observations of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._online_sales_observations

    @online_sales_observations.setter
    def online_sales_observations(self, online_sales_observations):
        """Sets the online_sales_observations of this ContratosResumoApiViewModel.


        :param online_sales_observations: The online_sales_observations of this ContratosResumoApiViewModel.  # noqa: E501
        :type: str
        """

        self._online_sales_observations = online_sales_observations

    @property
    def differentials(self):
        """Gets the differentials of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The differentials of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: list[DiferenciaisApiViewModel]
        """
        return self._differentials

    @differentials.setter
    def differentials(self, differentials):
        """Sets the differentials of this ContratosResumoApiViewModel.


        :param differentials: The differentials of this ContratosResumoApiViewModel.  # noqa: E501
        :type: list[DiferenciaisApiViewModel]
        """

        self._differentials = differentials

    @property
    def access_branches(self):
        """Gets the access_branches of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The access_branches of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: list[ContratoFiliaisResumoApiViewModel]
        """
        return self._access_branches

    @access_branches.setter
    def access_branches(self, access_branches):
        """Sets the access_branches of this ContratosResumoApiViewModel.


        :param access_branches: The access_branches of this ContratosResumoApiViewModel.  # noqa: E501
        :type: list[ContratoFiliaisResumoApiViewModel]
        """

        self._access_branches = access_branches

    @property
    def additional_service(self):
        """Gets the additional_service of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The additional_service of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: ServicoAdicionalApiViewModel
        """
        return self._additional_service

    @additional_service.setter
    def additional_service(self, additional_service):
        """Sets the additional_service of this ContratosResumoApiViewModel.


        :param additional_service: The additional_service of this ContratosResumoApiViewModel.  # noqa: E501
        :type: ServicoAdicionalApiViewModel
        """

        self._additional_service = additional_service

    @property
    def service_yearly(self):
        """Gets the service_yearly of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The service_yearly of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: ServicoAnualApiViewModel
        """
        return self._service_yearly

    @service_yearly.setter
    def service_yearly(self, service_yearly):
        """Sets the service_yearly of this ContratosResumoApiViewModel.


        :param service_yearly: The service_yearly of this ContratosResumoApiViewModel.  # noqa: E501
        :type: ServicoAnualApiViewModel
        """

        self._service_yearly = service_yearly

    @property
    def type_promotional_period(self):
        """Gets the type_promotional_period of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The type_promotional_period of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._type_promotional_period

    @type_promotional_period.setter
    def type_promotional_period(self, type_promotional_period):
        """Sets the type_promotional_period of this ContratosResumoApiViewModel.


        :param type_promotional_period: The type_promotional_period of this ContratosResumoApiViewModel.  # noqa: E501
        :type: int
        """

        self._type_promotional_period = type_promotional_period

    @property
    def value_promotional_period(self):
        """Gets the value_promotional_period of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The value_promotional_period of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: float
        """
        return self._value_promotional_period

    @value_promotional_period.setter
    def value_promotional_period(self, value_promotional_period):
        """Sets the value_promotional_period of this ContratosResumoApiViewModel.


        :param value_promotional_period: The value_promotional_period of this ContratosResumoApiViewModel.  # noqa: E501
        :type: float
        """

        self._value_promotional_period = value_promotional_period

    @property
    def months_promotional_period(self):
        """Gets the months_promotional_period of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The months_promotional_period of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._months_promotional_period

    @months_promotional_period.setter
    def months_promotional_period(self, months_promotional_period):
        """Sets the months_promotional_period of this ContratosResumoApiViewModel.


        :param months_promotional_period: The months_promotional_period of this ContratosResumoApiViewModel.  # noqa: E501
        :type: int
        """

        self._months_promotional_period = months_promotional_period

    @property
    def days_promotional_period(self):
        """Gets the days_promotional_period of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The days_promotional_period of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._days_promotional_period

    @days_promotional_period.setter
    def days_promotional_period(self, days_promotional_period):
        """Sets the days_promotional_period of this ContratosResumoApiViewModel.


        :param days_promotional_period: The days_promotional_period of this ContratosResumoApiViewModel.  # noqa: E501
        :type: int
        """

        self._days_promotional_period = days_promotional_period

    @property
    def min_period_stay_membership(self):
        """Gets the min_period_stay_membership of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The min_period_stay_membership of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._min_period_stay_membership

    @min_period_stay_membership.setter
    def min_period_stay_membership(self, min_period_stay_membership):
        """Sets the min_period_stay_membership of this ContratosResumoApiViewModel.


        :param min_period_stay_membership: The min_period_stay_membership of this ContratosResumoApiViewModel.  # noqa: E501
        :type: int
        """

        self._min_period_stay_membership = min_period_stay_membership

    @property
    def installments_promotional_period(self):
        """Gets the installments_promotional_period of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The installments_promotional_period of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._installments_promotional_period

    @installments_promotional_period.setter
    def installments_promotional_period(self, installments_promotional_period):
        """Sets the installments_promotional_period of this ContratosResumoApiViewModel.


        :param installments_promotional_period: The installments_promotional_period of this ContratosResumoApiViewModel.  # noqa: E501
        :type: int
        """

        self._installments_promotional_period = installments_promotional_period

    @property
    def inactive(self):
        """Gets the inactive of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The inactive of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """Sets the inactive of this ContratosResumoApiViewModel.


        :param inactive: The inactive of this ContratosResumoApiViewModel.  # noqa: E501
        :type: bool
        """

        self._inactive = inactive

    @property
    def display_name(self):
        """Gets the display_name of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The display_name of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ContratosResumoApiViewModel.


        :param display_name: The display_name of this ContratosResumoApiViewModel.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def entries(self):
        """Gets the entries of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The entries of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: ContratoEntradasApiViewModel
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this ContratosResumoApiViewModel.


        :param entries: The entries of this ContratosResumoApiViewModel.  # noqa: E501
        :type: ContratoEntradasApiViewModel
        """

        self._entries = entries

    @property
    def sales_page(self):
        """Gets the sales_page of this ContratosResumoApiViewModel.  # noqa: E501


        :return: The sales_page of this ContratosResumoApiViewModel.  # noqa: E501
        :rtype: list[ContratosResumoPaginaVendaViewModel]
        """
        return self._sales_page

    @sales_page.setter
    def sales_page(self, sales_page):
        """Sets the sales_page of this ContratosResumoApiViewModel.


        :param sales_page: The sales_page of this ContratosResumoApiViewModel.  # noqa: E501
        :type: list[ContratosResumoPaginaVendaViewModel]
        """

        self._sales_page = sales_page

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContratosResumoApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContratosResumoApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
