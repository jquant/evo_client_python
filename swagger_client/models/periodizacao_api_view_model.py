# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PeriodizacaoApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'characteristics': 'str',
        'color': 'str',
        'intensity_number': 'int',
        'type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'characteristics': 'characteristics',
        'color': 'color',
        'intensity_number': 'intensityNumber',
        'type': 'type'
    }

    def __init__(self, name=None, characteristics=None, color=None, intensity_number=None, type=None):  # noqa: E501
        """PeriodizacaoApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._characteristics = None
        self._color = None
        self._intensity_number = None
        self._type = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if characteristics is not None:
            self.characteristics = characteristics
        if color is not None:
            self.color = color
        if intensity_number is not None:
            self.intensity_number = intensity_number
        if type is not None:
            self.type = type

    @property
    def name(self):
        """Gets the name of this PeriodizacaoApiViewModel.  # noqa: E501


        :return: The name of this PeriodizacaoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PeriodizacaoApiViewModel.


        :param name: The name of this PeriodizacaoApiViewModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def characteristics(self):
        """Gets the characteristics of this PeriodizacaoApiViewModel.  # noqa: E501


        :return: The characteristics of this PeriodizacaoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._characteristics

    @characteristics.setter
    def characteristics(self, characteristics):
        """Sets the characteristics of this PeriodizacaoApiViewModel.


        :param characteristics: The characteristics of this PeriodizacaoApiViewModel.  # noqa: E501
        :type: str
        """

        self._characteristics = characteristics

    @property
    def color(self):
        """Gets the color of this PeriodizacaoApiViewModel.  # noqa: E501


        :return: The color of this PeriodizacaoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this PeriodizacaoApiViewModel.


        :param color: The color of this PeriodizacaoApiViewModel.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def intensity_number(self):
        """Gets the intensity_number of this PeriodizacaoApiViewModel.  # noqa: E501


        :return: The intensity_number of this PeriodizacaoApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._intensity_number

    @intensity_number.setter
    def intensity_number(self, intensity_number):
        """Sets the intensity_number of this PeriodizacaoApiViewModel.


        :param intensity_number: The intensity_number of this PeriodizacaoApiViewModel.  # noqa: E501
        :type: int
        """

        self._intensity_number = intensity_number

    @property
    def type(self):
        """Gets the type of this PeriodizacaoApiViewModel.  # noqa: E501


        :return: The type of this PeriodizacaoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PeriodizacaoApiViewModel.


        :param type: The type of this PeriodizacaoApiViewModel.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PeriodizacaoApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PeriodizacaoApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
