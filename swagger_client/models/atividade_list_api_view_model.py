# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AtividadeListApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_activity': 'int',
        'photo': 'str',
        'name': 'str',
        'color': 'str',
        'activity_group': 'str',
        'total_records': 'int',
        'inactive': 'bool',
        'description': 'str',
        'id_activity_group': 'int',
        'show_on_mobile': 'bool',
        'show_on_website': 'bool',
        'id_branch': 'int',
        'audience': 'list[PublicoAtividadeViewModel]',
        'id_audience': 'int'
    }

    attribute_map = {
        'id_activity': 'idActivity',
        'photo': 'photo',
        'name': 'name',
        'color': 'color',
        'activity_group': 'activityGroup',
        'total_records': 'totalRecords',
        'inactive': 'inactive',
        'description': 'description',
        'id_activity_group': 'idActivityGroup',
        'show_on_mobile': 'showOnMobile',
        'show_on_website': 'showOnWebsite',
        'id_branch': 'idBranch',
        'audience': 'audience',
        'id_audience': 'idAudience'
    }

    def __init__(self, id_activity=None, photo=None, name=None, color=None, activity_group=None, total_records=None, inactive=None, description=None, id_activity_group=None, show_on_mobile=None, show_on_website=None, id_branch=None, audience=None, id_audience=None):  # noqa: E501
        """AtividadeListApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_activity = None
        self._photo = None
        self._name = None
        self._color = None
        self._activity_group = None
        self._total_records = None
        self._inactive = None
        self._description = None
        self._id_activity_group = None
        self._show_on_mobile = None
        self._show_on_website = None
        self._id_branch = None
        self._audience = None
        self._id_audience = None
        self.discriminator = None
        if id_activity is not None:
            self.id_activity = id_activity
        if photo is not None:
            self.photo = photo
        if name is not None:
            self.name = name
        if color is not None:
            self.color = color
        if activity_group is not None:
            self.activity_group = activity_group
        if total_records is not None:
            self.total_records = total_records
        if inactive is not None:
            self.inactive = inactive
        if description is not None:
            self.description = description
        if id_activity_group is not None:
            self.id_activity_group = id_activity_group
        if show_on_mobile is not None:
            self.show_on_mobile = show_on_mobile
        if show_on_website is not None:
            self.show_on_website = show_on_website
        if id_branch is not None:
            self.id_branch = id_branch
        if audience is not None:
            self.audience = audience
        if id_audience is not None:
            self.id_audience = id_audience

    @property
    def id_activity(self):
        """Gets the id_activity of this AtividadeListApiViewModel.  # noqa: E501


        :return: The id_activity of this AtividadeListApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_activity

    @id_activity.setter
    def id_activity(self, id_activity):
        """Sets the id_activity of this AtividadeListApiViewModel.


        :param id_activity: The id_activity of this AtividadeListApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_activity = id_activity

    @property
    def photo(self):
        """Gets the photo of this AtividadeListApiViewModel.  # noqa: E501


        :return: The photo of this AtividadeListApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this AtividadeListApiViewModel.


        :param photo: The photo of this AtividadeListApiViewModel.  # noqa: E501
        :type: str
        """

        self._photo = photo

    @property
    def name(self):
        """Gets the name of this AtividadeListApiViewModel.  # noqa: E501


        :return: The name of this AtividadeListApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AtividadeListApiViewModel.


        :param name: The name of this AtividadeListApiViewModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def color(self):
        """Gets the color of this AtividadeListApiViewModel.  # noqa: E501


        :return: The color of this AtividadeListApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this AtividadeListApiViewModel.


        :param color: The color of this AtividadeListApiViewModel.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def activity_group(self):
        """Gets the activity_group of this AtividadeListApiViewModel.  # noqa: E501


        :return: The activity_group of this AtividadeListApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._activity_group

    @activity_group.setter
    def activity_group(self, activity_group):
        """Sets the activity_group of this AtividadeListApiViewModel.


        :param activity_group: The activity_group of this AtividadeListApiViewModel.  # noqa: E501
        :type: str
        """

        self._activity_group = activity_group

    @property
    def total_records(self):
        """Gets the total_records of this AtividadeListApiViewModel.  # noqa: E501


        :return: The total_records of this AtividadeListApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._total_records

    @total_records.setter
    def total_records(self, total_records):
        """Sets the total_records of this AtividadeListApiViewModel.


        :param total_records: The total_records of this AtividadeListApiViewModel.  # noqa: E501
        :type: int
        """

        self._total_records = total_records

    @property
    def inactive(self):
        """Gets the inactive of this AtividadeListApiViewModel.  # noqa: E501


        :return: The inactive of this AtividadeListApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """Sets the inactive of this AtividadeListApiViewModel.


        :param inactive: The inactive of this AtividadeListApiViewModel.  # noqa: E501
        :type: bool
        """

        self._inactive = inactive

    @property
    def description(self):
        """Gets the description of this AtividadeListApiViewModel.  # noqa: E501


        :return: The description of this AtividadeListApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AtividadeListApiViewModel.


        :param description: The description of this AtividadeListApiViewModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id_activity_group(self):
        """Gets the id_activity_group of this AtividadeListApiViewModel.  # noqa: E501


        :return: The id_activity_group of this AtividadeListApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_activity_group

    @id_activity_group.setter
    def id_activity_group(self, id_activity_group):
        """Sets the id_activity_group of this AtividadeListApiViewModel.


        :param id_activity_group: The id_activity_group of this AtividadeListApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_activity_group = id_activity_group

    @property
    def show_on_mobile(self):
        """Gets the show_on_mobile of this AtividadeListApiViewModel.  # noqa: E501


        :return: The show_on_mobile of this AtividadeListApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._show_on_mobile

    @show_on_mobile.setter
    def show_on_mobile(self, show_on_mobile):
        """Sets the show_on_mobile of this AtividadeListApiViewModel.


        :param show_on_mobile: The show_on_mobile of this AtividadeListApiViewModel.  # noqa: E501
        :type: bool
        """

        self._show_on_mobile = show_on_mobile

    @property
    def show_on_website(self):
        """Gets the show_on_website of this AtividadeListApiViewModel.  # noqa: E501


        :return: The show_on_website of this AtividadeListApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._show_on_website

    @show_on_website.setter
    def show_on_website(self, show_on_website):
        """Sets the show_on_website of this AtividadeListApiViewModel.


        :param show_on_website: The show_on_website of this AtividadeListApiViewModel.  # noqa: E501
        :type: bool
        """

        self._show_on_website = show_on_website

    @property
    def id_branch(self):
        """Gets the id_branch of this AtividadeListApiViewModel.  # noqa: E501


        :return: The id_branch of this AtividadeListApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_branch

    @id_branch.setter
    def id_branch(self, id_branch):
        """Sets the id_branch of this AtividadeListApiViewModel.


        :param id_branch: The id_branch of this AtividadeListApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_branch = id_branch

    @property
    def audience(self):
        """Gets the audience of this AtividadeListApiViewModel.  # noqa: E501


        :return: The audience of this AtividadeListApiViewModel.  # noqa: E501
        :rtype: list[PublicoAtividadeViewModel]
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this AtividadeListApiViewModel.


        :param audience: The audience of this AtividadeListApiViewModel.  # noqa: E501
        :type: list[PublicoAtividadeViewModel]
        """

        self._audience = audience

    @property
    def id_audience(self):
        """Gets the id_audience of this AtividadeListApiViewModel.  # noqa: E501


        :return: The id_audience of this AtividadeListApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_audience

    @id_audience.setter
    def id_audience(self, id_audience):
        """Sets the id_audience of this AtividadeListApiViewModel.


        :param id_audience: The id_audience of this AtividadeListApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_audience = id_audience

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AtividadeListApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AtividadeListApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
