# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServicoAnualApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_service': 'int',
        'name': 'str',
        'value': 'float',
        'type': 'int',
        'billing_month': 'int',
        'billing_day': 'int',
        'billing_after_months': 'int',
        'installments': 'int'
    }

    attribute_map = {
        'id_service': 'idService',
        'name': 'name',
        'value': 'value',
        'type': 'type',
        'billing_month': 'billingMonth',
        'billing_day': 'billingDay',
        'billing_after_months': 'billingAfterMonths',
        'installments': 'installments'
    }

    def __init__(self, id_service=None, name=None, value=None, type=None, billing_month=None, billing_day=None, billing_after_months=None, installments=None):  # noqa: E501
        """ServicoAnualApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_service = None
        self._name = None
        self._value = None
        self._type = None
        self._billing_month = None
        self._billing_day = None
        self._billing_after_months = None
        self._installments = None
        self.discriminator = None
        if id_service is not None:
            self.id_service = id_service
        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if type is not None:
            self.type = type
        if billing_month is not None:
            self.billing_month = billing_month
        if billing_day is not None:
            self.billing_day = billing_day
        if billing_after_months is not None:
            self.billing_after_months = billing_after_months
        if installments is not None:
            self.installments = installments

    @property
    def id_service(self):
        """Gets the id_service of this ServicoAnualApiViewModel.  # noqa: E501


        :return: The id_service of this ServicoAnualApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_service

    @id_service.setter
    def id_service(self, id_service):
        """Sets the id_service of this ServicoAnualApiViewModel.


        :param id_service: The id_service of this ServicoAnualApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_service = id_service

    @property
    def name(self):
        """Gets the name of this ServicoAnualApiViewModel.  # noqa: E501


        :return: The name of this ServicoAnualApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServicoAnualApiViewModel.


        :param name: The name of this ServicoAnualApiViewModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this ServicoAnualApiViewModel.  # noqa: E501


        :return: The value of this ServicoAnualApiViewModel.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ServicoAnualApiViewModel.


        :param value: The value of this ServicoAnualApiViewModel.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def type(self):
        """Gets the type of this ServicoAnualApiViewModel.  # noqa: E501


        :return: The type of this ServicoAnualApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServicoAnualApiViewModel.


        :param type: The type of this ServicoAnualApiViewModel.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def billing_month(self):
        """Gets the billing_month of this ServicoAnualApiViewModel.  # noqa: E501


        :return: The billing_month of this ServicoAnualApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._billing_month

    @billing_month.setter
    def billing_month(self, billing_month):
        """Sets the billing_month of this ServicoAnualApiViewModel.


        :param billing_month: The billing_month of this ServicoAnualApiViewModel.  # noqa: E501
        :type: int
        """

        self._billing_month = billing_month

    @property
    def billing_day(self):
        """Gets the billing_day of this ServicoAnualApiViewModel.  # noqa: E501


        :return: The billing_day of this ServicoAnualApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._billing_day

    @billing_day.setter
    def billing_day(self, billing_day):
        """Sets the billing_day of this ServicoAnualApiViewModel.


        :param billing_day: The billing_day of this ServicoAnualApiViewModel.  # noqa: E501
        :type: int
        """

        self._billing_day = billing_day

    @property
    def billing_after_months(self):
        """Gets the billing_after_months of this ServicoAnualApiViewModel.  # noqa: E501


        :return: The billing_after_months of this ServicoAnualApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._billing_after_months

    @billing_after_months.setter
    def billing_after_months(self, billing_after_months):
        """Sets the billing_after_months of this ServicoAnualApiViewModel.


        :param billing_after_months: The billing_after_months of this ServicoAnualApiViewModel.  # noqa: E501
        :type: int
        """

        self._billing_after_months = billing_after_months

    @property
    def installments(self):
        """Gets the installments of this ServicoAnualApiViewModel.  # noqa: E501


        :return: The installments of this ServicoAnualApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this ServicoAnualApiViewModel.


        :param installments: The installments of this ServicoAnualApiViewModel.  # noqa: E501
        :type: int
        """

        self._installments = installments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServicoAnualApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicoAnualApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
