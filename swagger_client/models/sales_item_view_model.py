# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SalesItemViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_membership': 'int',
        'membership': 'str',
        'loyalty_installment': 'bool',
        'membership_type': 'ETipoContrato',
        'loyalty_time': 'int',
        'validity_description': 'str',
        'reverse_installments_description': 'str',
        'value_days_months_defined_validity': 'int',
        'service_value': 'float',
        'service_name': 'str',
        'remark': 'str',
        'membership_text': 'str',
        'annuity_service_name': 'str',
        'annuity_service_value': 'float',
        'annuity_day': 'int',
        'annuity_month': 'int',
        'annuity_charge_type': 'int',
        'annuity_installments_count': 'int',
        'promotional_days_count': 'int',
        'promo_day_month_type': 'int',
        'installments_count': 'int',
        'promotional_value_description': 'str',
        'annuity_installments': 'list[InstallmentViewModel]',
        'id_service': 'int',
        'name': 'str',
        'fl_spotlight': 'bool',
        'order': 'int',
        'type': 'int',
        'charge_value': 'float',
        'charge_value_description': 'str',
        'total_value': 'float',
        'tax_value': 'float',
        'percentage_type': 'bool',
        'fl_charge_service_automatic_renew': 'bool',
        'fl_bank_slip': 'bool',
        'fl_card': 'bool',
        'fl_credit_balance': 'bool',
        'fl_register_required_address': 'bool',
        'fl_prioritize_registration_sale': 'bool',
        'age_from': 'int',
        'age_to': 'int',
        'differentials': 'list[DifferentialsViewModel]',
        'membership_branches': 'list[int]'
    }

    attribute_map = {
        'id_membership': 'idMembership',
        'membership': 'membership',
        'loyalty_installment': 'loyaltyInstallment',
        'membership_type': 'membershipType',
        'loyalty_time': 'loyaltyTime',
        'validity_description': 'validityDescription',
        'reverse_installments_description': 'reverseInstallmentsDescription',
        'value_days_months_defined_validity': 'valueDaysMonthsDefinedValidity',
        'service_value': 'serviceValue',
        'service_name': 'serviceName',
        'remark': 'remark',
        'membership_text': 'membershipText',
        'annuity_service_name': 'annuityServiceName',
        'annuity_service_value': 'annuityServiceValue',
        'annuity_day': 'annuityDay',
        'annuity_month': 'annuityMonth',
        'annuity_charge_type': 'annuityChargeType',
        'annuity_installments_count': 'annuityInstallmentsCount',
        'promotional_days_count': 'promotionalDaysCount',
        'promo_day_month_type': 'promoDayMonthType',
        'installments_count': 'installmentsCount',
        'promotional_value_description': 'promotionalValueDescription',
        'annuity_installments': 'annuityInstallments',
        'id_service': 'idService',
        'name': 'name',
        'fl_spotlight': 'flSpotlight',
        'order': 'order',
        'type': 'type',
        'charge_value': 'chargeValue',
        'charge_value_description': 'chargeValueDescription',
        'total_value': 'totalValue',
        'tax_value': 'taxValue',
        'percentage_type': 'percentageType',
        'fl_charge_service_automatic_renew': 'flChargeServiceAutomaticRenew',
        'fl_bank_slip': 'flBankSlip',
        'fl_card': 'flCard',
        'fl_credit_balance': 'flCreditBalance',
        'fl_register_required_address': 'flRegisterRequiredAddress',
        'fl_prioritize_registration_sale': 'flPrioritizeRegistrationSale',
        'age_from': 'ageFrom',
        'age_to': 'ageTo',
        'differentials': 'differentials',
        'membership_branches': 'membershipBranches'
    }

    def __init__(self, id_membership=None, membership=None, loyalty_installment=None, membership_type=None, loyalty_time=None, validity_description=None, reverse_installments_description=None, value_days_months_defined_validity=None, service_value=None, service_name=None, remark=None, membership_text=None, annuity_service_name=None, annuity_service_value=None, annuity_day=None, annuity_month=None, annuity_charge_type=None, annuity_installments_count=None, promotional_days_count=None, promo_day_month_type=None, installments_count=None, promotional_value_description=None, annuity_installments=None, id_service=None, name=None, fl_spotlight=None, order=None, type=None, charge_value=None, charge_value_description=None, total_value=None, tax_value=None, percentage_type=None, fl_charge_service_automatic_renew=None, fl_bank_slip=None, fl_card=None, fl_credit_balance=None, fl_register_required_address=None, fl_prioritize_registration_sale=None, age_from=None, age_to=None, differentials=None, membership_branches=None):  # noqa: E501
        """SalesItemViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_membership = None
        self._membership = None
        self._loyalty_installment = None
        self._membership_type = None
        self._loyalty_time = None
        self._validity_description = None
        self._reverse_installments_description = None
        self._value_days_months_defined_validity = None
        self._service_value = None
        self._service_name = None
        self._remark = None
        self._membership_text = None
        self._annuity_service_name = None
        self._annuity_service_value = None
        self._annuity_day = None
        self._annuity_month = None
        self._annuity_charge_type = None
        self._annuity_installments_count = None
        self._promotional_days_count = None
        self._promo_day_month_type = None
        self._installments_count = None
        self._promotional_value_description = None
        self._annuity_installments = None
        self._id_service = None
        self._name = None
        self._fl_spotlight = None
        self._order = None
        self._type = None
        self._charge_value = None
        self._charge_value_description = None
        self._total_value = None
        self._tax_value = None
        self._percentage_type = None
        self._fl_charge_service_automatic_renew = None
        self._fl_bank_slip = None
        self._fl_card = None
        self._fl_credit_balance = None
        self._fl_register_required_address = None
        self._fl_prioritize_registration_sale = None
        self._age_from = None
        self._age_to = None
        self._differentials = None
        self._membership_branches = None
        self.discriminator = None
        if id_membership is not None:
            self.id_membership = id_membership
        if membership is not None:
            self.membership = membership
        if loyalty_installment is not None:
            self.loyalty_installment = loyalty_installment
        if membership_type is not None:
            self.membership_type = membership_type
        if loyalty_time is not None:
            self.loyalty_time = loyalty_time
        if validity_description is not None:
            self.validity_description = validity_description
        if reverse_installments_description is not None:
            self.reverse_installments_description = reverse_installments_description
        if value_days_months_defined_validity is not None:
            self.value_days_months_defined_validity = value_days_months_defined_validity
        if service_value is not None:
            self.service_value = service_value
        if service_name is not None:
            self.service_name = service_name
        if remark is not None:
            self.remark = remark
        if membership_text is not None:
            self.membership_text = membership_text
        if annuity_service_name is not None:
            self.annuity_service_name = annuity_service_name
        if annuity_service_value is not None:
            self.annuity_service_value = annuity_service_value
        if annuity_day is not None:
            self.annuity_day = annuity_day
        if annuity_month is not None:
            self.annuity_month = annuity_month
        if annuity_charge_type is not None:
            self.annuity_charge_type = annuity_charge_type
        if annuity_installments_count is not None:
            self.annuity_installments_count = annuity_installments_count
        if promotional_days_count is not None:
            self.promotional_days_count = promotional_days_count
        if promo_day_month_type is not None:
            self.promo_day_month_type = promo_day_month_type
        if installments_count is not None:
            self.installments_count = installments_count
        if promotional_value_description is not None:
            self.promotional_value_description = promotional_value_description
        if annuity_installments is not None:
            self.annuity_installments = annuity_installments
        if id_service is not None:
            self.id_service = id_service
        if name is not None:
            self.name = name
        if fl_spotlight is not None:
            self.fl_spotlight = fl_spotlight
        if order is not None:
            self.order = order
        if type is not None:
            self.type = type
        if charge_value is not None:
            self.charge_value = charge_value
        if charge_value_description is not None:
            self.charge_value_description = charge_value_description
        if total_value is not None:
            self.total_value = total_value
        if tax_value is not None:
            self.tax_value = tax_value
        if percentage_type is not None:
            self.percentage_type = percentage_type
        if fl_charge_service_automatic_renew is not None:
            self.fl_charge_service_automatic_renew = fl_charge_service_automatic_renew
        if fl_bank_slip is not None:
            self.fl_bank_slip = fl_bank_slip
        if fl_card is not None:
            self.fl_card = fl_card
        if fl_credit_balance is not None:
            self.fl_credit_balance = fl_credit_balance
        if fl_register_required_address is not None:
            self.fl_register_required_address = fl_register_required_address
        if fl_prioritize_registration_sale is not None:
            self.fl_prioritize_registration_sale = fl_prioritize_registration_sale
        if age_from is not None:
            self.age_from = age_from
        if age_to is not None:
            self.age_to = age_to
        if differentials is not None:
            self.differentials = differentials
        if membership_branches is not None:
            self.membership_branches = membership_branches

    @property
    def id_membership(self):
        """Gets the id_membership of this SalesItemViewModel.  # noqa: E501


        :return: The id_membership of this SalesItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_membership

    @id_membership.setter
    def id_membership(self, id_membership):
        """Sets the id_membership of this SalesItemViewModel.


        :param id_membership: The id_membership of this SalesItemViewModel.  # noqa: E501
        :type: int
        """

        self._id_membership = id_membership

    @property
    def membership(self):
        """Gets the membership of this SalesItemViewModel.  # noqa: E501


        :return: The membership of this SalesItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this SalesItemViewModel.


        :param membership: The membership of this SalesItemViewModel.  # noqa: E501
        :type: str
        """

        self._membership = membership

    @property
    def loyalty_installment(self):
        """Gets the loyalty_installment of this SalesItemViewModel.  # noqa: E501


        :return: The loyalty_installment of this SalesItemViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._loyalty_installment

    @loyalty_installment.setter
    def loyalty_installment(self, loyalty_installment):
        """Sets the loyalty_installment of this SalesItemViewModel.


        :param loyalty_installment: The loyalty_installment of this SalesItemViewModel.  # noqa: E501
        :type: bool
        """

        self._loyalty_installment = loyalty_installment

    @property
    def membership_type(self):
        """Gets the membership_type of this SalesItemViewModel.  # noqa: E501


        :return: The membership_type of this SalesItemViewModel.  # noqa: E501
        :rtype: ETipoContrato
        """
        return self._membership_type

    @membership_type.setter
    def membership_type(self, membership_type):
        """Sets the membership_type of this SalesItemViewModel.


        :param membership_type: The membership_type of this SalesItemViewModel.  # noqa: E501
        :type: ETipoContrato
        """

        self._membership_type = membership_type

    @property
    def loyalty_time(self):
        """Gets the loyalty_time of this SalesItemViewModel.  # noqa: E501


        :return: The loyalty_time of this SalesItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._loyalty_time

    @loyalty_time.setter
    def loyalty_time(self, loyalty_time):
        """Sets the loyalty_time of this SalesItemViewModel.


        :param loyalty_time: The loyalty_time of this SalesItemViewModel.  # noqa: E501
        :type: int
        """

        self._loyalty_time = loyalty_time

    @property
    def validity_description(self):
        """Gets the validity_description of this SalesItemViewModel.  # noqa: E501


        :return: The validity_description of this SalesItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._validity_description

    @validity_description.setter
    def validity_description(self, validity_description):
        """Sets the validity_description of this SalesItemViewModel.


        :param validity_description: The validity_description of this SalesItemViewModel.  # noqa: E501
        :type: str
        """

        self._validity_description = validity_description

    @property
    def reverse_installments_description(self):
        """Gets the reverse_installments_description of this SalesItemViewModel.  # noqa: E501


        :return: The reverse_installments_description of this SalesItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._reverse_installments_description

    @reverse_installments_description.setter
    def reverse_installments_description(self, reverse_installments_description):
        """Sets the reverse_installments_description of this SalesItemViewModel.


        :param reverse_installments_description: The reverse_installments_description of this SalesItemViewModel.  # noqa: E501
        :type: str
        """

        self._reverse_installments_description = reverse_installments_description

    @property
    def value_days_months_defined_validity(self):
        """Gets the value_days_months_defined_validity of this SalesItemViewModel.  # noqa: E501


        :return: The value_days_months_defined_validity of this SalesItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._value_days_months_defined_validity

    @value_days_months_defined_validity.setter
    def value_days_months_defined_validity(self, value_days_months_defined_validity):
        """Sets the value_days_months_defined_validity of this SalesItemViewModel.


        :param value_days_months_defined_validity: The value_days_months_defined_validity of this SalesItemViewModel.  # noqa: E501
        :type: int
        """

        self._value_days_months_defined_validity = value_days_months_defined_validity

    @property
    def service_value(self):
        """Gets the service_value of this SalesItemViewModel.  # noqa: E501


        :return: The service_value of this SalesItemViewModel.  # noqa: E501
        :rtype: float
        """
        return self._service_value

    @service_value.setter
    def service_value(self, service_value):
        """Sets the service_value of this SalesItemViewModel.


        :param service_value: The service_value of this SalesItemViewModel.  # noqa: E501
        :type: float
        """

        self._service_value = service_value

    @property
    def service_name(self):
        """Gets the service_name of this SalesItemViewModel.  # noqa: E501


        :return: The service_name of this SalesItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this SalesItemViewModel.


        :param service_name: The service_name of this SalesItemViewModel.  # noqa: E501
        :type: str
        """

        self._service_name = service_name

    @property
    def remark(self):
        """Gets the remark of this SalesItemViewModel.  # noqa: E501


        :return: The remark of this SalesItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this SalesItemViewModel.


        :param remark: The remark of this SalesItemViewModel.  # noqa: E501
        :type: str
        """

        self._remark = remark

    @property
    def membership_text(self):
        """Gets the membership_text of this SalesItemViewModel.  # noqa: E501


        :return: The membership_text of this SalesItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._membership_text

    @membership_text.setter
    def membership_text(self, membership_text):
        """Sets the membership_text of this SalesItemViewModel.


        :param membership_text: The membership_text of this SalesItemViewModel.  # noqa: E501
        :type: str
        """

        self._membership_text = membership_text

    @property
    def annuity_service_name(self):
        """Gets the annuity_service_name of this SalesItemViewModel.  # noqa: E501


        :return: The annuity_service_name of this SalesItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._annuity_service_name

    @annuity_service_name.setter
    def annuity_service_name(self, annuity_service_name):
        """Sets the annuity_service_name of this SalesItemViewModel.


        :param annuity_service_name: The annuity_service_name of this SalesItemViewModel.  # noqa: E501
        :type: str
        """

        self._annuity_service_name = annuity_service_name

    @property
    def annuity_service_value(self):
        """Gets the annuity_service_value of this SalesItemViewModel.  # noqa: E501


        :return: The annuity_service_value of this SalesItemViewModel.  # noqa: E501
        :rtype: float
        """
        return self._annuity_service_value

    @annuity_service_value.setter
    def annuity_service_value(self, annuity_service_value):
        """Sets the annuity_service_value of this SalesItemViewModel.


        :param annuity_service_value: The annuity_service_value of this SalesItemViewModel.  # noqa: E501
        :type: float
        """

        self._annuity_service_value = annuity_service_value

    @property
    def annuity_day(self):
        """Gets the annuity_day of this SalesItemViewModel.  # noqa: E501


        :return: The annuity_day of this SalesItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._annuity_day

    @annuity_day.setter
    def annuity_day(self, annuity_day):
        """Sets the annuity_day of this SalesItemViewModel.


        :param annuity_day: The annuity_day of this SalesItemViewModel.  # noqa: E501
        :type: int
        """

        self._annuity_day = annuity_day

    @property
    def annuity_month(self):
        """Gets the annuity_month of this SalesItemViewModel.  # noqa: E501


        :return: The annuity_month of this SalesItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._annuity_month

    @annuity_month.setter
    def annuity_month(self, annuity_month):
        """Sets the annuity_month of this SalesItemViewModel.


        :param annuity_month: The annuity_month of this SalesItemViewModel.  # noqa: E501
        :type: int
        """

        self._annuity_month = annuity_month

    @property
    def annuity_charge_type(self):
        """Gets the annuity_charge_type of this SalesItemViewModel.  # noqa: E501


        :return: The annuity_charge_type of this SalesItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._annuity_charge_type

    @annuity_charge_type.setter
    def annuity_charge_type(self, annuity_charge_type):
        """Sets the annuity_charge_type of this SalesItemViewModel.


        :param annuity_charge_type: The annuity_charge_type of this SalesItemViewModel.  # noqa: E501
        :type: int
        """

        self._annuity_charge_type = annuity_charge_type

    @property
    def annuity_installments_count(self):
        """Gets the annuity_installments_count of this SalesItemViewModel.  # noqa: E501


        :return: The annuity_installments_count of this SalesItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._annuity_installments_count

    @annuity_installments_count.setter
    def annuity_installments_count(self, annuity_installments_count):
        """Sets the annuity_installments_count of this SalesItemViewModel.


        :param annuity_installments_count: The annuity_installments_count of this SalesItemViewModel.  # noqa: E501
        :type: int
        """

        self._annuity_installments_count = annuity_installments_count

    @property
    def promotional_days_count(self):
        """Gets the promotional_days_count of this SalesItemViewModel.  # noqa: E501


        :return: The promotional_days_count of this SalesItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._promotional_days_count

    @promotional_days_count.setter
    def promotional_days_count(self, promotional_days_count):
        """Sets the promotional_days_count of this SalesItemViewModel.


        :param promotional_days_count: The promotional_days_count of this SalesItemViewModel.  # noqa: E501
        :type: int
        """

        self._promotional_days_count = promotional_days_count

    @property
    def promo_day_month_type(self):
        """Gets the promo_day_month_type of this SalesItemViewModel.  # noqa: E501


        :return: The promo_day_month_type of this SalesItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._promo_day_month_type

    @promo_day_month_type.setter
    def promo_day_month_type(self, promo_day_month_type):
        """Sets the promo_day_month_type of this SalesItemViewModel.


        :param promo_day_month_type: The promo_day_month_type of this SalesItemViewModel.  # noqa: E501
        :type: int
        """

        self._promo_day_month_type = promo_day_month_type

    @property
    def installments_count(self):
        """Gets the installments_count of this SalesItemViewModel.  # noqa: E501


        :return: The installments_count of this SalesItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._installments_count

    @installments_count.setter
    def installments_count(self, installments_count):
        """Sets the installments_count of this SalesItemViewModel.


        :param installments_count: The installments_count of this SalesItemViewModel.  # noqa: E501
        :type: int
        """

        self._installments_count = installments_count

    @property
    def promotional_value_description(self):
        """Gets the promotional_value_description of this SalesItemViewModel.  # noqa: E501


        :return: The promotional_value_description of this SalesItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._promotional_value_description

    @promotional_value_description.setter
    def promotional_value_description(self, promotional_value_description):
        """Sets the promotional_value_description of this SalesItemViewModel.


        :param promotional_value_description: The promotional_value_description of this SalesItemViewModel.  # noqa: E501
        :type: str
        """

        self._promotional_value_description = promotional_value_description

    @property
    def annuity_installments(self):
        """Gets the annuity_installments of this SalesItemViewModel.  # noqa: E501


        :return: The annuity_installments of this SalesItemViewModel.  # noqa: E501
        :rtype: list[InstallmentViewModel]
        """
        return self._annuity_installments

    @annuity_installments.setter
    def annuity_installments(self, annuity_installments):
        """Sets the annuity_installments of this SalesItemViewModel.


        :param annuity_installments: The annuity_installments of this SalesItemViewModel.  # noqa: E501
        :type: list[InstallmentViewModel]
        """

        self._annuity_installments = annuity_installments

    @property
    def id_service(self):
        """Gets the id_service of this SalesItemViewModel.  # noqa: E501


        :return: The id_service of this SalesItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_service

    @id_service.setter
    def id_service(self, id_service):
        """Sets the id_service of this SalesItemViewModel.


        :param id_service: The id_service of this SalesItemViewModel.  # noqa: E501
        :type: int
        """

        self._id_service = id_service

    @property
    def name(self):
        """Gets the name of this SalesItemViewModel.  # noqa: E501


        :return: The name of this SalesItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SalesItemViewModel.


        :param name: The name of this SalesItemViewModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def fl_spotlight(self):
        """Gets the fl_spotlight of this SalesItemViewModel.  # noqa: E501


        :return: The fl_spotlight of this SalesItemViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_spotlight

    @fl_spotlight.setter
    def fl_spotlight(self, fl_spotlight):
        """Sets the fl_spotlight of this SalesItemViewModel.


        :param fl_spotlight: The fl_spotlight of this SalesItemViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_spotlight = fl_spotlight

    @property
    def order(self):
        """Gets the order of this SalesItemViewModel.  # noqa: E501


        :return: The order of this SalesItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this SalesItemViewModel.


        :param order: The order of this SalesItemViewModel.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def type(self):
        """Gets the type of this SalesItemViewModel.  # noqa: E501


        :return: The type of this SalesItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SalesItemViewModel.


        :param type: The type of this SalesItemViewModel.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def charge_value(self):
        """Gets the charge_value of this SalesItemViewModel.  # noqa: E501


        :return: The charge_value of this SalesItemViewModel.  # noqa: E501
        :rtype: float
        """
        return self._charge_value

    @charge_value.setter
    def charge_value(self, charge_value):
        """Sets the charge_value of this SalesItemViewModel.


        :param charge_value: The charge_value of this SalesItemViewModel.  # noqa: E501
        :type: float
        """

        self._charge_value = charge_value

    @property
    def charge_value_description(self):
        """Gets the charge_value_description of this SalesItemViewModel.  # noqa: E501


        :return: The charge_value_description of this SalesItemViewModel.  # noqa: E501
        :rtype: str
        """
        return self._charge_value_description

    @charge_value_description.setter
    def charge_value_description(self, charge_value_description):
        """Sets the charge_value_description of this SalesItemViewModel.


        :param charge_value_description: The charge_value_description of this SalesItemViewModel.  # noqa: E501
        :type: str
        """

        self._charge_value_description = charge_value_description

    @property
    def total_value(self):
        """Gets the total_value of this SalesItemViewModel.  # noqa: E501


        :return: The total_value of this SalesItemViewModel.  # noqa: E501
        :rtype: float
        """
        return self._total_value

    @total_value.setter
    def total_value(self, total_value):
        """Sets the total_value of this SalesItemViewModel.


        :param total_value: The total_value of this SalesItemViewModel.  # noqa: E501
        :type: float
        """

        self._total_value = total_value

    @property
    def tax_value(self):
        """Gets the tax_value of this SalesItemViewModel.  # noqa: E501


        :return: The tax_value of this SalesItemViewModel.  # noqa: E501
        :rtype: float
        """
        return self._tax_value

    @tax_value.setter
    def tax_value(self, tax_value):
        """Sets the tax_value of this SalesItemViewModel.


        :param tax_value: The tax_value of this SalesItemViewModel.  # noqa: E501
        :type: float
        """

        self._tax_value = tax_value

    @property
    def percentage_type(self):
        """Gets the percentage_type of this SalesItemViewModel.  # noqa: E501


        :return: The percentage_type of this SalesItemViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._percentage_type

    @percentage_type.setter
    def percentage_type(self, percentage_type):
        """Sets the percentage_type of this SalesItemViewModel.


        :param percentage_type: The percentage_type of this SalesItemViewModel.  # noqa: E501
        :type: bool
        """

        self._percentage_type = percentage_type

    @property
    def fl_charge_service_automatic_renew(self):
        """Gets the fl_charge_service_automatic_renew of this SalesItemViewModel.  # noqa: E501


        :return: The fl_charge_service_automatic_renew of this SalesItemViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_charge_service_automatic_renew

    @fl_charge_service_automatic_renew.setter
    def fl_charge_service_automatic_renew(self, fl_charge_service_automatic_renew):
        """Sets the fl_charge_service_automatic_renew of this SalesItemViewModel.


        :param fl_charge_service_automatic_renew: The fl_charge_service_automatic_renew of this SalesItemViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_charge_service_automatic_renew = fl_charge_service_automatic_renew

    @property
    def fl_bank_slip(self):
        """Gets the fl_bank_slip of this SalesItemViewModel.  # noqa: E501


        :return: The fl_bank_slip of this SalesItemViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_bank_slip

    @fl_bank_slip.setter
    def fl_bank_slip(self, fl_bank_slip):
        """Sets the fl_bank_slip of this SalesItemViewModel.


        :param fl_bank_slip: The fl_bank_slip of this SalesItemViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_bank_slip = fl_bank_slip

    @property
    def fl_card(self):
        """Gets the fl_card of this SalesItemViewModel.  # noqa: E501


        :return: The fl_card of this SalesItemViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_card

    @fl_card.setter
    def fl_card(self, fl_card):
        """Sets the fl_card of this SalesItemViewModel.


        :param fl_card: The fl_card of this SalesItemViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_card = fl_card

    @property
    def fl_credit_balance(self):
        """Gets the fl_credit_balance of this SalesItemViewModel.  # noqa: E501


        :return: The fl_credit_balance of this SalesItemViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_credit_balance

    @fl_credit_balance.setter
    def fl_credit_balance(self, fl_credit_balance):
        """Sets the fl_credit_balance of this SalesItemViewModel.


        :param fl_credit_balance: The fl_credit_balance of this SalesItemViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_credit_balance = fl_credit_balance

    @property
    def fl_register_required_address(self):
        """Gets the fl_register_required_address of this SalesItemViewModel.  # noqa: E501


        :return: The fl_register_required_address of this SalesItemViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_register_required_address

    @fl_register_required_address.setter
    def fl_register_required_address(self, fl_register_required_address):
        """Sets the fl_register_required_address of this SalesItemViewModel.


        :param fl_register_required_address: The fl_register_required_address of this SalesItemViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_register_required_address = fl_register_required_address

    @property
    def fl_prioritize_registration_sale(self):
        """Gets the fl_prioritize_registration_sale of this SalesItemViewModel.  # noqa: E501


        :return: The fl_prioritize_registration_sale of this SalesItemViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_prioritize_registration_sale

    @fl_prioritize_registration_sale.setter
    def fl_prioritize_registration_sale(self, fl_prioritize_registration_sale):
        """Sets the fl_prioritize_registration_sale of this SalesItemViewModel.


        :param fl_prioritize_registration_sale: The fl_prioritize_registration_sale of this SalesItemViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_prioritize_registration_sale = fl_prioritize_registration_sale

    @property
    def age_from(self):
        """Gets the age_from of this SalesItemViewModel.  # noqa: E501


        :return: The age_from of this SalesItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._age_from

    @age_from.setter
    def age_from(self, age_from):
        """Sets the age_from of this SalesItemViewModel.


        :param age_from: The age_from of this SalesItemViewModel.  # noqa: E501
        :type: int
        """

        self._age_from = age_from

    @property
    def age_to(self):
        """Gets the age_to of this SalesItemViewModel.  # noqa: E501


        :return: The age_to of this SalesItemViewModel.  # noqa: E501
        :rtype: int
        """
        return self._age_to

    @age_to.setter
    def age_to(self, age_to):
        """Sets the age_to of this SalesItemViewModel.


        :param age_to: The age_to of this SalesItemViewModel.  # noqa: E501
        :type: int
        """

        self._age_to = age_to

    @property
    def differentials(self):
        """Gets the differentials of this SalesItemViewModel.  # noqa: E501


        :return: The differentials of this SalesItemViewModel.  # noqa: E501
        :rtype: list[DifferentialsViewModel]
        """
        return self._differentials

    @differentials.setter
    def differentials(self, differentials):
        """Sets the differentials of this SalesItemViewModel.


        :param differentials: The differentials of this SalesItemViewModel.  # noqa: E501
        :type: list[DifferentialsViewModel]
        """

        self._differentials = differentials

    @property
    def membership_branches(self):
        """Gets the membership_branches of this SalesItemViewModel.  # noqa: E501


        :return: The membership_branches of this SalesItemViewModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._membership_branches

    @membership_branches.setter
    def membership_branches(self, membership_branches):
        """Sets the membership_branches of this SalesItemViewModel.


        :param membership_branches: The membership_branches of this SalesItemViewModel.  # noqa: E501
        :type: list[int]
        """

        self._membership_branches = membership_branches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalesItemViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalesItemViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
