# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnderecoEnotasRetorno(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pais': 'str',
        'uf': 'str',
        'cidade': 'str',
        'logradouro': 'str',
        'numero': 'str',
        'complemento': 'str',
        'bairro': 'str',
        'cep': 'str'
    }

    attribute_map = {
        'pais': 'pais',
        'uf': 'uf',
        'cidade': 'cidade',
        'logradouro': 'logradouro',
        'numero': 'numero',
        'complemento': 'complemento',
        'bairro': 'bairro',
        'cep': 'cep'
    }

    def __init__(self, pais=None, uf=None, cidade=None, logradouro=None, numero=None, complemento=None, bairro=None, cep=None):  # noqa: E501
        """EnderecoEnotasRetorno - a model defined in Swagger"""  # noqa: E501
        self._pais = None
        self._uf = None
        self._cidade = None
        self._logradouro = None
        self._numero = None
        self._complemento = None
        self._bairro = None
        self._cep = None
        self.discriminator = None
        if pais is not None:
            self.pais = pais
        if uf is not None:
            self.uf = uf
        if cidade is not None:
            self.cidade = cidade
        if logradouro is not None:
            self.logradouro = logradouro
        if numero is not None:
            self.numero = numero
        if complemento is not None:
            self.complemento = complemento
        if bairro is not None:
            self.bairro = bairro
        if cep is not None:
            self.cep = cep

    @property
    def pais(self):
        """Gets the pais of this EnderecoEnotasRetorno.  # noqa: E501


        :return: The pais of this EnderecoEnotasRetorno.  # noqa: E501
        :rtype: str
        """
        return self._pais

    @pais.setter
    def pais(self, pais):
        """Sets the pais of this EnderecoEnotasRetorno.


        :param pais: The pais of this EnderecoEnotasRetorno.  # noqa: E501
        :type: str
        """

        self._pais = pais

    @property
    def uf(self):
        """Gets the uf of this EnderecoEnotasRetorno.  # noqa: E501


        :return: The uf of this EnderecoEnotasRetorno.  # noqa: E501
        :rtype: str
        """
        return self._uf

    @uf.setter
    def uf(self, uf):
        """Sets the uf of this EnderecoEnotasRetorno.


        :param uf: The uf of this EnderecoEnotasRetorno.  # noqa: E501
        :type: str
        """

        self._uf = uf

    @property
    def cidade(self):
        """Gets the cidade of this EnderecoEnotasRetorno.  # noqa: E501


        :return: The cidade of this EnderecoEnotasRetorno.  # noqa: E501
        :rtype: str
        """
        return self._cidade

    @cidade.setter
    def cidade(self, cidade):
        """Sets the cidade of this EnderecoEnotasRetorno.


        :param cidade: The cidade of this EnderecoEnotasRetorno.  # noqa: E501
        :type: str
        """

        self._cidade = cidade

    @property
    def logradouro(self):
        """Gets the logradouro of this EnderecoEnotasRetorno.  # noqa: E501


        :return: The logradouro of this EnderecoEnotasRetorno.  # noqa: E501
        :rtype: str
        """
        return self._logradouro

    @logradouro.setter
    def logradouro(self, logradouro):
        """Sets the logradouro of this EnderecoEnotasRetorno.


        :param logradouro: The logradouro of this EnderecoEnotasRetorno.  # noqa: E501
        :type: str
        """

        self._logradouro = logradouro

    @property
    def numero(self):
        """Gets the numero of this EnderecoEnotasRetorno.  # noqa: E501


        :return: The numero of this EnderecoEnotasRetorno.  # noqa: E501
        :rtype: str
        """
        return self._numero

    @numero.setter
    def numero(self, numero):
        """Sets the numero of this EnderecoEnotasRetorno.


        :param numero: The numero of this EnderecoEnotasRetorno.  # noqa: E501
        :type: str
        """

        self._numero = numero

    @property
    def complemento(self):
        """Gets the complemento of this EnderecoEnotasRetorno.  # noqa: E501


        :return: The complemento of this EnderecoEnotasRetorno.  # noqa: E501
        :rtype: str
        """
        return self._complemento

    @complemento.setter
    def complemento(self, complemento):
        """Sets the complemento of this EnderecoEnotasRetorno.


        :param complemento: The complemento of this EnderecoEnotasRetorno.  # noqa: E501
        :type: str
        """

        self._complemento = complemento

    @property
    def bairro(self):
        """Gets the bairro of this EnderecoEnotasRetorno.  # noqa: E501


        :return: The bairro of this EnderecoEnotasRetorno.  # noqa: E501
        :rtype: str
        """
        return self._bairro

    @bairro.setter
    def bairro(self, bairro):
        """Sets the bairro of this EnderecoEnotasRetorno.


        :param bairro: The bairro of this EnderecoEnotasRetorno.  # noqa: E501
        :type: str
        """

        self._bairro = bairro

    @property
    def cep(self):
        """Gets the cep of this EnderecoEnotasRetorno.  # noqa: E501


        :return: The cep of this EnderecoEnotasRetorno.  # noqa: E501
        :rtype: str
        """
        return self._cep

    @cep.setter
    def cep(self, cep):
        """Sets the cep of this EnderecoEnotasRetorno.


        :param cep: The cep of this EnderecoEnotasRetorno.  # noqa: E501
        :type: str
        """

        self._cep = cep

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnderecoEnotasRetorno, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnderecoEnotasRetorno):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
