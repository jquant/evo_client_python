# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmpresasFiliaisGatewayViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tipo_gateway': 'ETipoGateway',
        'dados_gateway': 'object',
        'exibir_tipo_cartao': 'bool',
        'fl_tokeniza_backend': 'bool'
    }

    attribute_map = {
        'tipo_gateway': 'tipoGateway',
        'dados_gateway': 'dadosGateway',
        'exibir_tipo_cartao': 'exibirTipoCartao',
        'fl_tokeniza_backend': 'flTokenizaBackend'
    }

    def __init__(self, tipo_gateway=None, dados_gateway=None, exibir_tipo_cartao=None, fl_tokeniza_backend=None):  # noqa: E501
        """EmpresasFiliaisGatewayViewModel - a model defined in Swagger"""  # noqa: E501
        self._tipo_gateway = None
        self._dados_gateway = None
        self._exibir_tipo_cartao = None
        self._fl_tokeniza_backend = None
        self.discriminator = None
        if tipo_gateway is not None:
            self.tipo_gateway = tipo_gateway
        if dados_gateway is not None:
            self.dados_gateway = dados_gateway
        if exibir_tipo_cartao is not None:
            self.exibir_tipo_cartao = exibir_tipo_cartao
        if fl_tokeniza_backend is not None:
            self.fl_tokeniza_backend = fl_tokeniza_backend

    @property
    def tipo_gateway(self):
        """Gets the tipo_gateway of this EmpresasFiliaisGatewayViewModel.  # noqa: E501


        :return: The tipo_gateway of this EmpresasFiliaisGatewayViewModel.  # noqa: E501
        :rtype: ETipoGateway
        """
        return self._tipo_gateway

    @tipo_gateway.setter
    def tipo_gateway(self, tipo_gateway):
        """Sets the tipo_gateway of this EmpresasFiliaisGatewayViewModel.


        :param tipo_gateway: The tipo_gateway of this EmpresasFiliaisGatewayViewModel.  # noqa: E501
        :type: ETipoGateway
        """

        self._tipo_gateway = tipo_gateway

    @property
    def dados_gateway(self):
        """Gets the dados_gateway of this EmpresasFiliaisGatewayViewModel.  # noqa: E501


        :return: The dados_gateway of this EmpresasFiliaisGatewayViewModel.  # noqa: E501
        :rtype: object
        """
        return self._dados_gateway

    @dados_gateway.setter
    def dados_gateway(self, dados_gateway):
        """Sets the dados_gateway of this EmpresasFiliaisGatewayViewModel.


        :param dados_gateway: The dados_gateway of this EmpresasFiliaisGatewayViewModel.  # noqa: E501
        :type: object
        """

        self._dados_gateway = dados_gateway

    @property
    def exibir_tipo_cartao(self):
        """Gets the exibir_tipo_cartao of this EmpresasFiliaisGatewayViewModel.  # noqa: E501


        :return: The exibir_tipo_cartao of this EmpresasFiliaisGatewayViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._exibir_tipo_cartao

    @exibir_tipo_cartao.setter
    def exibir_tipo_cartao(self, exibir_tipo_cartao):
        """Sets the exibir_tipo_cartao of this EmpresasFiliaisGatewayViewModel.


        :param exibir_tipo_cartao: The exibir_tipo_cartao of this EmpresasFiliaisGatewayViewModel.  # noqa: E501
        :type: bool
        """

        self._exibir_tipo_cartao = exibir_tipo_cartao

    @property
    def fl_tokeniza_backend(self):
        """Gets the fl_tokeniza_backend of this EmpresasFiliaisGatewayViewModel.  # noqa: E501


        :return: The fl_tokeniza_backend of this EmpresasFiliaisGatewayViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_tokeniza_backend

    @fl_tokeniza_backend.setter
    def fl_tokeniza_backend(self, fl_tokeniza_backend):
        """Sets the fl_tokeniza_backend of this EmpresasFiliaisGatewayViewModel.


        :param fl_tokeniza_backend: The fl_tokeniza_backend of this EmpresasFiliaisGatewayViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_tokeniza_backend = fl_tokeniza_backend

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmpresasFiliaisGatewayViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmpresasFiliaisGatewayViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
