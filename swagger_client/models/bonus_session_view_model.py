# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BonusSessionViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_session': 'int',
        'expiration_date': 'datetime',
        'fl_bonus_session': 'bool'
    }

    attribute_map = {
        'id_session': 'idSession',
        'expiration_date': 'expirationDate',
        'fl_bonus_session': 'flBonusSession'
    }

    def __init__(self, id_session=None, expiration_date=None, fl_bonus_session=None):  # noqa: E501
        """BonusSessionViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_session = None
        self._expiration_date = None
        self._fl_bonus_session = None
        self.discriminator = None
        if id_session is not None:
            self.id_session = id_session
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if fl_bonus_session is not None:
            self.fl_bonus_session = fl_bonus_session

    @property
    def id_session(self):
        """Gets the id_session of this BonusSessionViewModel.  # noqa: E501


        :return: The id_session of this BonusSessionViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_session

    @id_session.setter
    def id_session(self, id_session):
        """Sets the id_session of this BonusSessionViewModel.


        :param id_session: The id_session of this BonusSessionViewModel.  # noqa: E501
        :type: int
        """

        self._id_session = id_session

    @property
    def expiration_date(self):
        """Gets the expiration_date of this BonusSessionViewModel.  # noqa: E501


        :return: The expiration_date of this BonusSessionViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this BonusSessionViewModel.


        :param expiration_date: The expiration_date of this BonusSessionViewModel.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def fl_bonus_session(self):
        """Gets the fl_bonus_session of this BonusSessionViewModel.  # noqa: E501


        :return: The fl_bonus_session of this BonusSessionViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_bonus_session

    @fl_bonus_session.setter
    def fl_bonus_session(self, fl_bonus_session):
        """Sets the fl_bonus_session of this BonusSessionViewModel.


        :param fl_bonus_session: The fl_bonus_session of this BonusSessionViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_bonus_session = fl_bonus_session

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BonusSessionViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BonusSessionViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
