# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContratoEntradasApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entries_quantity': 'int',
        'id_entries_type': 'int',
        'entries_type_description': 'str'
    }

    attribute_map = {
        'entries_quantity': 'entriesQuantity',
        'id_entries_type': 'idEntriesType',
        'entries_type_description': 'entriesTypeDescription'
    }

    def __init__(self, entries_quantity=None, id_entries_type=None, entries_type_description=None):  # noqa: E501
        """ContratoEntradasApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._entries_quantity = None
        self._id_entries_type = None
        self._entries_type_description = None
        self.discriminator = None
        if entries_quantity is not None:
            self.entries_quantity = entries_quantity
        if id_entries_type is not None:
            self.id_entries_type = id_entries_type
        if entries_type_description is not None:
            self.entries_type_description = entries_type_description

    @property
    def entries_quantity(self):
        """Gets the entries_quantity of this ContratoEntradasApiViewModel.  # noqa: E501


        :return: The entries_quantity of this ContratoEntradasApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._entries_quantity

    @entries_quantity.setter
    def entries_quantity(self, entries_quantity):
        """Sets the entries_quantity of this ContratoEntradasApiViewModel.


        :param entries_quantity: The entries_quantity of this ContratoEntradasApiViewModel.  # noqa: E501
        :type: int
        """

        self._entries_quantity = entries_quantity

    @property
    def id_entries_type(self):
        """Gets the id_entries_type of this ContratoEntradasApiViewModel.  # noqa: E501


        :return: The id_entries_type of this ContratoEntradasApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_entries_type

    @id_entries_type.setter
    def id_entries_type(self, id_entries_type):
        """Sets the id_entries_type of this ContratoEntradasApiViewModel.


        :param id_entries_type: The id_entries_type of this ContratoEntradasApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_entries_type = id_entries_type

    @property
    def entries_type_description(self):
        """Gets the entries_type_description of this ContratoEntradasApiViewModel.  # noqa: E501


        :return: The entries_type_description of this ContratoEntradasApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._entries_type_description

    @entries_type_description.setter
    def entries_type_description(self, entries_type_description):
        """Sets the entries_type_description of this ContratoEntradasApiViewModel.


        :param entries_type_description: The entries_type_description of this ContratoEntradasApiViewModel.  # noqa: E501
        :type: str
        """

        self._entries_type_description = entries_type_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContratoEntradasApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContratoEntradasApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
