# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MemberDataViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cellphone': 'TelefoneApiViewModel',
        'email': 'TelefoneApiViewModel',
        'gender': 'str',
        'document': 'str',
        'zip_code': 'str',
        'address': 'str',
        'number': 'str',
        'complement': 'str',
        'neighborhood': 'str',
        'city': 'str',
        'id_state': 'int',
        'birth_day': 'datetime'
    }

    attribute_map = {
        'cellphone': 'cellphone',
        'email': 'email',
        'gender': 'gender',
        'document': 'document',
        'zip_code': 'zipCode',
        'address': 'address',
        'number': 'number',
        'complement': 'complement',
        'neighborhood': 'neighborhood',
        'city': 'city',
        'id_state': 'idState',
        'birth_day': 'birthDay'
    }

    def __init__(self, cellphone=None, email=None, gender=None, document=None, zip_code=None, address=None, number=None, complement=None, neighborhood=None, city=None, id_state=None, birth_day=None):  # noqa: E501
        """MemberDataViewModel - a model defined in Swagger"""  # noqa: E501
        self._cellphone = None
        self._email = None
        self._gender = None
        self._document = None
        self._zip_code = None
        self._address = None
        self._number = None
        self._complement = None
        self._neighborhood = None
        self._city = None
        self._id_state = None
        self._birth_day = None
        self.discriminator = None
        if cellphone is not None:
            self.cellphone = cellphone
        if email is not None:
            self.email = email
        if gender is not None:
            self.gender = gender
        if document is not None:
            self.document = document
        if zip_code is not None:
            self.zip_code = zip_code
        if address is not None:
            self.address = address
        if number is not None:
            self.number = number
        if complement is not None:
            self.complement = complement
        if neighborhood is not None:
            self.neighborhood = neighborhood
        if city is not None:
            self.city = city
        if id_state is not None:
            self.id_state = id_state
        if birth_day is not None:
            self.birth_day = birth_day

    @property
    def cellphone(self):
        """Gets the cellphone of this MemberDataViewModel.  # noqa: E501


        :return: The cellphone of this MemberDataViewModel.  # noqa: E501
        :rtype: TelefoneApiViewModel
        """
        return self._cellphone

    @cellphone.setter
    def cellphone(self, cellphone):
        """Sets the cellphone of this MemberDataViewModel.


        :param cellphone: The cellphone of this MemberDataViewModel.  # noqa: E501
        :type: TelefoneApiViewModel
        """

        self._cellphone = cellphone

    @property
    def email(self):
        """Gets the email of this MemberDataViewModel.  # noqa: E501


        :return: The email of this MemberDataViewModel.  # noqa: E501
        :rtype: TelefoneApiViewModel
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this MemberDataViewModel.


        :param email: The email of this MemberDataViewModel.  # noqa: E501
        :type: TelefoneApiViewModel
        """

        self._email = email

    @property
    def gender(self):
        """Gets the gender of this MemberDataViewModel.  # noqa: E501


        :return: The gender of this MemberDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this MemberDataViewModel.


        :param gender: The gender of this MemberDataViewModel.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def document(self):
        """Gets the document of this MemberDataViewModel.  # noqa: E501


        :return: The document of this MemberDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this MemberDataViewModel.


        :param document: The document of this MemberDataViewModel.  # noqa: E501
        :type: str
        """

        self._document = document

    @property
    def zip_code(self):
        """Gets the zip_code of this MemberDataViewModel.  # noqa: E501


        :return: The zip_code of this MemberDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this MemberDataViewModel.


        :param zip_code: The zip_code of this MemberDataViewModel.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def address(self):
        """Gets the address of this MemberDataViewModel.  # noqa: E501


        :return: The address of this MemberDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this MemberDataViewModel.


        :param address: The address of this MemberDataViewModel.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def number(self):
        """Gets the number of this MemberDataViewModel.  # noqa: E501


        :return: The number of this MemberDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this MemberDataViewModel.


        :param number: The number of this MemberDataViewModel.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def complement(self):
        """Gets the complement of this MemberDataViewModel.  # noqa: E501


        :return: The complement of this MemberDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._complement

    @complement.setter
    def complement(self, complement):
        """Sets the complement of this MemberDataViewModel.


        :param complement: The complement of this MemberDataViewModel.  # noqa: E501
        :type: str
        """

        self._complement = complement

    @property
    def neighborhood(self):
        """Gets the neighborhood of this MemberDataViewModel.  # noqa: E501


        :return: The neighborhood of this MemberDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._neighborhood

    @neighborhood.setter
    def neighborhood(self, neighborhood):
        """Sets the neighborhood of this MemberDataViewModel.


        :param neighborhood: The neighborhood of this MemberDataViewModel.  # noqa: E501
        :type: str
        """

        self._neighborhood = neighborhood

    @property
    def city(self):
        """Gets the city of this MemberDataViewModel.  # noqa: E501


        :return: The city of this MemberDataViewModel.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this MemberDataViewModel.


        :param city: The city of this MemberDataViewModel.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def id_state(self):
        """Gets the id_state of this MemberDataViewModel.  # noqa: E501


        :return: The id_state of this MemberDataViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_state

    @id_state.setter
    def id_state(self, id_state):
        """Sets the id_state of this MemberDataViewModel.


        :param id_state: The id_state of this MemberDataViewModel.  # noqa: E501
        :type: int
        """

        self._id_state = id_state

    @property
    def birth_day(self):
        """Gets the birth_day of this MemberDataViewModel.  # noqa: E501


        :return: The birth_day of this MemberDataViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._birth_day

    @birth_day.setter
    def birth_day(self, birth_day):
        """Sets the birth_day of this MemberDataViewModel.


        :param birth_day: The birth_day of this MemberDataViewModel.  # noqa: E501
        :type: datetime
        """

        self._birth_day = birth_day

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemberDataViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberDataViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
