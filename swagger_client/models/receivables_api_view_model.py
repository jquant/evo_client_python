# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReceivablesApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_receivable': 'int',
        'description': 'str',
        'registration_date': 'datetime',
        'due_date': 'datetime',
        'receiving_date': 'datetime',
        'competence_date': 'datetime',
        'cancellation_date': 'datetime',
        'ammount': 'float',
        'ammount_paid': 'float',
        'status': 'ReceivablesApiSubTypesViewModel',
        'current_installment': 'int',
        'total_installments': 'int',
        'authorization': 'str',
        'payer_name': 'str',
        'id_member_payer': 'int',
        'id_prospect_payer': 'int',
        'id_branch_member': 'int',
        'id_sale': 'int',
        'bank_account': 'ReceivablesApiSubTypesViewModel',
        'payment_type': 'ReceivablesApiSubTypesViewModel',
        'invoice_details': 'list[ReceivablesInvoiceApiViewModel]',
        'fees': 'float',
        'conciliated': 'bool',
        'log_tef': 'LogTefApiViewModel',
        'tid': 'str',
        'nsu': 'str',
        'update_date': 'datetime',
        'charge_date': 'datetime',
        'id_receivable_from': 'int',
        'card_acquirer': 'str',
        'card_flag': 'str',
        'credit_details': 'list[ReceivablesCreditDetails]',
        'cancellation_description': 'str',
        'source': 'str',
        'sale_date': 'datetime'
    }

    attribute_map = {
        'id_receivable': 'idReceivable',
        'description': 'description',
        'registration_date': 'registrationDate',
        'due_date': 'dueDate',
        'receiving_date': 'receivingDate',
        'competence_date': 'competenceDate',
        'cancellation_date': 'cancellationDate',
        'ammount': 'ammount',
        'ammount_paid': 'ammountPaid',
        'status': 'status',
        'current_installment': 'currentInstallment',
        'total_installments': 'totalInstallments',
        'authorization': 'authorization',
        'payer_name': 'payerName',
        'id_member_payer': 'idMemberPayer',
        'id_prospect_payer': 'idProspectPayer',
        'id_branch_member': 'idBranchMember',
        'id_sale': 'idSale',
        'bank_account': 'bankAccount',
        'payment_type': 'paymentType',
        'invoice_details': 'invoiceDetails',
        'fees': 'fees',
        'conciliated': 'conciliated',
        'log_tef': 'logTef',
        'tid': 'tid',
        'nsu': 'nsu',
        'update_date': 'updateDate',
        'charge_date': 'chargeDate',
        'id_receivable_from': 'idReceivableFrom',
        'card_acquirer': 'cardAcquirer',
        'card_flag': 'cardFlag',
        'credit_details': 'creditDetails',
        'cancellation_description': 'cancellationDescription',
        'source': 'source',
        'sale_date': 'saleDate'
    }

    def __init__(self, id_receivable=None, description=None, registration_date=None, due_date=None, receiving_date=None, competence_date=None, cancellation_date=None, ammount=None, ammount_paid=None, status=None, current_installment=None, total_installments=None, authorization=None, payer_name=None, id_member_payer=None, id_prospect_payer=None, id_branch_member=None, id_sale=None, bank_account=None, payment_type=None, invoice_details=None, fees=None, conciliated=None, log_tef=None, tid=None, nsu=None, update_date=None, charge_date=None, id_receivable_from=None, card_acquirer=None, card_flag=None, credit_details=None, cancellation_description=None, source=None, sale_date=None):  # noqa: E501
        """ReceivablesApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_receivable = None
        self._description = None
        self._registration_date = None
        self._due_date = None
        self._receiving_date = None
        self._competence_date = None
        self._cancellation_date = None
        self._ammount = None
        self._ammount_paid = None
        self._status = None
        self._current_installment = None
        self._total_installments = None
        self._authorization = None
        self._payer_name = None
        self._id_member_payer = None
        self._id_prospect_payer = None
        self._id_branch_member = None
        self._id_sale = None
        self._bank_account = None
        self._payment_type = None
        self._invoice_details = None
        self._fees = None
        self._conciliated = None
        self._log_tef = None
        self._tid = None
        self._nsu = None
        self._update_date = None
        self._charge_date = None
        self._id_receivable_from = None
        self._card_acquirer = None
        self._card_flag = None
        self._credit_details = None
        self._cancellation_description = None
        self._source = None
        self._sale_date = None
        self.discriminator = None
        if id_receivable is not None:
            self.id_receivable = id_receivable
        if description is not None:
            self.description = description
        if registration_date is not None:
            self.registration_date = registration_date
        if due_date is not None:
            self.due_date = due_date
        if receiving_date is not None:
            self.receiving_date = receiving_date
        if competence_date is not None:
            self.competence_date = competence_date
        if cancellation_date is not None:
            self.cancellation_date = cancellation_date
        if ammount is not None:
            self.ammount = ammount
        if ammount_paid is not None:
            self.ammount_paid = ammount_paid
        if status is not None:
            self.status = status
        if current_installment is not None:
            self.current_installment = current_installment
        if total_installments is not None:
            self.total_installments = total_installments
        if authorization is not None:
            self.authorization = authorization
        if payer_name is not None:
            self.payer_name = payer_name
        if id_member_payer is not None:
            self.id_member_payer = id_member_payer
        if id_prospect_payer is not None:
            self.id_prospect_payer = id_prospect_payer
        if id_branch_member is not None:
            self.id_branch_member = id_branch_member
        if id_sale is not None:
            self.id_sale = id_sale
        if bank_account is not None:
            self.bank_account = bank_account
        if payment_type is not None:
            self.payment_type = payment_type
        if invoice_details is not None:
            self.invoice_details = invoice_details
        if fees is not None:
            self.fees = fees
        if conciliated is not None:
            self.conciliated = conciliated
        if log_tef is not None:
            self.log_tef = log_tef
        if tid is not None:
            self.tid = tid
        if nsu is not None:
            self.nsu = nsu
        if update_date is not None:
            self.update_date = update_date
        if charge_date is not None:
            self.charge_date = charge_date
        if id_receivable_from is not None:
            self.id_receivable_from = id_receivable_from
        if card_acquirer is not None:
            self.card_acquirer = card_acquirer
        if card_flag is not None:
            self.card_flag = card_flag
        if credit_details is not None:
            self.credit_details = credit_details
        if cancellation_description is not None:
            self.cancellation_description = cancellation_description
        if source is not None:
            self.source = source
        if sale_date is not None:
            self.sale_date = sale_date

    @property
    def id_receivable(self):
        """Gets the id_receivable of this ReceivablesApiViewModel.  # noqa: E501


        :return: The id_receivable of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_receivable

    @id_receivable.setter
    def id_receivable(self, id_receivable):
        """Sets the id_receivable of this ReceivablesApiViewModel.


        :param id_receivable: The id_receivable of this ReceivablesApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_receivable = id_receivable

    @property
    def description(self):
        """Gets the description of this ReceivablesApiViewModel.  # noqa: E501


        :return: The description of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReceivablesApiViewModel.


        :param description: The description of this ReceivablesApiViewModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def registration_date(self):
        """Gets the registration_date of this ReceivablesApiViewModel.  # noqa: E501


        :return: The registration_date of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this ReceivablesApiViewModel.


        :param registration_date: The registration_date of this ReceivablesApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._registration_date = registration_date

    @property
    def due_date(self):
        """Gets the due_date of this ReceivablesApiViewModel.  # noqa: E501


        :return: The due_date of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this ReceivablesApiViewModel.


        :param due_date: The due_date of this ReceivablesApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def receiving_date(self):
        """Gets the receiving_date of this ReceivablesApiViewModel.  # noqa: E501


        :return: The receiving_date of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._receiving_date

    @receiving_date.setter
    def receiving_date(self, receiving_date):
        """Sets the receiving_date of this ReceivablesApiViewModel.


        :param receiving_date: The receiving_date of this ReceivablesApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._receiving_date = receiving_date

    @property
    def competence_date(self):
        """Gets the competence_date of this ReceivablesApiViewModel.  # noqa: E501


        :return: The competence_date of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._competence_date

    @competence_date.setter
    def competence_date(self, competence_date):
        """Sets the competence_date of this ReceivablesApiViewModel.


        :param competence_date: The competence_date of this ReceivablesApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._competence_date = competence_date

    @property
    def cancellation_date(self):
        """Gets the cancellation_date of this ReceivablesApiViewModel.  # noqa: E501


        :return: The cancellation_date of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._cancellation_date

    @cancellation_date.setter
    def cancellation_date(self, cancellation_date):
        """Sets the cancellation_date of this ReceivablesApiViewModel.


        :param cancellation_date: The cancellation_date of this ReceivablesApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._cancellation_date = cancellation_date

    @property
    def ammount(self):
        """Gets the ammount of this ReceivablesApiViewModel.  # noqa: E501


        :return: The ammount of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: float
        """
        return self._ammount

    @ammount.setter
    def ammount(self, ammount):
        """Sets the ammount of this ReceivablesApiViewModel.


        :param ammount: The ammount of this ReceivablesApiViewModel.  # noqa: E501
        :type: float
        """

        self._ammount = ammount

    @property
    def ammount_paid(self):
        """Gets the ammount_paid of this ReceivablesApiViewModel.  # noqa: E501


        :return: The ammount_paid of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: float
        """
        return self._ammount_paid

    @ammount_paid.setter
    def ammount_paid(self, ammount_paid):
        """Sets the ammount_paid of this ReceivablesApiViewModel.


        :param ammount_paid: The ammount_paid of this ReceivablesApiViewModel.  # noqa: E501
        :type: float
        """

        self._ammount_paid = ammount_paid

    @property
    def status(self):
        """Gets the status of this ReceivablesApiViewModel.  # noqa: E501


        :return: The status of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: ReceivablesApiSubTypesViewModel
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReceivablesApiViewModel.


        :param status: The status of this ReceivablesApiViewModel.  # noqa: E501
        :type: ReceivablesApiSubTypesViewModel
        """

        self._status = status

    @property
    def current_installment(self):
        """Gets the current_installment of this ReceivablesApiViewModel.  # noqa: E501


        :return: The current_installment of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._current_installment

    @current_installment.setter
    def current_installment(self, current_installment):
        """Sets the current_installment of this ReceivablesApiViewModel.


        :param current_installment: The current_installment of this ReceivablesApiViewModel.  # noqa: E501
        :type: int
        """

        self._current_installment = current_installment

    @property
    def total_installments(self):
        """Gets the total_installments of this ReceivablesApiViewModel.  # noqa: E501


        :return: The total_installments of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._total_installments

    @total_installments.setter
    def total_installments(self, total_installments):
        """Sets the total_installments of this ReceivablesApiViewModel.


        :param total_installments: The total_installments of this ReceivablesApiViewModel.  # noqa: E501
        :type: int
        """

        self._total_installments = total_installments

    @property
    def authorization(self):
        """Gets the authorization of this ReceivablesApiViewModel.  # noqa: E501


        :return: The authorization of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this ReceivablesApiViewModel.


        :param authorization: The authorization of this ReceivablesApiViewModel.  # noqa: E501
        :type: str
        """

        self._authorization = authorization

    @property
    def payer_name(self):
        """Gets the payer_name of this ReceivablesApiViewModel.  # noqa: E501


        :return: The payer_name of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._payer_name

    @payer_name.setter
    def payer_name(self, payer_name):
        """Sets the payer_name of this ReceivablesApiViewModel.


        :param payer_name: The payer_name of this ReceivablesApiViewModel.  # noqa: E501
        :type: str
        """

        self._payer_name = payer_name

    @property
    def id_member_payer(self):
        """Gets the id_member_payer of this ReceivablesApiViewModel.  # noqa: E501


        :return: The id_member_payer of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_member_payer

    @id_member_payer.setter
    def id_member_payer(self, id_member_payer):
        """Sets the id_member_payer of this ReceivablesApiViewModel.


        :param id_member_payer: The id_member_payer of this ReceivablesApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_member_payer = id_member_payer

    @property
    def id_prospect_payer(self):
        """Gets the id_prospect_payer of this ReceivablesApiViewModel.  # noqa: E501


        :return: The id_prospect_payer of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_prospect_payer

    @id_prospect_payer.setter
    def id_prospect_payer(self, id_prospect_payer):
        """Sets the id_prospect_payer of this ReceivablesApiViewModel.


        :param id_prospect_payer: The id_prospect_payer of this ReceivablesApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_prospect_payer = id_prospect_payer

    @property
    def id_branch_member(self):
        """Gets the id_branch_member of this ReceivablesApiViewModel.  # noqa: E501


        :return: The id_branch_member of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_branch_member

    @id_branch_member.setter
    def id_branch_member(self, id_branch_member):
        """Sets the id_branch_member of this ReceivablesApiViewModel.


        :param id_branch_member: The id_branch_member of this ReceivablesApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_branch_member = id_branch_member

    @property
    def id_sale(self):
        """Gets the id_sale of this ReceivablesApiViewModel.  # noqa: E501


        :return: The id_sale of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_sale

    @id_sale.setter
    def id_sale(self, id_sale):
        """Sets the id_sale of this ReceivablesApiViewModel.


        :param id_sale: The id_sale of this ReceivablesApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_sale = id_sale

    @property
    def bank_account(self):
        """Gets the bank_account of this ReceivablesApiViewModel.  # noqa: E501


        :return: The bank_account of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: ReceivablesApiSubTypesViewModel
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this ReceivablesApiViewModel.


        :param bank_account: The bank_account of this ReceivablesApiViewModel.  # noqa: E501
        :type: ReceivablesApiSubTypesViewModel
        """

        self._bank_account = bank_account

    @property
    def payment_type(self):
        """Gets the payment_type of this ReceivablesApiViewModel.  # noqa: E501


        :return: The payment_type of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: ReceivablesApiSubTypesViewModel
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this ReceivablesApiViewModel.


        :param payment_type: The payment_type of this ReceivablesApiViewModel.  # noqa: E501
        :type: ReceivablesApiSubTypesViewModel
        """

        self._payment_type = payment_type

    @property
    def invoice_details(self):
        """Gets the invoice_details of this ReceivablesApiViewModel.  # noqa: E501


        :return: The invoice_details of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: list[ReceivablesInvoiceApiViewModel]
        """
        return self._invoice_details

    @invoice_details.setter
    def invoice_details(self, invoice_details):
        """Sets the invoice_details of this ReceivablesApiViewModel.


        :param invoice_details: The invoice_details of this ReceivablesApiViewModel.  # noqa: E501
        :type: list[ReceivablesInvoiceApiViewModel]
        """

        self._invoice_details = invoice_details

    @property
    def fees(self):
        """Gets the fees of this ReceivablesApiViewModel.  # noqa: E501


        :return: The fees of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: float
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this ReceivablesApiViewModel.


        :param fees: The fees of this ReceivablesApiViewModel.  # noqa: E501
        :type: float
        """

        self._fees = fees

    @property
    def conciliated(self):
        """Gets the conciliated of this ReceivablesApiViewModel.  # noqa: E501


        :return: The conciliated of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._conciliated

    @conciliated.setter
    def conciliated(self, conciliated):
        """Sets the conciliated of this ReceivablesApiViewModel.


        :param conciliated: The conciliated of this ReceivablesApiViewModel.  # noqa: E501
        :type: bool
        """

        self._conciliated = conciliated

    @property
    def log_tef(self):
        """Gets the log_tef of this ReceivablesApiViewModel.  # noqa: E501


        :return: The log_tef of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: LogTefApiViewModel
        """
        return self._log_tef

    @log_tef.setter
    def log_tef(self, log_tef):
        """Sets the log_tef of this ReceivablesApiViewModel.


        :param log_tef: The log_tef of this ReceivablesApiViewModel.  # noqa: E501
        :type: LogTefApiViewModel
        """

        self._log_tef = log_tef

    @property
    def tid(self):
        """Gets the tid of this ReceivablesApiViewModel.  # noqa: E501


        :return: The tid of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._tid

    @tid.setter
    def tid(self, tid):
        """Sets the tid of this ReceivablesApiViewModel.


        :param tid: The tid of this ReceivablesApiViewModel.  # noqa: E501
        :type: str
        """

        self._tid = tid

    @property
    def nsu(self):
        """Gets the nsu of this ReceivablesApiViewModel.  # noqa: E501


        :return: The nsu of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._nsu

    @nsu.setter
    def nsu(self, nsu):
        """Sets the nsu of this ReceivablesApiViewModel.


        :param nsu: The nsu of this ReceivablesApiViewModel.  # noqa: E501
        :type: str
        """

        self._nsu = nsu

    @property
    def update_date(self):
        """Gets the update_date of this ReceivablesApiViewModel.  # noqa: E501


        :return: The update_date of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this ReceivablesApiViewModel.


        :param update_date: The update_date of this ReceivablesApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def charge_date(self):
        """Gets the charge_date of this ReceivablesApiViewModel.  # noqa: E501


        :return: The charge_date of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._charge_date

    @charge_date.setter
    def charge_date(self, charge_date):
        """Sets the charge_date of this ReceivablesApiViewModel.


        :param charge_date: The charge_date of this ReceivablesApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._charge_date = charge_date

    @property
    def id_receivable_from(self):
        """Gets the id_receivable_from of this ReceivablesApiViewModel.  # noqa: E501


        :return: The id_receivable_from of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_receivable_from

    @id_receivable_from.setter
    def id_receivable_from(self, id_receivable_from):
        """Sets the id_receivable_from of this ReceivablesApiViewModel.


        :param id_receivable_from: The id_receivable_from of this ReceivablesApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_receivable_from = id_receivable_from

    @property
    def card_acquirer(self):
        """Gets the card_acquirer of this ReceivablesApiViewModel.  # noqa: E501


        :return: The card_acquirer of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._card_acquirer

    @card_acquirer.setter
    def card_acquirer(self, card_acquirer):
        """Sets the card_acquirer of this ReceivablesApiViewModel.


        :param card_acquirer: The card_acquirer of this ReceivablesApiViewModel.  # noqa: E501
        :type: str
        """

        self._card_acquirer = card_acquirer

    @property
    def card_flag(self):
        """Gets the card_flag of this ReceivablesApiViewModel.  # noqa: E501


        :return: The card_flag of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._card_flag

    @card_flag.setter
    def card_flag(self, card_flag):
        """Sets the card_flag of this ReceivablesApiViewModel.


        :param card_flag: The card_flag of this ReceivablesApiViewModel.  # noqa: E501
        :type: str
        """

        self._card_flag = card_flag

    @property
    def credit_details(self):
        """Gets the credit_details of this ReceivablesApiViewModel.  # noqa: E501


        :return: The credit_details of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: list[ReceivablesCreditDetails]
        """
        return self._credit_details

    @credit_details.setter
    def credit_details(self, credit_details):
        """Sets the credit_details of this ReceivablesApiViewModel.


        :param credit_details: The credit_details of this ReceivablesApiViewModel.  # noqa: E501
        :type: list[ReceivablesCreditDetails]
        """

        self._credit_details = credit_details

    @property
    def cancellation_description(self):
        """Gets the cancellation_description of this ReceivablesApiViewModel.  # noqa: E501


        :return: The cancellation_description of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._cancellation_description

    @cancellation_description.setter
    def cancellation_description(self, cancellation_description):
        """Sets the cancellation_description of this ReceivablesApiViewModel.


        :param cancellation_description: The cancellation_description of this ReceivablesApiViewModel.  # noqa: E501
        :type: str
        """

        self._cancellation_description = cancellation_description

    @property
    def source(self):
        """Gets the source of this ReceivablesApiViewModel.  # noqa: E501


        :return: The source of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ReceivablesApiViewModel.


        :param source: The source of this ReceivablesApiViewModel.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def sale_date(self):
        """Gets the sale_date of this ReceivablesApiViewModel.  # noqa: E501


        :return: The sale_date of this ReceivablesApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._sale_date

    @sale_date.setter
    def sale_date(self, sale_date):
        """Sets the sale_date of this ReceivablesApiViewModel.


        :param sale_date: The sale_date of this ReceivablesApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._sale_date = sale_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReceivablesApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReceivablesApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
