# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VouchersResumoApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_voucher': 'int',
        'name_voucher': 'str',
        'type_voucher': 'str',
        'limited': 'bool',
        'available': 'int',
        'used': 'int',
        'site_available': 'bool',
        'id_memberships': 'list[int]',
        'monthy_discount': 'MonthDiscountViewModel',
        'yearly_discount': 'YearDiscountViewModel',
        'service_discount': 'ServiceDiscountViewModel'
    }

    attribute_map = {
        'id_voucher': 'idVoucher',
        'name_voucher': 'nameVoucher',
        'type_voucher': 'typeVoucher',
        'limited': 'limited',
        'available': 'available',
        'used': 'used',
        'site_available': 'siteAvailable',
        'id_memberships': 'idMemberships',
        'monthy_discount': 'monthyDiscount',
        'yearly_discount': 'yearlyDiscount',
        'service_discount': 'serviceDiscount'
    }

    def __init__(self, id_voucher=None, name_voucher=None, type_voucher=None, limited=None, available=None, used=None, site_available=None, id_memberships=None, monthy_discount=None, yearly_discount=None, service_discount=None):  # noqa: E501
        """VouchersResumoApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_voucher = None
        self._name_voucher = None
        self._type_voucher = None
        self._limited = None
        self._available = None
        self._used = None
        self._site_available = None
        self._id_memberships = None
        self._monthy_discount = None
        self._yearly_discount = None
        self._service_discount = None
        self.discriminator = None
        if id_voucher is not None:
            self.id_voucher = id_voucher
        if name_voucher is not None:
            self.name_voucher = name_voucher
        if type_voucher is not None:
            self.type_voucher = type_voucher
        if limited is not None:
            self.limited = limited
        if available is not None:
            self.available = available
        if used is not None:
            self.used = used
        if site_available is not None:
            self.site_available = site_available
        if id_memberships is not None:
            self.id_memberships = id_memberships
        if monthy_discount is not None:
            self.monthy_discount = monthy_discount
        if yearly_discount is not None:
            self.yearly_discount = yearly_discount
        if service_discount is not None:
            self.service_discount = service_discount

    @property
    def id_voucher(self):
        """Gets the id_voucher of this VouchersResumoApiViewModel.  # noqa: E501


        :return: The id_voucher of this VouchersResumoApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_voucher

    @id_voucher.setter
    def id_voucher(self, id_voucher):
        """Sets the id_voucher of this VouchersResumoApiViewModel.


        :param id_voucher: The id_voucher of this VouchersResumoApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_voucher = id_voucher

    @property
    def name_voucher(self):
        """Gets the name_voucher of this VouchersResumoApiViewModel.  # noqa: E501


        :return: The name_voucher of this VouchersResumoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name_voucher

    @name_voucher.setter
    def name_voucher(self, name_voucher):
        """Sets the name_voucher of this VouchersResumoApiViewModel.


        :param name_voucher: The name_voucher of this VouchersResumoApiViewModel.  # noqa: E501
        :type: str
        """

        self._name_voucher = name_voucher

    @property
    def type_voucher(self):
        """Gets the type_voucher of this VouchersResumoApiViewModel.  # noqa: E501


        :return: The type_voucher of this VouchersResumoApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._type_voucher

    @type_voucher.setter
    def type_voucher(self, type_voucher):
        """Sets the type_voucher of this VouchersResumoApiViewModel.


        :param type_voucher: The type_voucher of this VouchersResumoApiViewModel.  # noqa: E501
        :type: str
        """

        self._type_voucher = type_voucher

    @property
    def limited(self):
        """Gets the limited of this VouchersResumoApiViewModel.  # noqa: E501


        :return: The limited of this VouchersResumoApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._limited

    @limited.setter
    def limited(self, limited):
        """Sets the limited of this VouchersResumoApiViewModel.


        :param limited: The limited of this VouchersResumoApiViewModel.  # noqa: E501
        :type: bool
        """

        self._limited = limited

    @property
    def available(self):
        """Gets the available of this VouchersResumoApiViewModel.  # noqa: E501


        :return: The available of this VouchersResumoApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this VouchersResumoApiViewModel.


        :param available: The available of this VouchersResumoApiViewModel.  # noqa: E501
        :type: int
        """

        self._available = available

    @property
    def used(self):
        """Gets the used of this VouchersResumoApiViewModel.  # noqa: E501


        :return: The used of this VouchersResumoApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this VouchersResumoApiViewModel.


        :param used: The used of this VouchersResumoApiViewModel.  # noqa: E501
        :type: int
        """

        self._used = used

    @property
    def site_available(self):
        """Gets the site_available of this VouchersResumoApiViewModel.  # noqa: E501


        :return: The site_available of this VouchersResumoApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._site_available

    @site_available.setter
    def site_available(self, site_available):
        """Sets the site_available of this VouchersResumoApiViewModel.


        :param site_available: The site_available of this VouchersResumoApiViewModel.  # noqa: E501
        :type: bool
        """

        self._site_available = site_available

    @property
    def id_memberships(self):
        """Gets the id_memberships of this VouchersResumoApiViewModel.  # noqa: E501


        :return: The id_memberships of this VouchersResumoApiViewModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._id_memberships

    @id_memberships.setter
    def id_memberships(self, id_memberships):
        """Sets the id_memberships of this VouchersResumoApiViewModel.


        :param id_memberships: The id_memberships of this VouchersResumoApiViewModel.  # noqa: E501
        :type: list[int]
        """

        self._id_memberships = id_memberships

    @property
    def monthy_discount(self):
        """Gets the monthy_discount of this VouchersResumoApiViewModel.  # noqa: E501


        :return: The monthy_discount of this VouchersResumoApiViewModel.  # noqa: E501
        :rtype: MonthDiscountViewModel
        """
        return self._monthy_discount

    @monthy_discount.setter
    def monthy_discount(self, monthy_discount):
        """Sets the monthy_discount of this VouchersResumoApiViewModel.


        :param monthy_discount: The monthy_discount of this VouchersResumoApiViewModel.  # noqa: E501
        :type: MonthDiscountViewModel
        """

        self._monthy_discount = monthy_discount

    @property
    def yearly_discount(self):
        """Gets the yearly_discount of this VouchersResumoApiViewModel.  # noqa: E501


        :return: The yearly_discount of this VouchersResumoApiViewModel.  # noqa: E501
        :rtype: YearDiscountViewModel
        """
        return self._yearly_discount

    @yearly_discount.setter
    def yearly_discount(self, yearly_discount):
        """Sets the yearly_discount of this VouchersResumoApiViewModel.


        :param yearly_discount: The yearly_discount of this VouchersResumoApiViewModel.  # noqa: E501
        :type: YearDiscountViewModel
        """

        self._yearly_discount = yearly_discount

    @property
    def service_discount(self):
        """Gets the service_discount of this VouchersResumoApiViewModel.  # noqa: E501


        :return: The service_discount of this VouchersResumoApiViewModel.  # noqa: E501
        :rtype: ServiceDiscountViewModel
        """
        return self._service_discount

    @service_discount.setter
    def service_discount(self, service_discount):
        """Sets the service_discount of this VouchersResumoApiViewModel.


        :param service_discount: The service_discount of this VouchersResumoApiViewModel.  # noqa: E501
        :type: ServiceDiscountViewModel
        """

        self._service_discount = service_discount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VouchersResumoApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VouchersResumoApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
