# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BasicMemberMembershipApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_venda': 'int',
        'id_membership': 'int',
        'id_member_membership': 'int',
        'id_member_membership_renewed': 'int',
        'num_members': 'int',
        'fl_renewed': 'bool',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'name': 'str',
        'cancel_date': 'datetime',
        'sale_date': 'datetime',
        'time_zone': 'str',
        'freezes': 'list[BasicFreezeViewModel]',
        'fl_suspenso': 'bool',
        'freeze': 'bool',
        'membership_status': 'str',
        'membership_type_id': 'int',
        'membership_type': 'str',
        'fl_additional_membership': 'bool',
        'fl_allow_locker': 'bool',
        'id_category_membership': 'int'
    }

    attribute_map = {
        'id_venda': '_IdVenda',
        'id_membership': 'idMembership',
        'id_member_membership': 'idMemberMembership',
        'id_member_membership_renewed': 'idMemberMembershipRenewed',
        'num_members': 'numMembers',
        'fl_renewed': 'flRenewed',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'name': 'name',
        'cancel_date': 'cancelDate',
        'sale_date': 'saleDate',
        'time_zone': 'timeZone',
        'freezes': 'freezes',
        'fl_suspenso': 'flSuspenso',
        'freeze': 'freeze',
        'membership_status': 'membershipStatus',
        'membership_type_id': 'membershipTypeId',
        'membership_type': 'membershipType',
        'fl_additional_membership': 'flAdditionalMembership',
        'fl_allow_locker': 'flAllowLocker',
        'id_category_membership': 'idCategoryMembership'
    }

    def __init__(self, id_venda=None, id_membership=None, id_member_membership=None, id_member_membership_renewed=None, num_members=None, fl_renewed=None, start_date=None, end_date=None, name=None, cancel_date=None, sale_date=None, time_zone=None, freezes=None, fl_suspenso=None, freeze=None, membership_status=None, membership_type_id=None, membership_type=None, fl_additional_membership=None, fl_allow_locker=None, id_category_membership=None):  # noqa: E501
        """BasicMemberMembershipApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_venda = None
        self._id_membership = None
        self._id_member_membership = None
        self._id_member_membership_renewed = None
        self._num_members = None
        self._fl_renewed = None
        self._start_date = None
        self._end_date = None
        self._name = None
        self._cancel_date = None
        self._sale_date = None
        self._time_zone = None
        self._freezes = None
        self._fl_suspenso = None
        self._freeze = None
        self._membership_status = None
        self._membership_type_id = None
        self._membership_type = None
        self._fl_additional_membership = None
        self._fl_allow_locker = None
        self._id_category_membership = None
        self.discriminator = None
        if id_venda is not None:
            self.id_venda = id_venda
        if id_membership is not None:
            self.id_membership = id_membership
        if id_member_membership is not None:
            self.id_member_membership = id_member_membership
        if id_member_membership_renewed is not None:
            self.id_member_membership_renewed = id_member_membership_renewed
        if num_members is not None:
            self.num_members = num_members
        if fl_renewed is not None:
            self.fl_renewed = fl_renewed
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if name is not None:
            self.name = name
        if cancel_date is not None:
            self.cancel_date = cancel_date
        if sale_date is not None:
            self.sale_date = sale_date
        if time_zone is not None:
            self.time_zone = time_zone
        if freezes is not None:
            self.freezes = freezes
        if fl_suspenso is not None:
            self.fl_suspenso = fl_suspenso
        if freeze is not None:
            self.freeze = freeze
        if membership_status is not None:
            self.membership_status = membership_status
        if membership_type_id is not None:
            self.membership_type_id = membership_type_id
        if membership_type is not None:
            self.membership_type = membership_type
        if fl_additional_membership is not None:
            self.fl_additional_membership = fl_additional_membership
        if fl_allow_locker is not None:
            self.fl_allow_locker = fl_allow_locker
        if id_category_membership is not None:
            self.id_category_membership = id_category_membership

    @property
    def id_venda(self):
        """Gets the id_venda of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The id_venda of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_venda

    @id_venda.setter
    def id_venda(self, id_venda):
        """Sets the id_venda of this BasicMemberMembershipApiViewModel.


        :param id_venda: The id_venda of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_venda = id_venda

    @property
    def id_membership(self):
        """Gets the id_membership of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The id_membership of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_membership

    @id_membership.setter
    def id_membership(self, id_membership):
        """Sets the id_membership of this BasicMemberMembershipApiViewModel.


        :param id_membership: The id_membership of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_membership = id_membership

    @property
    def id_member_membership(self):
        """Gets the id_member_membership of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The id_member_membership of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_member_membership

    @id_member_membership.setter
    def id_member_membership(self, id_member_membership):
        """Sets the id_member_membership of this BasicMemberMembershipApiViewModel.


        :param id_member_membership: The id_member_membership of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_member_membership = id_member_membership

    @property
    def id_member_membership_renewed(self):
        """Gets the id_member_membership_renewed of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The id_member_membership_renewed of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_member_membership_renewed

    @id_member_membership_renewed.setter
    def id_member_membership_renewed(self, id_member_membership_renewed):
        """Sets the id_member_membership_renewed of this BasicMemberMembershipApiViewModel.


        :param id_member_membership_renewed: The id_member_membership_renewed of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_member_membership_renewed = id_member_membership_renewed

    @property
    def num_members(self):
        """Gets the num_members of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The num_members of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._num_members

    @num_members.setter
    def num_members(self, num_members):
        """Sets the num_members of this BasicMemberMembershipApiViewModel.


        :param num_members: The num_members of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._num_members = num_members

    @property
    def fl_renewed(self):
        """Gets the fl_renewed of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The fl_renewed of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_renewed

    @fl_renewed.setter
    def fl_renewed(self, fl_renewed):
        """Sets the fl_renewed of this BasicMemberMembershipApiViewModel.


        :param fl_renewed: The fl_renewed of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_renewed = fl_renewed

    @property
    def start_date(self):
        """Gets the start_date of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The start_date of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this BasicMemberMembershipApiViewModel.


        :param start_date: The start_date of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The end_date of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this BasicMemberMembershipApiViewModel.


        :param end_date: The end_date of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def name(self):
        """Gets the name of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The name of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BasicMemberMembershipApiViewModel.


        :param name: The name of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def cancel_date(self):
        """Gets the cancel_date of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The cancel_date of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._cancel_date

    @cancel_date.setter
    def cancel_date(self, cancel_date):
        """Sets the cancel_date of this BasicMemberMembershipApiViewModel.


        :param cancel_date: The cancel_date of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._cancel_date = cancel_date

    @property
    def sale_date(self):
        """Gets the sale_date of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The sale_date of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._sale_date

    @sale_date.setter
    def sale_date(self, sale_date):
        """Sets the sale_date of this BasicMemberMembershipApiViewModel.


        :param sale_date: The sale_date of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._sale_date = sale_date

    @property
    def time_zone(self):
        """Gets the time_zone of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The time_zone of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this BasicMemberMembershipApiViewModel.


        :param time_zone: The time_zone of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def freezes(self):
        """Gets the freezes of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The freezes of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: list[BasicFreezeViewModel]
        """
        return self._freezes

    @freezes.setter
    def freezes(self, freezes):
        """Sets the freezes of this BasicMemberMembershipApiViewModel.


        :param freezes: The freezes of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: list[BasicFreezeViewModel]
        """

        self._freezes = freezes

    @property
    def fl_suspenso(self):
        """Gets the fl_suspenso of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The fl_suspenso of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_suspenso

    @fl_suspenso.setter
    def fl_suspenso(self, fl_suspenso):
        """Sets the fl_suspenso of this BasicMemberMembershipApiViewModel.


        :param fl_suspenso: The fl_suspenso of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_suspenso = fl_suspenso

    @property
    def freeze(self):
        """Gets the freeze of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The freeze of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._freeze

    @freeze.setter
    def freeze(self, freeze):
        """Sets the freeze of this BasicMemberMembershipApiViewModel.


        :param freeze: The freeze of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: bool
        """

        self._freeze = freeze

    @property
    def membership_status(self):
        """Gets the membership_status of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The membership_status of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._membership_status

    @membership_status.setter
    def membership_status(self, membership_status):
        """Sets the membership_status of this BasicMemberMembershipApiViewModel.


        :param membership_status: The membership_status of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: str
        """

        self._membership_status = membership_status

    @property
    def membership_type_id(self):
        """Gets the membership_type_id of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The membership_type_id of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._membership_type_id

    @membership_type_id.setter
    def membership_type_id(self, membership_type_id):
        """Sets the membership_type_id of this BasicMemberMembershipApiViewModel.


        :param membership_type_id: The membership_type_id of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._membership_type_id = membership_type_id

    @property
    def membership_type(self):
        """Gets the membership_type of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The membership_type of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._membership_type

    @membership_type.setter
    def membership_type(self, membership_type):
        """Sets the membership_type of this BasicMemberMembershipApiViewModel.


        :param membership_type: The membership_type of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: str
        """

        self._membership_type = membership_type

    @property
    def fl_additional_membership(self):
        """Gets the fl_additional_membership of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The fl_additional_membership of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_additional_membership

    @fl_additional_membership.setter
    def fl_additional_membership(self, fl_additional_membership):
        """Sets the fl_additional_membership of this BasicMemberMembershipApiViewModel.


        :param fl_additional_membership: The fl_additional_membership of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_additional_membership = fl_additional_membership

    @property
    def fl_allow_locker(self):
        """Gets the fl_allow_locker of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The fl_allow_locker of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._fl_allow_locker

    @fl_allow_locker.setter
    def fl_allow_locker(self, fl_allow_locker):
        """Sets the fl_allow_locker of this BasicMemberMembershipApiViewModel.


        :param fl_allow_locker: The fl_allow_locker of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: bool
        """

        self._fl_allow_locker = fl_allow_locker

    @property
    def id_category_membership(self):
        """Gets the id_category_membership of this BasicMemberMembershipApiViewModel.  # noqa: E501


        :return: The id_category_membership of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_category_membership

    @id_category_membership.setter
    def id_category_membership(self, id_category_membership):
        """Sets the id_category_membership of this BasicMemberMembershipApiViewModel.


        :param id_category_membership: The id_category_membership of this BasicMemberMembershipApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_category_membership = id_category_membership

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BasicMemberMembershipApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasicMemberMembershipApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
