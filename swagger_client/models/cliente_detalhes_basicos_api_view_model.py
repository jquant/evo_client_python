# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClienteDetalhesBasicosApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_member': 'int',
        'photo': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'register_date': 'datetime',
        'id_branch': 'int',
        'branch_name': 'str',
        'access_blocked': 'bool',
        'blocked_reason': 'str',
        'document': 'str',
        'document_id': 'str',
        'marital_status': 'str',
        'gender': 'str',
        'birth_date': 'datetime',
        'country': 'str',
        'address': 'str',
        'state': 'str',
        'city': 'str',
        'passport': 'str',
        'zip_code': 'str',
        'complement': 'str',
        'neighborhood': 'str',
        'access_card_number': 'str',
        'number': 'str',
        'id_member_migration': 'str',
        'tax_data': 'TaxDataViewModel',
        'email': 'str',
        'slug': 'str',
        'penalized': 'bool',
        'id_branch_token': 'str',
        'membership_status': 'str',
        'contacts': 'list[TelefoneApiViewModel]',
        'last_access_date': 'datetime',
        'responsibles': 'list[MemberResponsibleViewModel]',
        'memberships': 'list[MemberMembershipApiViewModel]',
        'registration_kind': 'str',
        'membership': 'BasicMemberMembershipApiViewModel'
    }

    attribute_map = {
        'id_member': 'idMember',
        'photo': 'photo',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'register_date': 'registerDate',
        'id_branch': 'idBranch',
        'branch_name': 'branchName',
        'access_blocked': 'accessBlocked',
        'blocked_reason': 'blockedReason',
        'document': 'document',
        'document_id': 'documentId',
        'marital_status': 'maritalStatus',
        'gender': 'gender',
        'birth_date': 'birthDate',
        'country': 'country',
        'address': 'address',
        'state': 'state',
        'city': 'city',
        'passport': 'passport',
        'zip_code': 'zipCode',
        'complement': 'complement',
        'neighborhood': 'neighborhood',
        'access_card_number': 'accessCardNumber',
        'number': 'number',
        'id_member_migration': 'idMemberMigration',
        'tax_data': 'taxData',
        'email': 'email',
        'slug': 'slug',
        'penalized': 'penalized',
        'id_branch_token': 'idBranchToken',
        'membership_status': 'membershipStatus',
        'contacts': 'contacts',
        'last_access_date': 'lastAccessDate',
        'responsibles': 'responsibles',
        'memberships': 'memberships',
        'registration_kind': 'registrationKind',
        'membership': 'membership'
    }

    def __init__(self, id_member=None, photo=None, first_name=None, last_name=None, register_date=None, id_branch=None, branch_name=None, access_blocked=None, blocked_reason=None, document=None, document_id=None, marital_status=None, gender=None, birth_date=None, country=None, address=None, state=None, city=None, passport=None, zip_code=None, complement=None, neighborhood=None, access_card_number=None, number=None, id_member_migration=None, tax_data=None, email=None, slug=None, penalized=None, id_branch_token=None, membership_status=None, contacts=None, last_access_date=None, responsibles=None, memberships=None, registration_kind=None, membership=None):  # noqa: E501
        """ClienteDetalhesBasicosApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_member = None
        self._photo = None
        self._first_name = None
        self._last_name = None
        self._register_date = None
        self._id_branch = None
        self._branch_name = None
        self._access_blocked = None
        self._blocked_reason = None
        self._document = None
        self._document_id = None
        self._marital_status = None
        self._gender = None
        self._birth_date = None
        self._country = None
        self._address = None
        self._state = None
        self._city = None
        self._passport = None
        self._zip_code = None
        self._complement = None
        self._neighborhood = None
        self._access_card_number = None
        self._number = None
        self._id_member_migration = None
        self._tax_data = None
        self._email = None
        self._slug = None
        self._penalized = None
        self._id_branch_token = None
        self._membership_status = None
        self._contacts = None
        self._last_access_date = None
        self._responsibles = None
        self._memberships = None
        self._registration_kind = None
        self._membership = None
        self.discriminator = None
        if id_member is not None:
            self.id_member = id_member
        if photo is not None:
            self.photo = photo
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if register_date is not None:
            self.register_date = register_date
        if id_branch is not None:
            self.id_branch = id_branch
        if branch_name is not None:
            self.branch_name = branch_name
        if access_blocked is not None:
            self.access_blocked = access_blocked
        if blocked_reason is not None:
            self.blocked_reason = blocked_reason
        if document is not None:
            self.document = document
        if document_id is not None:
            self.document_id = document_id
        if marital_status is not None:
            self.marital_status = marital_status
        if gender is not None:
            self.gender = gender
        if birth_date is not None:
            self.birth_date = birth_date
        if country is not None:
            self.country = country
        if address is not None:
            self.address = address
        if state is not None:
            self.state = state
        if city is not None:
            self.city = city
        if passport is not None:
            self.passport = passport
        if zip_code is not None:
            self.zip_code = zip_code
        if complement is not None:
            self.complement = complement
        if neighborhood is not None:
            self.neighborhood = neighborhood
        if access_card_number is not None:
            self.access_card_number = access_card_number
        if number is not None:
            self.number = number
        if id_member_migration is not None:
            self.id_member_migration = id_member_migration
        if tax_data is not None:
            self.tax_data = tax_data
        if email is not None:
            self.email = email
        if slug is not None:
            self.slug = slug
        if penalized is not None:
            self.penalized = penalized
        if id_branch_token is not None:
            self.id_branch_token = id_branch_token
        if membership_status is not None:
            self.membership_status = membership_status
        if contacts is not None:
            self.contacts = contacts
        if last_access_date is not None:
            self.last_access_date = last_access_date
        if responsibles is not None:
            self.responsibles = responsibles
        if memberships is not None:
            self.memberships = memberships
        if registration_kind is not None:
            self.registration_kind = registration_kind
        if membership is not None:
            self.membership = membership

    @property
    def id_member(self):
        """Gets the id_member of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The id_member of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_member

    @id_member.setter
    def id_member(self, id_member):
        """Sets the id_member of this ClienteDetalhesBasicosApiViewModel.


        :param id_member: The id_member of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_member = id_member

    @property
    def photo(self):
        """Gets the photo of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The photo of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this ClienteDetalhesBasicosApiViewModel.


        :param photo: The photo of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._photo = photo

    @property
    def first_name(self):
        """Gets the first_name of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The first_name of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ClienteDetalhesBasicosApiViewModel.


        :param first_name: The first_name of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The last_name of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ClienteDetalhesBasicosApiViewModel.


        :param last_name: The last_name of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def register_date(self):
        """Gets the register_date of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The register_date of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._register_date

    @register_date.setter
    def register_date(self, register_date):
        """Sets the register_date of this ClienteDetalhesBasicosApiViewModel.


        :param register_date: The register_date of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._register_date = register_date

    @property
    def id_branch(self):
        """Gets the id_branch of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The id_branch of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_branch

    @id_branch.setter
    def id_branch(self, id_branch):
        """Sets the id_branch of this ClienteDetalhesBasicosApiViewModel.


        :param id_branch: The id_branch of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_branch = id_branch

    @property
    def branch_name(self):
        """Gets the branch_name of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The branch_name of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """Sets the branch_name of this ClienteDetalhesBasicosApiViewModel.


        :param branch_name: The branch_name of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._branch_name = branch_name

    @property
    def access_blocked(self):
        """Gets the access_blocked of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The access_blocked of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._access_blocked

    @access_blocked.setter
    def access_blocked(self, access_blocked):
        """Sets the access_blocked of this ClienteDetalhesBasicosApiViewModel.


        :param access_blocked: The access_blocked of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: bool
        """

        self._access_blocked = access_blocked

    @property
    def blocked_reason(self):
        """Gets the blocked_reason of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The blocked_reason of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._blocked_reason

    @blocked_reason.setter
    def blocked_reason(self, blocked_reason):
        """Sets the blocked_reason of this ClienteDetalhesBasicosApiViewModel.


        :param blocked_reason: The blocked_reason of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._blocked_reason = blocked_reason

    @property
    def document(self):
        """Gets the document of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The document of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this ClienteDetalhesBasicosApiViewModel.


        :param document: The document of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._document = document

    @property
    def document_id(self):
        """Gets the document_id of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The document_id of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this ClienteDetalhesBasicosApiViewModel.


        :param document_id: The document_id of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def marital_status(self):
        """Gets the marital_status of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The marital_status of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """Sets the marital_status of this ClienteDetalhesBasicosApiViewModel.


        :param marital_status: The marital_status of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._marital_status = marital_status

    @property
    def gender(self):
        """Gets the gender of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The gender of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this ClienteDetalhesBasicosApiViewModel.


        :param gender: The gender of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def birth_date(self):
        """Gets the birth_date of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The birth_date of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this ClienteDetalhesBasicosApiViewModel.


        :param birth_date: The birth_date of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._birth_date = birth_date

    @property
    def country(self):
        """Gets the country of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The country of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ClienteDetalhesBasicosApiViewModel.


        :param country: The country of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def address(self):
        """Gets the address of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The address of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ClienteDetalhesBasicosApiViewModel.


        :param address: The address of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def state(self):
        """Gets the state of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The state of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ClienteDetalhesBasicosApiViewModel.


        :param state: The state of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def city(self):
        """Gets the city of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The city of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ClienteDetalhesBasicosApiViewModel.


        :param city: The city of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def passport(self):
        """Gets the passport of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The passport of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._passport

    @passport.setter
    def passport(self, passport):
        """Sets the passport of this ClienteDetalhesBasicosApiViewModel.


        :param passport: The passport of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._passport = passport

    @property
    def zip_code(self):
        """Gets the zip_code of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The zip_code of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this ClienteDetalhesBasicosApiViewModel.


        :param zip_code: The zip_code of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def complement(self):
        """Gets the complement of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The complement of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._complement

    @complement.setter
    def complement(self, complement):
        """Sets the complement of this ClienteDetalhesBasicosApiViewModel.


        :param complement: The complement of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._complement = complement

    @property
    def neighborhood(self):
        """Gets the neighborhood of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The neighborhood of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._neighborhood

    @neighborhood.setter
    def neighborhood(self, neighborhood):
        """Sets the neighborhood of this ClienteDetalhesBasicosApiViewModel.


        :param neighborhood: The neighborhood of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._neighborhood = neighborhood

    @property
    def access_card_number(self):
        """Gets the access_card_number of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The access_card_number of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._access_card_number

    @access_card_number.setter
    def access_card_number(self, access_card_number):
        """Sets the access_card_number of this ClienteDetalhesBasicosApiViewModel.


        :param access_card_number: The access_card_number of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._access_card_number = access_card_number

    @property
    def number(self):
        """Gets the number of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The number of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ClienteDetalhesBasicosApiViewModel.


        :param number: The number of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def id_member_migration(self):
        """Gets the id_member_migration of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The id_member_migration of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._id_member_migration

    @id_member_migration.setter
    def id_member_migration(self, id_member_migration):
        """Sets the id_member_migration of this ClienteDetalhesBasicosApiViewModel.


        :param id_member_migration: The id_member_migration of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._id_member_migration = id_member_migration

    @property
    def tax_data(self):
        """Gets the tax_data of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The tax_data of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: TaxDataViewModel
        """
        return self._tax_data

    @tax_data.setter
    def tax_data(self, tax_data):
        """Sets the tax_data of this ClienteDetalhesBasicosApiViewModel.


        :param tax_data: The tax_data of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: TaxDataViewModel
        """

        self._tax_data = tax_data

    @property
    def email(self):
        """Gets the email of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The email of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ClienteDetalhesBasicosApiViewModel.


        :param email: The email of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def slug(self):
        """Gets the slug of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The slug of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this ClienteDetalhesBasicosApiViewModel.


        :param slug: The slug of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def penalized(self):
        """Gets the penalized of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The penalized of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._penalized

    @penalized.setter
    def penalized(self, penalized):
        """Sets the penalized of this ClienteDetalhesBasicosApiViewModel.


        :param penalized: The penalized of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: bool
        """

        self._penalized = penalized

    @property
    def id_branch_token(self):
        """Gets the id_branch_token of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The id_branch_token of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._id_branch_token

    @id_branch_token.setter
    def id_branch_token(self, id_branch_token):
        """Sets the id_branch_token of this ClienteDetalhesBasicosApiViewModel.


        :param id_branch_token: The id_branch_token of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._id_branch_token = id_branch_token

    @property
    def membership_status(self):
        """Gets the membership_status of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The membership_status of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._membership_status

    @membership_status.setter
    def membership_status(self, membership_status):
        """Sets the membership_status of this ClienteDetalhesBasicosApiViewModel.


        :param membership_status: The membership_status of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._membership_status = membership_status

    @property
    def contacts(self):
        """Gets the contacts of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The contacts of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: list[TelefoneApiViewModel]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this ClienteDetalhesBasicosApiViewModel.


        :param contacts: The contacts of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: list[TelefoneApiViewModel]
        """

        self._contacts = contacts

    @property
    def last_access_date(self):
        """Gets the last_access_date of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The last_access_date of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_access_date

    @last_access_date.setter
    def last_access_date(self, last_access_date):
        """Sets the last_access_date of this ClienteDetalhesBasicosApiViewModel.


        :param last_access_date: The last_access_date of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._last_access_date = last_access_date

    @property
    def responsibles(self):
        """Gets the responsibles of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The responsibles of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: list[MemberResponsibleViewModel]
        """
        return self._responsibles

    @responsibles.setter
    def responsibles(self, responsibles):
        """Sets the responsibles of this ClienteDetalhesBasicosApiViewModel.


        :param responsibles: The responsibles of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: list[MemberResponsibleViewModel]
        """

        self._responsibles = responsibles

    @property
    def memberships(self):
        """Gets the memberships of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The memberships of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: list[MemberMembershipApiViewModel]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this ClienteDetalhesBasicosApiViewModel.


        :param memberships: The memberships of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: list[MemberMembershipApiViewModel]
        """

        self._memberships = memberships

    @property
    def registration_kind(self):
        """Gets the registration_kind of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The registration_kind of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._registration_kind

    @registration_kind.setter
    def registration_kind(self, registration_kind):
        """Sets the registration_kind of this ClienteDetalhesBasicosApiViewModel.


        :param registration_kind: The registration_kind of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: str
        """

        self._registration_kind = registration_kind

    @property
    def membership(self):
        """Gets the membership of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501


        :return: The membership of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :rtype: BasicMemberMembershipApiViewModel
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this ClienteDetalhesBasicosApiViewModel.


        :param membership: The membership of this ClienteDetalhesBasicosApiViewModel.  # noqa: E501
        :type: BasicMemberMembershipApiViewModel
        """

        self._membership = membership

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClienteDetalhesBasicosApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClienteDetalhesBasicosApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
