# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MembersBasicApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_member': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'register_date': 'datetime',
        'id_branch': 'int',
        'branch_name': 'str',
        'access_blocked': 'bool',
        'blocked_reason': 'str',
        'gender': 'str',
        'birth_date': 'datetime',
        'access_card_number': 'str',
        'membership_status': 'str',
        'penalized': 'bool',
        'status': 'str',
        'contacts': 'list[TelefoneApiViewModel]',
        'memberships': 'list[MemberMembershipApiViewModel]',
        'last_access_date': 'datetime',
        'id_employee_consultant': 'int',
        'name_employee_consultant': 'str',
        'id_employee_instructor': 'int',
        'name_employee_instructor': 'str',
        'id_employee_personal_trainer': 'int',
        'name_employee_personal_trainer': 'str',
        'photo_url': 'str',
        'id_member_migration': 'str',
        'responsibles': 'list[MemberBasicResponsibleViewModel]',
        'token_gympass': 'str',
        'personal_trainer': 'bool',
        'personal_type': 'str'
    }

    attribute_map = {
        'id_member': 'idMember',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'register_date': 'registerDate',
        'id_branch': 'idBranch',
        'branch_name': 'branchName',
        'access_blocked': 'accessBlocked',
        'blocked_reason': 'blockedReason',
        'gender': 'gender',
        'birth_date': 'birthDate',
        'access_card_number': 'accessCardNumber',
        'membership_status': 'membershipStatus',
        'penalized': 'penalized',
        'status': 'status',
        'contacts': 'contacts',
        'memberships': 'memberships',
        'last_access_date': 'lastAccessDate',
        'id_employee_consultant': 'idEmployeeConsultant',
        'name_employee_consultant': 'nameEmployeeConsultant',
        'id_employee_instructor': 'idEmployeeInstructor',
        'name_employee_instructor': 'nameEmployeeInstructor',
        'id_employee_personal_trainer': 'idEmployeePersonalTrainer',
        'name_employee_personal_trainer': 'nameEmployeePersonalTrainer',
        'photo_url': 'photoUrl',
        'id_member_migration': 'idMemberMigration',
        'responsibles': 'responsibles',
        'token_gympass': 'tokenGympass',
        'personal_trainer': 'personalTrainer',
        'personal_type': 'personalType'
    }

    def __init__(self, id_member=None, first_name=None, last_name=None, register_date=None, id_branch=None, branch_name=None, access_blocked=None, blocked_reason=None, gender=None, birth_date=None, access_card_number=None, membership_status=None, penalized=None, status=None, contacts=None, memberships=None, last_access_date=None, id_employee_consultant=None, name_employee_consultant=None, id_employee_instructor=None, name_employee_instructor=None, id_employee_personal_trainer=None, name_employee_personal_trainer=None, photo_url=None, id_member_migration=None, responsibles=None, token_gympass=None, personal_trainer=None, personal_type=None):  # noqa: E501
        """MembersBasicApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_member = None
        self._first_name = None
        self._last_name = None
        self._register_date = None
        self._id_branch = None
        self._branch_name = None
        self._access_blocked = None
        self._blocked_reason = None
        self._gender = None
        self._birth_date = None
        self._access_card_number = None
        self._membership_status = None
        self._penalized = None
        self._status = None
        self._contacts = None
        self._memberships = None
        self._last_access_date = None
        self._id_employee_consultant = None
        self._name_employee_consultant = None
        self._id_employee_instructor = None
        self._name_employee_instructor = None
        self._id_employee_personal_trainer = None
        self._name_employee_personal_trainer = None
        self._photo_url = None
        self._id_member_migration = None
        self._responsibles = None
        self._token_gympass = None
        self._personal_trainer = None
        self._personal_type = None
        self.discriminator = None
        if id_member is not None:
            self.id_member = id_member
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if register_date is not None:
            self.register_date = register_date
        if id_branch is not None:
            self.id_branch = id_branch
        if branch_name is not None:
            self.branch_name = branch_name
        if access_blocked is not None:
            self.access_blocked = access_blocked
        if blocked_reason is not None:
            self.blocked_reason = blocked_reason
        if gender is not None:
            self.gender = gender
        if birth_date is not None:
            self.birth_date = birth_date
        if access_card_number is not None:
            self.access_card_number = access_card_number
        if membership_status is not None:
            self.membership_status = membership_status
        if penalized is not None:
            self.penalized = penalized
        if status is not None:
            self.status = status
        if contacts is not None:
            self.contacts = contacts
        if memberships is not None:
            self.memberships = memberships
        if last_access_date is not None:
            self.last_access_date = last_access_date
        if id_employee_consultant is not None:
            self.id_employee_consultant = id_employee_consultant
        if name_employee_consultant is not None:
            self.name_employee_consultant = name_employee_consultant
        if id_employee_instructor is not None:
            self.id_employee_instructor = id_employee_instructor
        if name_employee_instructor is not None:
            self.name_employee_instructor = name_employee_instructor
        if id_employee_personal_trainer is not None:
            self.id_employee_personal_trainer = id_employee_personal_trainer
        if name_employee_personal_trainer is not None:
            self.name_employee_personal_trainer = name_employee_personal_trainer
        if photo_url is not None:
            self.photo_url = photo_url
        if id_member_migration is not None:
            self.id_member_migration = id_member_migration
        if responsibles is not None:
            self.responsibles = responsibles
        if token_gympass is not None:
            self.token_gympass = token_gympass
        if personal_trainer is not None:
            self.personal_trainer = personal_trainer
        if personal_type is not None:
            self.personal_type = personal_type

    @property
    def id_member(self):
        """Gets the id_member of this MembersBasicApiViewModel.  # noqa: E501


        :return: The id_member of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_member

    @id_member.setter
    def id_member(self, id_member):
        """Sets the id_member of this MembersBasicApiViewModel.


        :param id_member: The id_member of this MembersBasicApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_member = id_member

    @property
    def first_name(self):
        """Gets the first_name of this MembersBasicApiViewModel.  # noqa: E501


        :return: The first_name of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this MembersBasicApiViewModel.


        :param first_name: The first_name of this MembersBasicApiViewModel.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this MembersBasicApiViewModel.  # noqa: E501


        :return: The last_name of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this MembersBasicApiViewModel.


        :param last_name: The last_name of this MembersBasicApiViewModel.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def register_date(self):
        """Gets the register_date of this MembersBasicApiViewModel.  # noqa: E501


        :return: The register_date of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._register_date

    @register_date.setter
    def register_date(self, register_date):
        """Sets the register_date of this MembersBasicApiViewModel.


        :param register_date: The register_date of this MembersBasicApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._register_date = register_date

    @property
    def id_branch(self):
        """Gets the id_branch of this MembersBasicApiViewModel.  # noqa: E501


        :return: The id_branch of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_branch

    @id_branch.setter
    def id_branch(self, id_branch):
        """Sets the id_branch of this MembersBasicApiViewModel.


        :param id_branch: The id_branch of this MembersBasicApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_branch = id_branch

    @property
    def branch_name(self):
        """Gets the branch_name of this MembersBasicApiViewModel.  # noqa: E501


        :return: The branch_name of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """Sets the branch_name of this MembersBasicApiViewModel.


        :param branch_name: The branch_name of this MembersBasicApiViewModel.  # noqa: E501
        :type: str
        """

        self._branch_name = branch_name

    @property
    def access_blocked(self):
        """Gets the access_blocked of this MembersBasicApiViewModel.  # noqa: E501


        :return: The access_blocked of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._access_blocked

    @access_blocked.setter
    def access_blocked(self, access_blocked):
        """Sets the access_blocked of this MembersBasicApiViewModel.


        :param access_blocked: The access_blocked of this MembersBasicApiViewModel.  # noqa: E501
        :type: bool
        """

        self._access_blocked = access_blocked

    @property
    def blocked_reason(self):
        """Gets the blocked_reason of this MembersBasicApiViewModel.  # noqa: E501


        :return: The blocked_reason of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._blocked_reason

    @blocked_reason.setter
    def blocked_reason(self, blocked_reason):
        """Sets the blocked_reason of this MembersBasicApiViewModel.


        :param blocked_reason: The blocked_reason of this MembersBasicApiViewModel.  # noqa: E501
        :type: str
        """

        self._blocked_reason = blocked_reason

    @property
    def gender(self):
        """Gets the gender of this MembersBasicApiViewModel.  # noqa: E501


        :return: The gender of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this MembersBasicApiViewModel.


        :param gender: The gender of this MembersBasicApiViewModel.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def birth_date(self):
        """Gets the birth_date of this MembersBasicApiViewModel.  # noqa: E501


        :return: The birth_date of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this MembersBasicApiViewModel.


        :param birth_date: The birth_date of this MembersBasicApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._birth_date = birth_date

    @property
    def access_card_number(self):
        """Gets the access_card_number of this MembersBasicApiViewModel.  # noqa: E501


        :return: The access_card_number of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._access_card_number

    @access_card_number.setter
    def access_card_number(self, access_card_number):
        """Sets the access_card_number of this MembersBasicApiViewModel.


        :param access_card_number: The access_card_number of this MembersBasicApiViewModel.  # noqa: E501
        :type: str
        """

        self._access_card_number = access_card_number

    @property
    def membership_status(self):
        """Gets the membership_status of this MembersBasicApiViewModel.  # noqa: E501


        :return: The membership_status of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._membership_status

    @membership_status.setter
    def membership_status(self, membership_status):
        """Sets the membership_status of this MembersBasicApiViewModel.


        :param membership_status: The membership_status of this MembersBasicApiViewModel.  # noqa: E501
        :type: str
        """

        self._membership_status = membership_status

    @property
    def penalized(self):
        """Gets the penalized of this MembersBasicApiViewModel.  # noqa: E501


        :return: The penalized of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._penalized

    @penalized.setter
    def penalized(self, penalized):
        """Sets the penalized of this MembersBasicApiViewModel.


        :param penalized: The penalized of this MembersBasicApiViewModel.  # noqa: E501
        :type: bool
        """

        self._penalized = penalized

    @property
    def status(self):
        """Gets the status of this MembersBasicApiViewModel.  # noqa: E501


        :return: The status of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MembersBasicApiViewModel.


        :param status: The status of this MembersBasicApiViewModel.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def contacts(self):
        """Gets the contacts of this MembersBasicApiViewModel.  # noqa: E501


        :return: The contacts of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: list[TelefoneApiViewModel]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this MembersBasicApiViewModel.


        :param contacts: The contacts of this MembersBasicApiViewModel.  # noqa: E501
        :type: list[TelefoneApiViewModel]
        """

        self._contacts = contacts

    @property
    def memberships(self):
        """Gets the memberships of this MembersBasicApiViewModel.  # noqa: E501


        :return: The memberships of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: list[MemberMembershipApiViewModel]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this MembersBasicApiViewModel.


        :param memberships: The memberships of this MembersBasicApiViewModel.  # noqa: E501
        :type: list[MemberMembershipApiViewModel]
        """

        self._memberships = memberships

    @property
    def last_access_date(self):
        """Gets the last_access_date of this MembersBasicApiViewModel.  # noqa: E501


        :return: The last_access_date of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_access_date

    @last_access_date.setter
    def last_access_date(self, last_access_date):
        """Sets the last_access_date of this MembersBasicApiViewModel.


        :param last_access_date: The last_access_date of this MembersBasicApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._last_access_date = last_access_date

    @property
    def id_employee_consultant(self):
        """Gets the id_employee_consultant of this MembersBasicApiViewModel.  # noqa: E501


        :return: The id_employee_consultant of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_employee_consultant

    @id_employee_consultant.setter
    def id_employee_consultant(self, id_employee_consultant):
        """Sets the id_employee_consultant of this MembersBasicApiViewModel.


        :param id_employee_consultant: The id_employee_consultant of this MembersBasicApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_employee_consultant = id_employee_consultant

    @property
    def name_employee_consultant(self):
        """Gets the name_employee_consultant of this MembersBasicApiViewModel.  # noqa: E501


        :return: The name_employee_consultant of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name_employee_consultant

    @name_employee_consultant.setter
    def name_employee_consultant(self, name_employee_consultant):
        """Sets the name_employee_consultant of this MembersBasicApiViewModel.


        :param name_employee_consultant: The name_employee_consultant of this MembersBasicApiViewModel.  # noqa: E501
        :type: str
        """

        self._name_employee_consultant = name_employee_consultant

    @property
    def id_employee_instructor(self):
        """Gets the id_employee_instructor of this MembersBasicApiViewModel.  # noqa: E501


        :return: The id_employee_instructor of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_employee_instructor

    @id_employee_instructor.setter
    def id_employee_instructor(self, id_employee_instructor):
        """Sets the id_employee_instructor of this MembersBasicApiViewModel.


        :param id_employee_instructor: The id_employee_instructor of this MembersBasicApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_employee_instructor = id_employee_instructor

    @property
    def name_employee_instructor(self):
        """Gets the name_employee_instructor of this MembersBasicApiViewModel.  # noqa: E501


        :return: The name_employee_instructor of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name_employee_instructor

    @name_employee_instructor.setter
    def name_employee_instructor(self, name_employee_instructor):
        """Sets the name_employee_instructor of this MembersBasicApiViewModel.


        :param name_employee_instructor: The name_employee_instructor of this MembersBasicApiViewModel.  # noqa: E501
        :type: str
        """

        self._name_employee_instructor = name_employee_instructor

    @property
    def id_employee_personal_trainer(self):
        """Gets the id_employee_personal_trainer of this MembersBasicApiViewModel.  # noqa: E501


        :return: The id_employee_personal_trainer of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_employee_personal_trainer

    @id_employee_personal_trainer.setter
    def id_employee_personal_trainer(self, id_employee_personal_trainer):
        """Sets the id_employee_personal_trainer of this MembersBasicApiViewModel.


        :param id_employee_personal_trainer: The id_employee_personal_trainer of this MembersBasicApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_employee_personal_trainer = id_employee_personal_trainer

    @property
    def name_employee_personal_trainer(self):
        """Gets the name_employee_personal_trainer of this MembersBasicApiViewModel.  # noqa: E501


        :return: The name_employee_personal_trainer of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._name_employee_personal_trainer

    @name_employee_personal_trainer.setter
    def name_employee_personal_trainer(self, name_employee_personal_trainer):
        """Sets the name_employee_personal_trainer of this MembersBasicApiViewModel.


        :param name_employee_personal_trainer: The name_employee_personal_trainer of this MembersBasicApiViewModel.  # noqa: E501
        :type: str
        """

        self._name_employee_personal_trainer = name_employee_personal_trainer

    @property
    def photo_url(self):
        """Gets the photo_url of this MembersBasicApiViewModel.  # noqa: E501


        :return: The photo_url of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this MembersBasicApiViewModel.


        :param photo_url: The photo_url of this MembersBasicApiViewModel.  # noqa: E501
        :type: str
        """

        self._photo_url = photo_url

    @property
    def id_member_migration(self):
        """Gets the id_member_migration of this MembersBasicApiViewModel.  # noqa: E501


        :return: The id_member_migration of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._id_member_migration

    @id_member_migration.setter
    def id_member_migration(self, id_member_migration):
        """Sets the id_member_migration of this MembersBasicApiViewModel.


        :param id_member_migration: The id_member_migration of this MembersBasicApiViewModel.  # noqa: E501
        :type: str
        """

        self._id_member_migration = id_member_migration

    @property
    def responsibles(self):
        """Gets the responsibles of this MembersBasicApiViewModel.  # noqa: E501


        :return: The responsibles of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: list[MemberBasicResponsibleViewModel]
        """
        return self._responsibles

    @responsibles.setter
    def responsibles(self, responsibles):
        """Sets the responsibles of this MembersBasicApiViewModel.


        :param responsibles: The responsibles of this MembersBasicApiViewModel.  # noqa: E501
        :type: list[MemberBasicResponsibleViewModel]
        """

        self._responsibles = responsibles

    @property
    def token_gympass(self):
        """Gets the token_gympass of this MembersBasicApiViewModel.  # noqa: E501


        :return: The token_gympass of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._token_gympass

    @token_gympass.setter
    def token_gympass(self, token_gympass):
        """Sets the token_gympass of this MembersBasicApiViewModel.


        :param token_gympass: The token_gympass of this MembersBasicApiViewModel.  # noqa: E501
        :type: str
        """

        self._token_gympass = token_gympass

    @property
    def personal_trainer(self):
        """Gets the personal_trainer of this MembersBasicApiViewModel.  # noqa: E501


        :return: The personal_trainer of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: bool
        """
        return self._personal_trainer

    @personal_trainer.setter
    def personal_trainer(self, personal_trainer):
        """Sets the personal_trainer of this MembersBasicApiViewModel.


        :param personal_trainer: The personal_trainer of this MembersBasicApiViewModel.  # noqa: E501
        :type: bool
        """

        self._personal_trainer = personal_trainer

    @property
    def personal_type(self):
        """Gets the personal_type of this MembersBasicApiViewModel.  # noqa: E501


        :return: The personal_type of this MembersBasicApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._personal_type

    @personal_type.setter
    def personal_type(self, personal_type):
        """Sets the personal_type of this MembersBasicApiViewModel.


        :param personal_type: The personal_type of this MembersBasicApiViewModel.  # noqa: E501
        :type: str
        """

        self._personal_type = personal_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MembersBasicApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MembersBasicApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
