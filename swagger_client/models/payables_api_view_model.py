# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PayablesApiViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_payable': 'int',
        'description': 'str',
        'recipient': 'str',
        'cost_center': 'PayablesApiSubTypesViewModel',
        'input_date': 'datetime',
        'due_date': 'datetime',
        'payment_date': 'datetime',
        'competence_date': 'datetime',
        'cancellation_date': 'datetime',
        'ammount': 'float',
        'ammount_paid': 'float',
        'status': 'PayablesApiSubTypesViewModel',
        'destination': 'PayablesApiSubTypesViewModel',
        'bank_account': 'PayablesApiSubTypesViewModel',
        'beneficiary': 'str',
        'categories': 'str',
        'observation': 'str'
    }

    attribute_map = {
        'id_payable': 'idPayable',
        'description': 'description',
        'recipient': 'recipient',
        'cost_center': 'costCenter',
        'input_date': 'inputDate',
        'due_date': 'dueDate',
        'payment_date': 'paymentDate',
        'competence_date': 'competenceDate',
        'cancellation_date': 'cancellationDate',
        'ammount': 'ammount',
        'ammount_paid': 'ammountPaid',
        'status': 'status',
        'destination': 'destination',
        'bank_account': 'bankAccount',
        'beneficiary': 'beneficiary',
        'categories': 'categories',
        'observation': 'observation'
    }

    def __init__(self, id_payable=None, description=None, recipient=None, cost_center=None, input_date=None, due_date=None, payment_date=None, competence_date=None, cancellation_date=None, ammount=None, ammount_paid=None, status=None, destination=None, bank_account=None, beneficiary=None, categories=None, observation=None):  # noqa: E501
        """PayablesApiViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_payable = None
        self._description = None
        self._recipient = None
        self._cost_center = None
        self._input_date = None
        self._due_date = None
        self._payment_date = None
        self._competence_date = None
        self._cancellation_date = None
        self._ammount = None
        self._ammount_paid = None
        self._status = None
        self._destination = None
        self._bank_account = None
        self._beneficiary = None
        self._categories = None
        self._observation = None
        self.discriminator = None
        if id_payable is not None:
            self.id_payable = id_payable
        if description is not None:
            self.description = description
        if recipient is not None:
            self.recipient = recipient
        if cost_center is not None:
            self.cost_center = cost_center
        if input_date is not None:
            self.input_date = input_date
        if due_date is not None:
            self.due_date = due_date
        if payment_date is not None:
            self.payment_date = payment_date
        if competence_date is not None:
            self.competence_date = competence_date
        if cancellation_date is not None:
            self.cancellation_date = cancellation_date
        if ammount is not None:
            self.ammount = ammount
        if ammount_paid is not None:
            self.ammount_paid = ammount_paid
        if status is not None:
            self.status = status
        if destination is not None:
            self.destination = destination
        if bank_account is not None:
            self.bank_account = bank_account
        if beneficiary is not None:
            self.beneficiary = beneficiary
        if categories is not None:
            self.categories = categories
        if observation is not None:
            self.observation = observation

    @property
    def id_payable(self):
        """Gets the id_payable of this PayablesApiViewModel.  # noqa: E501


        :return: The id_payable of this PayablesApiViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_payable

    @id_payable.setter
    def id_payable(self, id_payable):
        """Sets the id_payable of this PayablesApiViewModel.


        :param id_payable: The id_payable of this PayablesApiViewModel.  # noqa: E501
        :type: int
        """

        self._id_payable = id_payable

    @property
    def description(self):
        """Gets the description of this PayablesApiViewModel.  # noqa: E501


        :return: The description of this PayablesApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PayablesApiViewModel.


        :param description: The description of this PayablesApiViewModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def recipient(self):
        """Gets the recipient of this PayablesApiViewModel.  # noqa: E501


        :return: The recipient of this PayablesApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this PayablesApiViewModel.


        :param recipient: The recipient of this PayablesApiViewModel.  # noqa: E501
        :type: str
        """

        self._recipient = recipient

    @property
    def cost_center(self):
        """Gets the cost_center of this PayablesApiViewModel.  # noqa: E501


        :return: The cost_center of this PayablesApiViewModel.  # noqa: E501
        :rtype: PayablesApiSubTypesViewModel
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """Sets the cost_center of this PayablesApiViewModel.


        :param cost_center: The cost_center of this PayablesApiViewModel.  # noqa: E501
        :type: PayablesApiSubTypesViewModel
        """

        self._cost_center = cost_center

    @property
    def input_date(self):
        """Gets the input_date of this PayablesApiViewModel.  # noqa: E501


        :return: The input_date of this PayablesApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._input_date

    @input_date.setter
    def input_date(self, input_date):
        """Sets the input_date of this PayablesApiViewModel.


        :param input_date: The input_date of this PayablesApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._input_date = input_date

    @property
    def due_date(self):
        """Gets the due_date of this PayablesApiViewModel.  # noqa: E501


        :return: The due_date of this PayablesApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this PayablesApiViewModel.


        :param due_date: The due_date of this PayablesApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def payment_date(self):
        """Gets the payment_date of this PayablesApiViewModel.  # noqa: E501


        :return: The payment_date of this PayablesApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this PayablesApiViewModel.


        :param payment_date: The payment_date of this PayablesApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._payment_date = payment_date

    @property
    def competence_date(self):
        """Gets the competence_date of this PayablesApiViewModel.  # noqa: E501


        :return: The competence_date of this PayablesApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._competence_date

    @competence_date.setter
    def competence_date(self, competence_date):
        """Sets the competence_date of this PayablesApiViewModel.


        :param competence_date: The competence_date of this PayablesApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._competence_date = competence_date

    @property
    def cancellation_date(self):
        """Gets the cancellation_date of this PayablesApiViewModel.  # noqa: E501


        :return: The cancellation_date of this PayablesApiViewModel.  # noqa: E501
        :rtype: datetime
        """
        return self._cancellation_date

    @cancellation_date.setter
    def cancellation_date(self, cancellation_date):
        """Sets the cancellation_date of this PayablesApiViewModel.


        :param cancellation_date: The cancellation_date of this PayablesApiViewModel.  # noqa: E501
        :type: datetime
        """

        self._cancellation_date = cancellation_date

    @property
    def ammount(self):
        """Gets the ammount of this PayablesApiViewModel.  # noqa: E501


        :return: The ammount of this PayablesApiViewModel.  # noqa: E501
        :rtype: float
        """
        return self._ammount

    @ammount.setter
    def ammount(self, ammount):
        """Sets the ammount of this PayablesApiViewModel.


        :param ammount: The ammount of this PayablesApiViewModel.  # noqa: E501
        :type: float
        """

        self._ammount = ammount

    @property
    def ammount_paid(self):
        """Gets the ammount_paid of this PayablesApiViewModel.  # noqa: E501


        :return: The ammount_paid of this PayablesApiViewModel.  # noqa: E501
        :rtype: float
        """
        return self._ammount_paid

    @ammount_paid.setter
    def ammount_paid(self, ammount_paid):
        """Sets the ammount_paid of this PayablesApiViewModel.


        :param ammount_paid: The ammount_paid of this PayablesApiViewModel.  # noqa: E501
        :type: float
        """

        self._ammount_paid = ammount_paid

    @property
    def status(self):
        """Gets the status of this PayablesApiViewModel.  # noqa: E501


        :return: The status of this PayablesApiViewModel.  # noqa: E501
        :rtype: PayablesApiSubTypesViewModel
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PayablesApiViewModel.


        :param status: The status of this PayablesApiViewModel.  # noqa: E501
        :type: PayablesApiSubTypesViewModel
        """

        self._status = status

    @property
    def destination(self):
        """Gets the destination of this PayablesApiViewModel.  # noqa: E501


        :return: The destination of this PayablesApiViewModel.  # noqa: E501
        :rtype: PayablesApiSubTypesViewModel
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this PayablesApiViewModel.


        :param destination: The destination of this PayablesApiViewModel.  # noqa: E501
        :type: PayablesApiSubTypesViewModel
        """

        self._destination = destination

    @property
    def bank_account(self):
        """Gets the bank_account of this PayablesApiViewModel.  # noqa: E501


        :return: The bank_account of this PayablesApiViewModel.  # noqa: E501
        :rtype: PayablesApiSubTypesViewModel
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this PayablesApiViewModel.


        :param bank_account: The bank_account of this PayablesApiViewModel.  # noqa: E501
        :type: PayablesApiSubTypesViewModel
        """

        self._bank_account = bank_account

    @property
    def beneficiary(self):
        """Gets the beneficiary of this PayablesApiViewModel.  # noqa: E501


        :return: The beneficiary of this PayablesApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary

    @beneficiary.setter
    def beneficiary(self, beneficiary):
        """Sets the beneficiary of this PayablesApiViewModel.


        :param beneficiary: The beneficiary of this PayablesApiViewModel.  # noqa: E501
        :type: str
        """

        self._beneficiary = beneficiary

    @property
    def categories(self):
        """Gets the categories of this PayablesApiViewModel.  # noqa: E501


        :return: The categories of this PayablesApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this PayablesApiViewModel.


        :param categories: The categories of this PayablesApiViewModel.  # noqa: E501
        :type: str
        """

        self._categories = categories

    @property
    def observation(self):
        """Gets the observation of this PayablesApiViewModel.  # noqa: E501


        :return: The observation of this PayablesApiViewModel.  # noqa: E501
        :rtype: str
        """
        return self._observation

    @observation.setter
    def observation(self, observation):
        """Sets the observation of this PayablesApiViewModel.


        :param observation: The observation of this PayablesApiViewModel.  # noqa: E501
        :type: str
        """

        self._observation = observation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PayablesApiViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayablesApiViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
