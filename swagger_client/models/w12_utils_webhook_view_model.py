# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class W12UtilsWebhookViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_branch': 'int',
        'event_type': 'str',
        'url_callback': 'str',
        'headers': 'list[W12UtilsWebhookHeaderViewModel]',
        'filters': 'list[W12UtilzWebHookFilterViewModel]'
    }

    attribute_map = {
        'id_branch': 'idBranch',
        'event_type': 'eventType',
        'url_callback': 'urlCallback',
        'headers': 'headers',
        'filters': 'filters'
    }

    def __init__(self, id_branch=None, event_type=None, url_callback=None, headers=None, filters=None):  # noqa: E501
        """W12UtilsWebhookViewModel - a model defined in Swagger"""  # noqa: E501
        self._id_branch = None
        self._event_type = None
        self._url_callback = None
        self._headers = None
        self._filters = None
        self.discriminator = None
        if id_branch is not None:
            self.id_branch = id_branch
        if event_type is not None:
            self.event_type = event_type
        if url_callback is not None:
            self.url_callback = url_callback
        if headers is not None:
            self.headers = headers
        if filters is not None:
            self.filters = filters

    @property
    def id_branch(self):
        """Gets the id_branch of this W12UtilsWebhookViewModel.  # noqa: E501


        :return: The id_branch of this W12UtilsWebhookViewModel.  # noqa: E501
        :rtype: int
        """
        return self._id_branch

    @id_branch.setter
    def id_branch(self, id_branch):
        """Sets the id_branch of this W12UtilsWebhookViewModel.


        :param id_branch: The id_branch of this W12UtilsWebhookViewModel.  # noqa: E501
        :type: int
        """

        self._id_branch = id_branch

    @property
    def event_type(self):
        """Gets the event_type of this W12UtilsWebhookViewModel.  # noqa: E501


        :return: The event_type of this W12UtilsWebhookViewModel.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this W12UtilsWebhookViewModel.


        :param event_type: The event_type of this W12UtilsWebhookViewModel.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def url_callback(self):
        """Gets the url_callback of this W12UtilsWebhookViewModel.  # noqa: E501


        :return: The url_callback of this W12UtilsWebhookViewModel.  # noqa: E501
        :rtype: str
        """
        return self._url_callback

    @url_callback.setter
    def url_callback(self, url_callback):
        """Sets the url_callback of this W12UtilsWebhookViewModel.


        :param url_callback: The url_callback of this W12UtilsWebhookViewModel.  # noqa: E501
        :type: str
        """

        self._url_callback = url_callback

    @property
    def headers(self):
        """Gets the headers of this W12UtilsWebhookViewModel.  # noqa: E501


        :return: The headers of this W12UtilsWebhookViewModel.  # noqa: E501
        :rtype: list[W12UtilsWebhookHeaderViewModel]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this W12UtilsWebhookViewModel.


        :param headers: The headers of this W12UtilsWebhookViewModel.  # noqa: E501
        :type: list[W12UtilsWebhookHeaderViewModel]
        """

        self._headers = headers

    @property
    def filters(self):
        """Gets the filters of this W12UtilsWebhookViewModel.  # noqa: E501


        :return: The filters of this W12UtilsWebhookViewModel.  # noqa: E501
        :rtype: list[W12UtilzWebHookFilterViewModel]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this W12UtilsWebhookViewModel.


        :param filters: The filters of this W12UtilsWebhookViewModel.  # noqa: E501
        :type: list[W12UtilzWebHookFilterViewModel]
        """

        self._filters = filters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(W12UtilsWebhookViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, W12UtilsWebhookViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
