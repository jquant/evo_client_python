# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ActivitiesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_activities_get(self, **kwargs):  # noqa: E501
        """Get activities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_activities_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: Filter by activity name, group name or tags
        :param int id_branch: Filber by membership IdBranch (Only available when using a multilocation key, ignored otherwise)
        :param int take: Total number of records to return.
        :param int skip: Total number of records to skip.
        :return: list[AtividadeListApiViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_activities_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_activities_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_activities_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get activities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_activities_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: Filter by activity name, group name or tags
        :param int id_branch: Filber by membership IdBranch (Only available when using a multilocation key, ignored otherwise)
        :param int take: Total number of records to return.
        :param int skip: Total number of records to skip.
        :return: list[AtividadeListApiViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'id_branch', 'take', 'skip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_activities_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'id_branch' in params:
            query_params.append(('idBranch', params['id_branch']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/activities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AtividadeListApiViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_activities_schedule_detail_get(self, **kwargs):  # noqa: E501
        """Get activities schedule details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_activities_schedule_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_configuration: Activity IdConfiguration (Must be use combined with activityDate)
        :param datetime activity_date: Activity schedule date (yyyy-MM-dd) (Must be use combined with idConfiguration)
        :param int id_activity_session: Activity idActivitySession (This is mandatory if IdConfiguration and activityDate are null)
        :return: AtividadeBasicoApiViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_activities_schedule_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_activities_schedule_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_activities_schedule_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get activities schedule details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_activities_schedule_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_configuration: Activity IdConfiguration (Must be use combined with activityDate)
        :param datetime activity_date: Activity schedule date (yyyy-MM-dd) (Must be use combined with idConfiguration)
        :param int id_activity_session: Activity idActivitySession (This is mandatory if IdConfiguration and activityDate are null)
        :return: AtividadeBasicoApiViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_configuration', 'activity_date', 'id_activity_session']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_activities_schedule_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_configuration' in params:
            query_params.append(('idConfiguration', params['id_configuration']))  # noqa: E501
        if 'activity_date' in params:
            query_params.append(('activityDate', params['activity_date']))  # noqa: E501
        if 'id_activity_session' in params:
            query_params.append(('idActivitySession', params['id_activity_session']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/activities/schedule/detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AtividadeBasicoApiViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_activities_schedule_enroll_post(self, **kwargs):  # noqa: E501
        """Enroll member in activity schedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_activities_schedule_enroll_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_configuration: Activity IdConfiguration
        :param datetime activity_date: Activity schedule date (yyyy-MM-dd)
        :param int slot_number: Slot number (only available in activites that allow spot booking)
        :param int id_member: Id Member (this is required if IdProspect is null)
        :param int id_prospect: Id Member (this is required if IdMember is null)
        :param EOrigemAgendamento origin:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_activities_schedule_enroll_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_activities_schedule_enroll_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_activities_schedule_enroll_post_with_http_info(self, **kwargs):  # noqa: E501
        """Enroll member in activity schedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_activities_schedule_enroll_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_configuration: Activity IdConfiguration
        :param datetime activity_date: Activity schedule date (yyyy-MM-dd)
        :param int slot_number: Slot number (only available in activites that allow spot booking)
        :param int id_member: Id Member (this is required if IdProspect is null)
        :param int id_prospect: Id Member (this is required if IdMember is null)
        :param EOrigemAgendamento origin:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_configuration', 'activity_date', 'slot_number', 'id_member', 'id_prospect', 'origin']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_activities_schedule_enroll_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_configuration' in params:
            query_params.append(('idConfiguration', params['id_configuration']))  # noqa: E501
        if 'activity_date' in params:
            query_params.append(('activityDate', params['activity_date']))  # noqa: E501
        if 'slot_number' in params:
            query_params.append(('slotNumber', params['slot_number']))  # noqa: E501
        if 'id_member' in params:
            query_params.append(('idMember', params['id_member']))  # noqa: E501
        if 'id_prospect' in params:
            query_params.append(('idProspect', params['id_prospect']))  # noqa: E501
        if 'origin' in params:
            query_params.append(('origin', params['origin']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/activities/schedule/enroll', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_activities_schedule_get(self, **kwargs):  # noqa: E501
        """Get activities schedule  # noqa: E501

        Status:        Livre = 0,      Disponivel = 1,      Lotada = 2,      ReservaEncerrada = 3,      Restrita = 4,      Cadastrado = 5,      Finalizada = 6,      Cancelada = 7,      NaFila = 8,      LivreEncerrada = 10,      RestritaEncerrada = 11,      RestritaNaoPermiteParticipar = 12,      LotadaSemFilaEspera = 15  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_activities_schedule_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member: Filter by a member
        :param int take: Limit the ammount of itens returned
        :param bool only_availables: Filter by activities that are available
        :param datetime _date: Filter by a specific date
        :param bool show_full_week: Show all activities in the week (Sunday to Saturday)
        :param int id_branch: Filter by a different branch than the current one
        :param str id_activities: Filter by a activities ids. Inform a comma separated list Ex.: \"1,2,3\"
        :param str id_audiences: Filter by a audiences ids. Inform a comma separated list Ex.: \"1,2,3\"
        :param str id_branch_token: Filter by a different branch than the current one
        :return: list[AtividadeAgendaApiViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_activities_schedule_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_activities_schedule_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_activities_schedule_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get activities schedule  # noqa: E501

        Status:        Livre = 0,      Disponivel = 1,      Lotada = 2,      ReservaEncerrada = 3,      Restrita = 4,      Cadastrado = 5,      Finalizada = 6,      Cancelada = 7,      NaFila = 8,      LivreEncerrada = 10,      RestritaEncerrada = 11,      RestritaNaoPermiteParticipar = 12,      LotadaSemFilaEspera = 15  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_activities_schedule_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member: Filter by a member
        :param int take: Limit the ammount of itens returned
        :param bool only_availables: Filter by activities that are available
        :param datetime _date: Filter by a specific date
        :param bool show_full_week: Show all activities in the week (Sunday to Saturday)
        :param int id_branch: Filter by a different branch than the current one
        :param str id_activities: Filter by a activities ids. Inform a comma separated list Ex.: \"1,2,3\"
        :param str id_audiences: Filter by a audiences ids. Inform a comma separated list Ex.: \"1,2,3\"
        :param str id_branch_token: Filter by a different branch than the current one
        :return: list[AtividadeAgendaApiViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_member', 'take', 'only_availables', '_date', 'show_full_week', 'id_branch', 'id_activities', 'id_audiences', 'id_branch_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_activities_schedule_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_member' in params:
            query_params.append(('idMember', params['id_member']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'only_availables' in params:
            query_params.append(('onlyAvailables', params['only_availables']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'show_full_week' in params:
            query_params.append(('showFullWeek', params['show_full_week']))  # noqa: E501
        if 'id_branch' in params:
            query_params.append(('idBranch', params['id_branch']))  # noqa: E501
        if 'id_activities' in params:
            query_params.append(('idActivities', params['id_activities']))  # noqa: E501
        if 'id_audiences' in params:
            query_params.append(('idAudiences', params['id_audiences']))  # noqa: E501
        if 'id_branch_token' in params:
            query_params.append(('idBranchToken', params['id_branch_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/activities/schedule', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AtividadeAgendaApiViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def class_post(self, **kwargs):  # noqa: E501
        """Create a new experimental class and enroll the member on it  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_prospect: IdProspect of who will participate from class
        :param datetime activity_date: Activity schedule date and time (yyyy-MM-dd HH:mm)
        :param str activity: Activity name
        :param str service: Service that will be sold to allow the trial class
        :param bool activity_exist:
        :param int id_branch:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.class_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.class_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def class_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new experimental class and enroll the member on it  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_prospect: IdProspect of who will participate from class
        :param datetime activity_date: Activity schedule date and time (yyyy-MM-dd HH:mm)
        :param str activity: Activity name
        :param str service: Service that will be sold to allow the trial class
        :param bool activity_exist:
        :param int id_branch:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_prospect', 'activity_date', 'activity', 'service', 'activity_exist', 'id_branch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method class_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_prospect' in params:
            query_params.append(('idProspect', params['id_prospect']))  # noqa: E501
        if 'activity_date' in params:
            query_params.append(('activityDate', params['activity_date']))  # noqa: E501
        if 'activity' in params:
            query_params.append(('activity', params['activity']))  # noqa: E501
        if 'service' in params:
            query_params.append(('service', params['service']))  # noqa: E501
        if 'activity_exist' in params:
            query_params.append(('activityExist', params['activity_exist']))  # noqa: E501
        if 'id_branch' in params:
            query_params.append(('idBranch', params['id_branch']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/activities/schedule/experimental-class', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def status_post(self, **kwargs):  # noqa: E501
        """Change status of a member in activity schedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EStatusAtividadeSessao status: New status to be setted (Types: Attending = 0, Absent = 1, Justified absence = 2)
        :param int id_member: Id Member
        :param int id_prospect: Id Prospect
        :param int id_configuration: Activity IdConfiguration - only used when idActivitySession is null)
        :param datetime activity_date: Activity schedule date (yyyy-MM-dd) - only used when idActivitySession is null)
        :param int id_activity_session: IdActivity Session
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.status_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.status_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def status_post_with_http_info(self, **kwargs):  # noqa: E501
        """Change status of a member in activity schedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.status_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EStatusAtividadeSessao status: New status to be setted (Types: Attending = 0, Absent = 1, Justified absence = 2)
        :param int id_member: Id Member
        :param int id_prospect: Id Prospect
        :param int id_configuration: Activity IdConfiguration - only used when idActivitySession is null)
        :param datetime activity_date: Activity schedule date (yyyy-MM-dd) - only used when idActivitySession is null)
        :param int id_activity_session: IdActivity Session
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'id_member', 'id_prospect', 'id_configuration', 'activity_date', 'id_activity_session']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method status_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'id_member' in params:
            query_params.append(('idMember', params['id_member']))  # noqa: E501
        if 'id_prospect' in params:
            query_params.append(('idProspect', params['id_prospect']))  # noqa: E501
        if 'id_configuration' in params:
            query_params.append(('idConfiguration', params['id_configuration']))  # noqa: E501
        if 'activity_date' in params:
            query_params.append(('activityDate', params['activity_date']))  # noqa: E501
        if 'id_activity_session' in params:
            query_params.append(('idActivitySession', params['id_activity_session']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/activities/schedule/enroll/change-status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unavailable_spots_get(self, **kwargs):  # noqa: E501
        """List of spots that are already filled in the activity session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unavailable_spots_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_configuration: Activity IdConfiguration
        :param datetime _date: Activity schedule date (yyyy-MM-dd)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unavailable_spots_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.unavailable_spots_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def unavailable_spots_get_with_http_info(self, **kwargs):  # noqa: E501
        """List of spots that are already filled in the activity session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unavailable_spots_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_configuration: Activity IdConfiguration
        :param datetime _date: Activity schedule date (yyyy-MM-dd)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_configuration', '_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unavailable_spots_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_configuration' in params:
            query_params.append(('idConfiguration', params['id_configuration']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/activities/list-unavailable-spots', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
