# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WorkoutApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_workout_put(self, **kwargs):  # noqa: E501
        """Change data from a client's prescribed workout  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_workout_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_workout: The workout's id to be changed.
        :param str workout_name: Add a name if you want to change the current name. To keep the current name, the field must be empty.
        :param datetime start_date: The workout's start date.
        :param datetime expiration_date: The workout's expiration date.
        :param str observation:
        :param str categories: You can add more than one category by separating them with commas. When adding categories, any categories already added to the workout will be replaced by the categories you add.
        :param str restrictions: You can add more than one restriction by separating them with commas. When adding restriction, any restriction already added to the workout will be replaced by the restriction you add.
        :param int id_professor: The ID of the professor who create the workouts.
        :param int total_weeks: Total number of weeks the client will do the workout.
        :param int weekly_frequency: The client's weekly frequency.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_workout_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_workout_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_workout_put_with_http_info(self, **kwargs):  # noqa: E501
        """Change data from a client's prescribed workout  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_workout_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_workout: The workout's id to be changed.
        :param str workout_name: Add a name if you want to change the current name. To keep the current name, the field must be empty.
        :param datetime start_date: The workout's start date.
        :param datetime expiration_date: The workout's expiration date.
        :param str observation:
        :param str categories: You can add more than one category by separating them with commas. When adding categories, any categories already added to the workout will be replaced by the categories you add.
        :param str restrictions: You can add more than one restriction by separating them with commas. When adding restriction, any restriction already added to the workout will be replaced by the restriction you add.
        :param int id_professor: The ID of the professor who create the workouts.
        :param int total_weeks: Total number of weeks the client will do the workout.
        :param int weekly_frequency: The client's weekly frequency.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_workout', 'workout_name', 'start_date', 'expiration_date', 'observation', 'categories', 'restrictions', 'id_professor', 'total_weeks', 'weekly_frequency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_workout_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_workout' in params:
            query_params.append(('idWorkout', params['id_workout']))  # noqa: E501
        if 'workout_name' in params:
            query_params.append(('workoutName', params['workout_name']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'expiration_date' in params:
            query_params.append(('expirationDate', params['expiration_date']))  # noqa: E501
        if 'observation' in params:
            query_params.append(('observation', params['observation']))  # noqa: E501
        if 'categories' in params:
            query_params.append(('categories', params['categories']))  # noqa: E501
        if 'restrictions' in params:
            query_params.append(('restrictions', params['restrictions']))  # noqa: E501
        if 'id_professor' in params:
            query_params.append(('idProfessor', params['id_professor']))  # noqa: E501
        if 'total_weeks' in params:
            query_params.append(('totalWeeks', params['total_weeks']))  # noqa: E501
        if 'weekly_frequency' in params:
            query_params.append(('weeklyFrequency', params['weekly_frequency']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workout', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_workout_get(self, **kwargs):  # noqa: E501
        """Get All Client's or Prospect's or Employee's workouts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_workout_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_client: The ID of the client to get the workouts.
        :param int id_prospect: The ID of the prospect to get the workouts.
        :param int id_employee: The ID of the employee to get the workouts.
        :param int id_workout: The ID to get the workout.
        :param bool inactive:
        :param bool deleted:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_workout_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.client_workout_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def client_workout_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get All Client's or Prospect's or Employee's workouts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_workout_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_client: The ID of the client to get the workouts.
        :param int id_prospect: The ID of the prospect to get the workouts.
        :param int id_employee: The ID of the employee to get the workouts.
        :param int id_workout: The ID to get the workout.
        :param bool inactive:
        :param bool deleted:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_client', 'id_prospect', 'id_employee', 'id_workout', 'inactive', 'deleted']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_workout_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_client' in params:
            query_params.append(('idClient', params['id_client']))  # noqa: E501
        if 'id_prospect' in params:
            query_params.append(('idProspect', params['id_prospect']))  # noqa: E501
        if 'id_employee' in params:
            query_params.append(('idEmployee', params['id_employee']))  # noqa: E501
        if 'id_workout' in params:
            query_params.append(('idWorkout', params['id_workout']))  # noqa: E501
        if 'inactive' in params:
            query_params.append(('inactive', params['inactive']))  # noqa: E501
        if 'deleted' in params:
            query_params.append(('deleted', params['deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workout/default-client-workout', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def monthyear_professor_get(self, **kwargs):  # noqa: E501
        """Get All Client's or Prospect's or Employee's workouts by Month, Year or idProfessor  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monthyear_professor_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_professor: The ID of the professor who create the workouts.
        :param int month: Month to get the workouts.
        :param int year: Year to get the workouts.
        :param int skip: Total number of records to skip.
        :param int take: Total number of records to return. (Maximum of 50)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.monthyear_professor_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.monthyear_professor_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def monthyear_professor_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get All Client's or Prospect's or Employee's workouts by Month, Year or idProfessor  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.monthyear_professor_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_professor: The ID of the professor who create the workouts.
        :param int month: Month to get the workouts.
        :param int year: Year to get the workouts.
        :param int skip: Total number of records to skip.
        :param int take: Total number of records to return. (Maximum of 50)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_professor', 'month', 'year', 'skip', 'take']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method monthyear_professor_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_professor' in params:
            query_params.append(('idProfessor', params['id_professor']))  # noqa: E501
        if 'month' in params:
            query_params.append(('month', params['month']))  # noqa: E501
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workout/workout-monthyear-professor', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workout_get(self, **kwargs):  # noqa: E501
        """Get All default Workouts  # noqa: E501

         Meaning of response objects:   - **idTreino**: The ID of the workout   - **idTreinoCopiarSerie**: The ID of the workout to copy series from (if applicable)   - **idTreinoImportarSeries**: The ID of the workout to import series from (if applicable)   - **idCliente**: The ID of the client associated with the workout (if applicable)   - **idProspect**: The ID of the prospect associated with the workout (if applicable)   - **idFuncionario**: The ID of the employee associated with the workout (if applicable)   - **nomeTreino**: Name of the workout   - **treinoPadrao**: Standard workout information (if applicable)   - **dataCriacao**: Date of creation   - **dataInicio**: Start date   - **dataValidade**: Validity date   - **observacao**: Workout observation   - **tags**: Tags associated with the workout     - **idTagTreino**: The ID of the tag associated with the workout     - **nome**: Tag name     - **idFilial**: ID of the branch (if applicable)     - **filial**: Branch information (if applicable)     - **evoTreinoTags**: Additional tag information (if applicable)   - **restricoes**: Restrictions (if applicable)   - **series**: List of workout series     - **idSerie**: The ID of the series     - **nome**: Series name     - **ordem**: Order of the series     - **observacao**: Series observation     - **itens**: List of items within the series       - **idItemSerie**: The ID of the item within the series       - **exercicio**: Exercise name       - **codigo**: Exercise code       - **repeticao**: Repetitions       - **carga**: Load or weight       - **intervalo**: Interval       - **posicao**: Position       - **vezes**: Number of times       - **observacao**: Item observation       - **ordem**: Order of the item       - **idExercicio**: ID of the exercise (if applicable)     - **sessoesConcluidas**: Number of completed sessions for the series   - **nomeProfessor**: Name of the professor   - **urlFoto**: URL of the photo (if applicable)   - **quantidadeSessoes**: Total number of sessions   - **quantidadeSemanal**: Number of weekly sessions   - **frequenciaSemana**: Weekly frequency   - **sessoesConcluidas**: Number of completed sessions   - **statusTreino**: Workout status   - **idSerieAtual**: ID of the current series (if applicable)   - **permiteImprimir**: Whether printing is allowed   - **origemEvoApp**: Whether it originated from the Evo App          Example Response      ```json   {       [           {          \"idTreino\": 67704,          \"idTreinoCopiarSerie\": 0,          \"idTreinoImportarSeries\": 0,          \"idCliente\": null,          \"idProspect\": null,          \"idFuncionario\": null,          \"nomeTreino\": \"01 Musculação Padrão (+8 de exercícios)\",          \"treinoPadrao\": null,          \"dataCriacao\": null,          \"dataInicio\": null,          \"dataValidade\": null,          \"observacao\": \"Musculação Padrão com mais de 8 exercícios (teste impressão de treinos)\",          \"tags\": [              {                   \"idTagTreino\": 117,                   \"nome\": \"Musculação\",                   \"idFilial\": 1,                   \"filial\": null,                   \"evoTreinoTags\": null              }          ],          \"restricoes\": null,          \"series\": [              {                  \"idSerie\": 148442,                  \"nome\": \"Treino 0A\",                  \"ordem\": 1,                  \"observacao\": \"Treino A\",                  \"itens\": [                      {                          \"idItemSerie\": 3340575,                          \"exercicio\": \"FLEXÃO ABERTA (A)\",                          \"codigo\": \"815\",                          \"repeticao\": \"10\",                          \"carga\": \"50\",                          \"intervalo\": \"1\",                          \"posicao\": \"2\",                          \"vezes\": \"3\",                          \"observacao\": \"ADM\",                          \"ordem\": 1,                          \"idExercicio\": null                      },                      {           \"idItemSerie\": 3340576,                          \"exercicio\": \"REMADA FECHADA MÁQUINA\",                          \"codigo\": \"555\",                          \"repeticao\": \"10\",                          \"carga\": \"50\",                          \"intervalo\": \"1\",                          \"posicao\": \"\",                          \"vezes\": \"3\",                          \"observacao\": \"\",                          \"ordem\": 2,                          \"idExercicio\": null                      }                  ],                  \"sessoesConcluidas\": 0              },              {           \"idSerie\": 148443,                  \"nome\": \"Treino 0B\",                  \"ordem\": 2,                  \"observacao\": null,                  \"itens\": [                      {          \"idItemSerie\": 3340578,                          \"exercicio\": \"LOMBAR NO GRAVITON (A)\",                          \"codigo\": \"432\",                          \"repeticao\": \"10\",                          \"carga\": \"50\",                          \"intervalo\": \"1\",                          \"posicao\": \"\",                          \"vezes\": \"3\",                          \"observacao\": \"\",                          \"ordem\": 1,                          \"idExercicio\": null                      },                      {          \"idItemSerie\": 3340579,                          \"exercicio\": \"ROSCA BARRA RETA\",                          \"codigo\": \"307\",                          \"repeticao\": \"10\",                          \"carga\": \"50\",                          \"intervalo\": \"1\",                          \"posicao\": \"\",                          \"vezes\": \"3\",                          \"observacao\": \"\",                          \"ordem\": 2,                          \"idExercicio\": null                      }                  ],                  \"sessoesConcluidas\": 0              }          ],          \"nomeProfessor\": \"SUPORTEEVO\",          \"urlFoto\": null,          \"quantidadeSessoes\": null,          \"quantidadeSemanal\": null,          \"frequenciaSemana\": null,          \"sessoesConcluidas\": 0,          \"statusTreino\": 0,          \"idSerieAtual\": null,          \"permiteImprimir\": false,          \"origemEvoApp\": false      }  ]   }   ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workout_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_employee: The ID of the employee associated with the workouts.
        :param int id_tag: The optional ID of the tag associated with the workouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workout_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.workout_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def workout_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get All default Workouts  # noqa: E501

         Meaning of response objects:   - **idTreino**: The ID of the workout   - **idTreinoCopiarSerie**: The ID of the workout to copy series from (if applicable)   - **idTreinoImportarSeries**: The ID of the workout to import series from (if applicable)   - **idCliente**: The ID of the client associated with the workout (if applicable)   - **idProspect**: The ID of the prospect associated with the workout (if applicable)   - **idFuncionario**: The ID of the employee associated with the workout (if applicable)   - **nomeTreino**: Name of the workout   - **treinoPadrao**: Standard workout information (if applicable)   - **dataCriacao**: Date of creation   - **dataInicio**: Start date   - **dataValidade**: Validity date   - **observacao**: Workout observation   - **tags**: Tags associated with the workout     - **idTagTreino**: The ID of the tag associated with the workout     - **nome**: Tag name     - **idFilial**: ID of the branch (if applicable)     - **filial**: Branch information (if applicable)     - **evoTreinoTags**: Additional tag information (if applicable)   - **restricoes**: Restrictions (if applicable)   - **series**: List of workout series     - **idSerie**: The ID of the series     - **nome**: Series name     - **ordem**: Order of the series     - **observacao**: Series observation     - **itens**: List of items within the series       - **idItemSerie**: The ID of the item within the series       - **exercicio**: Exercise name       - **codigo**: Exercise code       - **repeticao**: Repetitions       - **carga**: Load or weight       - **intervalo**: Interval       - **posicao**: Position       - **vezes**: Number of times       - **observacao**: Item observation       - **ordem**: Order of the item       - **idExercicio**: ID of the exercise (if applicable)     - **sessoesConcluidas**: Number of completed sessions for the series   - **nomeProfessor**: Name of the professor   - **urlFoto**: URL of the photo (if applicable)   - **quantidadeSessoes**: Total number of sessions   - **quantidadeSemanal**: Number of weekly sessions   - **frequenciaSemana**: Weekly frequency   - **sessoesConcluidas**: Number of completed sessions   - **statusTreino**: Workout status   - **idSerieAtual**: ID of the current series (if applicable)   - **permiteImprimir**: Whether printing is allowed   - **origemEvoApp**: Whether it originated from the Evo App          Example Response      ```json   {       [           {          \"idTreino\": 67704,          \"idTreinoCopiarSerie\": 0,          \"idTreinoImportarSeries\": 0,          \"idCliente\": null,          \"idProspect\": null,          \"idFuncionario\": null,          \"nomeTreino\": \"01 Musculação Padrão (+8 de exercícios)\",          \"treinoPadrao\": null,          \"dataCriacao\": null,          \"dataInicio\": null,          \"dataValidade\": null,          \"observacao\": \"Musculação Padrão com mais de 8 exercícios (teste impressão de treinos)\",          \"tags\": [              {                   \"idTagTreino\": 117,                   \"nome\": \"Musculação\",                   \"idFilial\": 1,                   \"filial\": null,                   \"evoTreinoTags\": null              }          ],          \"restricoes\": null,          \"series\": [              {                  \"idSerie\": 148442,                  \"nome\": \"Treino 0A\",                  \"ordem\": 1,                  \"observacao\": \"Treino A\",                  \"itens\": [                      {                          \"idItemSerie\": 3340575,                          \"exercicio\": \"FLEXÃO ABERTA (A)\",                          \"codigo\": \"815\",                          \"repeticao\": \"10\",                          \"carga\": \"50\",                          \"intervalo\": \"1\",                          \"posicao\": \"2\",                          \"vezes\": \"3\",                          \"observacao\": \"ADM\",                          \"ordem\": 1,                          \"idExercicio\": null                      },                      {           \"idItemSerie\": 3340576,                          \"exercicio\": \"REMADA FECHADA MÁQUINA\",                          \"codigo\": \"555\",                          \"repeticao\": \"10\",                          \"carga\": \"50\",                          \"intervalo\": \"1\",                          \"posicao\": \"\",                          \"vezes\": \"3\",                          \"observacao\": \"\",                          \"ordem\": 2,                          \"idExercicio\": null                      }                  ],                  \"sessoesConcluidas\": 0              },              {           \"idSerie\": 148443,                  \"nome\": \"Treino 0B\",                  \"ordem\": 2,                  \"observacao\": null,                  \"itens\": [                      {          \"idItemSerie\": 3340578,                          \"exercicio\": \"LOMBAR NO GRAVITON (A)\",                          \"codigo\": \"432\",                          \"repeticao\": \"10\",                          \"carga\": \"50\",                          \"intervalo\": \"1\",                          \"posicao\": \"\",                          \"vezes\": \"3\",                          \"observacao\": \"\",                          \"ordem\": 1,                          \"idExercicio\": null                      },                      {          \"idItemSerie\": 3340579,                          \"exercicio\": \"ROSCA BARRA RETA\",                          \"codigo\": \"307\",                          \"repeticao\": \"10\",                          \"carga\": \"50\",                          \"intervalo\": \"1\",                          \"posicao\": \"\",                          \"vezes\": \"3\",                          \"observacao\": \"\",                          \"ordem\": 2,                          \"idExercicio\": null                      }                  ],                  \"sessoesConcluidas\": 0              }          ],          \"nomeProfessor\": \"SUPORTEEVO\",          \"urlFoto\": null,          \"quantidadeSessoes\": null,          \"quantidadeSemanal\": null,          \"frequenciaSemana\": null,          \"sessoesConcluidas\": 0,          \"statusTreino\": 0,          \"idSerieAtual\": null,          \"permiteImprimir\": false,          \"origemEvoApp\": false      }  ]   }   ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workout_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_employee: The ID of the employee associated with the workouts.
        :param int id_tag: The optional ID of the tag associated with the workouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_employee', 'id_tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workout_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_employee' in params:
            query_params.append(('idEmployee', params['id_employee']))  # noqa: E501
        if 'id_tag' in params:
            query_params.append(('idTag', params['id_tag']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workout/default-workout', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workout_to_client_post(self, **kwargs):  # noqa: E501
        """Link Workout for Client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workout_to_client_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int source_workout_id: The ID of the source workout.
        :param int id_prescription_employee: The ID of the employee responsible for the prescription.
        :param int id_client: The ID of the client to link the workout to.
        :param int id_prospect: The ID of the prospect to link the workout to.
        :param int id_employee: The ID of the employee to link the workout to.
        :param datetime prescription_date: Represent a date associated with a prescription yyyy-MM-dd.
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workout_to_client_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.workout_to_client_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def workout_to_client_post_with_http_info(self, **kwargs):  # noqa: E501
        """Link Workout for Client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workout_to_client_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int source_workout_id: The ID of the source workout.
        :param int id_prescription_employee: The ID of the employee responsible for the prescription.
        :param int id_client: The ID of the client to link the workout to.
        :param int id_prospect: The ID of the prospect to link the workout to.
        :param int id_employee: The ID of the employee to link the workout to.
        :param datetime prescription_date: Represent a date associated with a prescription yyyy-MM-dd.
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_workout_id', 'id_prescription_employee', 'id_client', 'id_prospect', 'id_employee', 'prescription_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workout_to_client_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'source_workout_id' in params:
            query_params.append(('sourceWorkoutId', params['source_workout_id']))  # noqa: E501
        if 'id_prescription_employee' in params:
            query_params.append(('idPrescriptionEmployee', params['id_prescription_employee']))  # noqa: E501
        if 'id_client' in params:
            query_params.append(('idClient', params['id_client']))  # noqa: E501
        if 'id_prospect' in params:
            query_params.append(('idProspect', params['id_prospect']))  # noqa: E501
        if 'id_employee' in params:
            query_params.append(('idEmployee', params['id_employee']))  # noqa: E501
        if 'prescription_date' in params:
            query_params.append(('prescriptionDate', params['prescription_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workout/link-workout-to-client', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
