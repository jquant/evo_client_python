# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MemberMembershipApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_membermembership_cancellation_post(self, **kwargs):  # noqa: E501
        """Cancel MemberMembership  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_membermembership_cancellation_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member_membership: Id MemberMembership
        :param int id_member_branch: Id Member Branch of Cancellation
        :param datetime cancellation_date: Date of cancellation
        :param str reason_cancellation: Reason of Cancellation
        :param str notice_cancellaton: Notes of Cancellation
        :param bool cancel_future_releases: If 'true' all the releases will be canceled
        :param bool cancel_future_sessions: If 'true' all the sessions will be canceled
        :param bool convert_credit_days: Convert all remaining credits e days to use
        :param bool schedule_cancellation: Activate or deactivate schedule cancellation date
        :param datetime schedule_cancellation_date: Date of Cancellation if ScheduleCancellation = 'true'
        :param bool add_fine: Activate or deactivate Fine
        :param float value_fine: Value of Fine, to use param AddFine must have activated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_membermembership_cancellation_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_membermembership_cancellation_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_membermembership_cancellation_post_with_http_info(self, **kwargs):  # noqa: E501
        """Cancel MemberMembership  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_membermembership_cancellation_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member_membership: Id MemberMembership
        :param int id_member_branch: Id Member Branch of Cancellation
        :param datetime cancellation_date: Date of cancellation
        :param str reason_cancellation: Reason of Cancellation
        :param str notice_cancellaton: Notes of Cancellation
        :param bool cancel_future_releases: If 'true' all the releases will be canceled
        :param bool cancel_future_sessions: If 'true' all the sessions will be canceled
        :param bool convert_credit_days: Convert all remaining credits e days to use
        :param bool schedule_cancellation: Activate or deactivate schedule cancellation date
        :param datetime schedule_cancellation_date: Date of Cancellation if ScheduleCancellation = 'true'
        :param bool add_fine: Activate or deactivate Fine
        :param float value_fine: Value of Fine, to use param AddFine must have activated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_member_membership', 'id_member_branch', 'cancellation_date', 'reason_cancellation', 'notice_cancellaton', 'cancel_future_releases', 'cancel_future_sessions', 'convert_credit_days', 'schedule_cancellation', 'schedule_cancellation_date', 'add_fine', 'value_fine']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_membermembership_cancellation_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_member_membership' in params:
            query_params.append(('IdMemberMembership', params['id_member_membership']))  # noqa: E501
        if 'id_member_branch' in params:
            query_params.append(('IdMemberBranch', params['id_member_branch']))  # noqa: E501
        if 'cancellation_date' in params:
            query_params.append(('CancellationDate', params['cancellation_date']))  # noqa: E501
        if 'reason_cancellation' in params:
            query_params.append(('ReasonCancellation', params['reason_cancellation']))  # noqa: E501
        if 'notice_cancellaton' in params:
            query_params.append(('NoticeCancellaton', params['notice_cancellaton']))  # noqa: E501
        if 'cancel_future_releases' in params:
            query_params.append(('CancelFutureReleases', params['cancel_future_releases']))  # noqa: E501
        if 'cancel_future_sessions' in params:
            query_params.append(('CancelFutureSessions', params['cancel_future_sessions']))  # noqa: E501
        if 'convert_credit_days' in params:
            query_params.append(('ConvertCreditDays', params['convert_credit_days']))  # noqa: E501
        if 'schedule_cancellation' in params:
            query_params.append(('ScheduleCancellation', params['schedule_cancellation']))  # noqa: E501
        if 'schedule_cancellation_date' in params:
            query_params.append(('ScheduleCancellationDate', params['schedule_cancellation_date']))  # noqa: E501
        if 'add_fine' in params:
            query_params.append(('AddFine', params['add_fine']))  # noqa: E501
        if 'value_fine' in params:
            query_params.append(('ValueFine', params['value_fine']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/membermembership/cancellation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_membermembership_id_member_membership_get(self, id_member_membership, **kwargs):  # noqa: E501
        """Get summary of MemberMemberships by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_membermembership_id_member_membership_get(id_member_membership, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member_membership: Id MemberMembership (required)
        :return: MemberMembershipApiViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_membermembership_id_member_membership_get_with_http_info(id_member_membership, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_membermembership_id_member_membership_get_with_http_info(id_member_membership, **kwargs)  # noqa: E501
            return data

    def api_v1_membermembership_id_member_membership_get_with_http_info(self, id_member_membership, **kwargs):  # noqa: E501
        """Get summary of MemberMemberships by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_membermembership_id_member_membership_get_with_http_info(id_member_membership, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member_membership: Id MemberMembership (required)
        :return: MemberMembershipApiViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_member_membership']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_membermembership_id_member_membership_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_member_membership' is set
        if ('id_member_membership' not in params or
                params['id_member_membership'] is None):
            raise ValueError("Missing the required parameter `id_member_membership` when calling `api_v1_membermembership_id_member_membership_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_member_membership' in params:
            path_params['idMemberMembership'] = params['id_member_membership']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/membermembership/{idMemberMembership}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MemberMembershipApiViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_membermembership_get(self, **kwargs):  # noqa: E501
        """Get summary of canceled MemberMemberships  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_membermembership_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member:
        :param int id_membership:
        :param str member_name:
        :param datetime register_date_start:
        :param datetime register_date_end:
        :param datetime cancel_date_start:
        :param datetime cancel_date_end:
        :param bool show_transfers: Show transferred contracts.
        :param bool show_aggregators: Show aggregators contracts.
        :param bool show_vips: Show VIP category contracts.
        :param str contract_type: Filter by a comma separated list of types of contract. types: 1 - Common, 3 - Plan extension, 4 - Locking extension, 5 - Monthly recurring, 6 - Recurring monthly with validity, 7 - Monthly recurring with automatic renewal, 8 - Additional dependent, 9 - Annual with a specific end, 10 - Additional contract
        :param int take: Total number of records to return. (Maximum of 25)
        :param int skip: Total number of records to skip.
        :return: list[ContratosCanceladosResumoApiViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_membermembership_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_membermembership_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_membermembership_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get summary of canceled MemberMemberships  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_membermembership_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member:
        :param int id_membership:
        :param str member_name:
        :param datetime register_date_start:
        :param datetime register_date_end:
        :param datetime cancel_date_start:
        :param datetime cancel_date_end:
        :param bool show_transfers: Show transferred contracts.
        :param bool show_aggregators: Show aggregators contracts.
        :param bool show_vips: Show VIP category contracts.
        :param str contract_type: Filter by a comma separated list of types of contract. types: 1 - Common, 3 - Plan extension, 4 - Locking extension, 5 - Monthly recurring, 6 - Recurring monthly with validity, 7 - Monthly recurring with automatic renewal, 8 - Additional dependent, 9 - Annual with a specific end, 10 - Additional contract
        :param int take: Total number of records to return. (Maximum of 25)
        :param int skip: Total number of records to skip.
        :return: list[ContratosCanceladosResumoApiViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_member', 'id_membership', 'member_name', 'register_date_start', 'register_date_end', 'cancel_date_start', 'cancel_date_end', 'show_transfers', 'show_aggregators', 'show_vips', 'contract_type', 'take', 'skip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_membermembership_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_member' in params:
            query_params.append(('idMember', params['id_member']))  # noqa: E501
        if 'id_membership' in params:
            query_params.append(('idMembership', params['id_membership']))  # noqa: E501
        if 'member_name' in params:
            query_params.append(('memberName', params['member_name']))  # noqa: E501
        if 'register_date_start' in params:
            query_params.append(('registerDateStart', params['register_date_start']))  # noqa: E501
        if 'register_date_end' in params:
            query_params.append(('registerDateEnd', params['register_date_end']))  # noqa: E501
        if 'cancel_date_start' in params:
            query_params.append(('cancelDateStart', params['cancel_date_start']))  # noqa: E501
        if 'cancel_date_end' in params:
            query_params.append(('cancelDateEnd', params['cancel_date_end']))  # noqa: E501
        if 'show_transfers' in params:
            query_params.append(('showTransfers', params['show_transfers']))  # noqa: E501
        if 'show_aggregators' in params:
            query_params.append(('showAggregators', params['show_aggregators']))  # noqa: E501
        if 'show_vips' in params:
            query_params.append(('showVips', params['show_vips']))  # noqa: E501
        if 'contract_type' in params:
            query_params.append(('contractType', params['contract_type']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/membermembership', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContratosCanceladosResumoApiViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
