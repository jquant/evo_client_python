# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SalesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_sales_id_sale_get(self, id_sale, **kwargs):  # noqa: E501
        """Get sale by Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_sales_id_sale_get(id_sale, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_sale: (required)
        :return: SalesViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_sales_id_sale_get_with_http_info(id_sale, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_sales_id_sale_get_with_http_info(id_sale, **kwargs)  # noqa: E501
            return data

    def api_v1_sales_id_sale_get_with_http_info(self, id_sale, **kwargs):  # noqa: E501
        """Get sale by Id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_sales_id_sale_get_with_http_info(id_sale, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_sale: (required)
        :return: SalesViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_sale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_sales_id_sale_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_sale' is set
        if ('id_sale' not in params or
                params['id_sale'] is None):
            raise ValueError("Missing the required parameter `id_sale` when calling `api_v1_sales_id_sale_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_sale' in params:
            path_params['idSale'] = params['id_sale']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sales/{idSale}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SalesViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_sales_post(self, **kwargs):  # noqa: E501
        """Create a new sale  # noqa: E501

        payment:        Credit Card = 1,      Boleto = 2,      Sale Credits = 3,      Transfer = 4,      ValorZerado = 5,      LinkCheckout = 6 or null,      Pix = 7  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_sales_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewSaleViewModel body:
        :return: NewSaleViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_sales_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_sales_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_sales_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new sale  # noqa: E501

        payment:        Credit Card = 1,      Boleto = 2,      Sale Credits = 3,      Transfer = 4,      ValorZerado = 5,      LinkCheckout = 6 or null,      Pix = 7  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_sales_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewSaleViewModel body:
        :return: NewSaleViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_sales_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sales', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewSaleViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_sales_get(self, **kwargs):  # noqa: E501
        """Get sales  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_sales_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member: Filter by a member Id.
        :param datetime date_sale_start: Filter by registration of the sales starting in a date (yyyy-mm-dd)
        :param datetime date_sale_end: Filter by registration of the sales ending  in a date (yyyy-mm-dd)
        :param datetime removal_date_start: Filter by removal of the sales starting in a date (yyyy-mm-dd)
        :param datetime removal_date_end: Filter by removal of the sales ending  in a date  (yyyy-mm-dd)
        :param datetime receivables_registration_date_start: Filter sales that had recievables starting in a date (yyyy-mm-dd)
        :param datetime receivables_registration_date_end: Filter sales that had recievables ending in a date (yyyy-mm-dd)
        :param bool show_receivables: Flag to show sale receivables and sale value without credit value
        :param int take: Total number of records to return. (Maximum of 100, default of 25)
        :param int skip: Total number of records to skip.
        :param bool only_membership: Return only sales with membership.
        :param bool at_least_monthly: remove membership less than 30 days (as old removeMonthly)
        :param bool fl_swimming: Filters memberships by the swimming flag
        :param bool show_only_active_memberships:
        :param bool show_allow_locker:
        :param bool only_total_pass:
        :return: SalesViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_sales_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_sales_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_sales_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get sales  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_sales_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member: Filter by a member Id.
        :param datetime date_sale_start: Filter by registration of the sales starting in a date (yyyy-mm-dd)
        :param datetime date_sale_end: Filter by registration of the sales ending  in a date (yyyy-mm-dd)
        :param datetime removal_date_start: Filter by removal of the sales starting in a date (yyyy-mm-dd)
        :param datetime removal_date_end: Filter by removal of the sales ending  in a date  (yyyy-mm-dd)
        :param datetime receivables_registration_date_start: Filter sales that had recievables starting in a date (yyyy-mm-dd)
        :param datetime receivables_registration_date_end: Filter sales that had recievables ending in a date (yyyy-mm-dd)
        :param bool show_receivables: Flag to show sale receivables and sale value without credit value
        :param int take: Total number of records to return. (Maximum of 100, default of 25)
        :param int skip: Total number of records to skip.
        :param bool only_membership: Return only sales with membership.
        :param bool at_least_monthly: remove membership less than 30 days (as old removeMonthly)
        :param bool fl_swimming: Filters memberships by the swimming flag
        :param bool show_only_active_memberships:
        :param bool show_allow_locker:
        :param bool only_total_pass:
        :return: SalesViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_member', 'date_sale_start', 'date_sale_end', 'removal_date_start', 'removal_date_end', 'receivables_registration_date_start', 'receivables_registration_date_end', 'show_receivables', 'take', 'skip', 'only_membership', 'at_least_monthly', 'fl_swimming', 'show_only_active_memberships', 'show_allow_locker', 'only_total_pass']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_sales_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_member' in params:
            query_params.append(('idMember', params['id_member']))  # noqa: E501
        if 'date_sale_start' in params:
            query_params.append(('dateSaleStart', params['date_sale_start']))  # noqa: E501
        if 'date_sale_end' in params:
            query_params.append(('dateSaleEnd', params['date_sale_end']))  # noqa: E501
        if 'removal_date_start' in params:
            query_params.append(('removalDateStart', params['removal_date_start']))  # noqa: E501
        if 'removal_date_end' in params:
            query_params.append(('removalDateEnd', params['removal_date_end']))  # noqa: E501
        if 'receivables_registration_date_start' in params:
            query_params.append(('receivablesRegistrationDateStart', params['receivables_registration_date_start']))  # noqa: E501
        if 'receivables_registration_date_end' in params:
            query_params.append(('receivablesRegistrationDateEnd', params['receivables_registration_date_end']))  # noqa: E501
        if 'show_receivables' in params:
            query_params.append(('showReceivables', params['show_receivables']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'only_membership' in params:
            query_params.append(('onlyMembership', params['only_membership']))  # noqa: E501
        if 'at_least_monthly' in params:
            query_params.append(('atLeastMonthly', params['at_least_monthly']))  # noqa: E501
        if 'fl_swimming' in params:
            query_params.append(('flSwimming', params['fl_swimming']))  # noqa: E501
        if 'show_only_active_memberships' in params:
            query_params.append(('showOnlyActiveMemberships', params['show_only_active_memberships']))  # noqa: E501
        if 'show_allow_locker' in params:
            query_params.append(('showAllowLocker', params['show_allow_locker']))  # noqa: E501
        if 'only_total_pass' in params:
            query_params.append(('onlyTotalPass', params['only_total_pass']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/sales', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SalesViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def items_get(self, **kwargs):  # noqa: E501
        """Return itens for sale -> site/totem  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_branch:
        :return: list[SalesItemsViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.items_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.items_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def items_get_with_http_info(self, **kwargs):  # noqa: E501
        """Return itens for sale -> site/totem  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_branch:
        :return: list[SalesItemsViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_branch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method items_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_branch' in params:
            query_params.append(('idBranch', params['id_branch']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sales/sales-items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SalesItemsViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def session_id_get(self, **kwargs):  # noqa: E501
        """Get sales  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.session_id_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Filter by a session Id.
        :param datetime _date: Filter by registration of the sale in a date (yyyy-mm-dd)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.session_id_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.session_id_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def session_id_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get sales  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.session_id_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Filter by a session Id.
        :param datetime _date: Filter by registration of the sale in a date (yyyy-mm-dd)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', '_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method session_id_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'session_id' in params:
            query_params.append(('sessionId', params['session_id']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sales/by-session-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
