# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MembersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_members_auth_post(self, **kwargs):  # noqa: E501
        """Authenticate member  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_auth_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Member e-mail
        :param str password: Member password
        :param bool change_password: Check true if the password has not been set, create a new one
        :return: MemberAuthenticateViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_members_auth_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_members_auth_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_members_auth_post_with_http_info(self, **kwargs):  # noqa: E501
        """Authenticate member  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_auth_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Member e-mail
        :param str password: Member password
        :param bool change_password: Check true if the password has not been set, create a new one
        :return: MemberAuthenticateViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'password', 'change_password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_members_auth_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501
        if 'change_password' in params:
            query_params.append(('changePassword', params['change_password']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/members/auth', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MemberAuthenticateViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_members_basic_get(self, **kwargs):  # noqa: E501
        """Get basic member information. This endpoint does not return sensitive information. To return a member it is necessary to search by e-mail or document or phone or idsMembers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_basic_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Filter by a member e-mail
        :param str document: Filter by a member document
        :param str phone: Filter by a member telephone or cellphone Ex.:1112341234
        :param int id_member: Filter by member id
        :param int take: Total number of records to return. (Maximum of 50)
        :param int skip: Total number of records to skip.
        :return: MembersBasicApiViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_members_basic_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_members_basic_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_members_basic_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get basic member information. This endpoint does not return sensitive information. To return a member it is necessary to search by e-mail or document or phone or idsMembers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_basic_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Filter by a member e-mail
        :param str document: Filter by a member document
        :param str phone: Filter by a member telephone or cellphone Ex.:1112341234
        :param int id_member: Filter by member id
        :param int take: Total number of records to return. (Maximum of 50)
        :param int skip: Total number of records to skip.
        :return: MembersBasicApiViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'document', 'phone', 'id_member', 'take', 'skip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_members_basic_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'document' in params:
            query_params.append(('document', params['document']))  # noqa: E501
        if 'phone' in params:
            query_params.append(('phone', params['phone']))  # noqa: E501
        if 'id_member' in params:
            query_params.append(('idMember', params['id_member']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/members/basic', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MembersBasicApiViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_members_fitcoins_get(self, **kwargs):  # noqa: E501
        """Get member fitcoins  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_fitcoins_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member: Id Member
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_members_fitcoins_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_members_fitcoins_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_members_fitcoins_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get member fitcoins  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_fitcoins_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member: Id Member
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_members_fitcoins_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_member' in params:
            query_params.append(('idMember', params['id_member']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/members/fitcoins', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_members_fitcoins_put(self, **kwargs):  # noqa: E501
        """Update a member fitcoins  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_fitcoins_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member: Id Member
        :param int type: 1 - Add Fitcoins, 2 - Remove Fitcoins
        :param int fitcoin: Quantity add/remove fitcoin
        :param str reason: Reason add/remove fitcoin
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_members_fitcoins_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_members_fitcoins_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_members_fitcoins_put_with_http_info(self, **kwargs):  # noqa: E501
        """Update a member fitcoins  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_fitcoins_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member: Id Member
        :param int type: 1 - Add Fitcoins, 2 - Remove Fitcoins
        :param int fitcoin: Quantity add/remove fitcoin
        :param str reason: Reason add/remove fitcoin
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_member', 'type', 'fitcoin', 'reason']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_members_fitcoins_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_member' in params:
            query_params.append(('idMember', params['id_member']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'fitcoin' in params:
            query_params.append(('fitcoin', params['fitcoin']))  # noqa: E501
        if 'reason' in params:
            query_params.append(('reason', params['reason']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/members/fitcoins', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_members_get(self, **kwargs):  # noqa: E501
        """Get members  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Filter by members name
        :param str email: Filter by a member e-mail
        :param str document: Filter by a member document
        :param str phone: Filter by a member telephone or cellphone Ex.:1112341234
        :param datetime conversion_date_start: Filter by a member conversion date starting in: (yyyy-mm-dd)
        :param datetime conversion_date_end: Filter by a member conversion date ending in: (yyyy-mm-dd)
        :param datetime register_date_start: Filter by a member register date starting in: (yyyy-mm-dd)
        :param datetime register_date_end: Filter by a member register date ending in: (yyyy-mm-dd)
        :param datetime membership_start_date_start: Filter by a membership start date from: (yyyy-mm-dd)
        :param datetime membership_start_date_end: Filter by a membership start date to: (yyyy-mm-dd)
        :param datetime membership_cancel_date_start: Filter by a membership cancel date from: (yyyy-mm-dd)
        :param datetime membership_cancel_date_end: Filter by a membership cancel date to: (yyyy-mm-dd)
        :param int status: Filter by a member state: 1 - Active (Suspendeds and Vips included), 2 - Inactive
        :param str token_gympass: Filter by the member gympass token gympass
        :param int take: Total number of records to return. (Maximum of 50)
        :param int skip: Total number of records to skip.
        :param str ids_members: Filter by member ids. Add member ids separated by comma. Example: 1,2,3
        :param bool only_personal: Show only personal trainers
        :param int personal_type: Filter by personal type: 1 - Internal, 2 - External
        :param bool show_activity_data:
        :return: MembersApiViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_members_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_members_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_members_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get members  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Filter by members name
        :param str email: Filter by a member e-mail
        :param str document: Filter by a member document
        :param str phone: Filter by a member telephone or cellphone Ex.:1112341234
        :param datetime conversion_date_start: Filter by a member conversion date starting in: (yyyy-mm-dd)
        :param datetime conversion_date_end: Filter by a member conversion date ending in: (yyyy-mm-dd)
        :param datetime register_date_start: Filter by a member register date starting in: (yyyy-mm-dd)
        :param datetime register_date_end: Filter by a member register date ending in: (yyyy-mm-dd)
        :param datetime membership_start_date_start: Filter by a membership start date from: (yyyy-mm-dd)
        :param datetime membership_start_date_end: Filter by a membership start date to: (yyyy-mm-dd)
        :param datetime membership_cancel_date_start: Filter by a membership cancel date from: (yyyy-mm-dd)
        :param datetime membership_cancel_date_end: Filter by a membership cancel date to: (yyyy-mm-dd)
        :param int status: Filter by a member state: 1 - Active (Suspendeds and Vips included), 2 - Inactive
        :param str token_gympass: Filter by the member gympass token gympass
        :param int take: Total number of records to return. (Maximum of 50)
        :param int skip: Total number of records to skip.
        :param str ids_members: Filter by member ids. Add member ids separated by comma. Example: 1,2,3
        :param bool only_personal: Show only personal trainers
        :param int personal_type: Filter by personal type: 1 - Internal, 2 - External
        :param bool show_activity_data:
        :return: MembersApiViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'email', 'document', 'phone', 'conversion_date_start', 'conversion_date_end', 'register_date_start', 'register_date_end', 'membership_start_date_start', 'membership_start_date_end', 'membership_cancel_date_start', 'membership_cancel_date_end', 'status', 'token_gympass', 'take', 'skip', 'ids_members', 'only_personal', 'personal_type', 'show_activity_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_members_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'document' in params:
            query_params.append(('document', params['document']))  # noqa: E501
        if 'phone' in params:
            query_params.append(('phone', params['phone']))  # noqa: E501
        if 'conversion_date_start' in params:
            query_params.append(('conversionDateStart', params['conversion_date_start']))  # noqa: E501
        if 'conversion_date_end' in params:
            query_params.append(('conversionDateEnd', params['conversion_date_end']))  # noqa: E501
        if 'register_date_start' in params:
            query_params.append(('registerDateStart', params['register_date_start']))  # noqa: E501
        if 'register_date_end' in params:
            query_params.append(('registerDateEnd', params['register_date_end']))  # noqa: E501
        if 'membership_start_date_start' in params:
            query_params.append(('membershipStartDateStart', params['membership_start_date_start']))  # noqa: E501
        if 'membership_start_date_end' in params:
            query_params.append(('membershipStartDateEnd', params['membership_start_date_end']))  # noqa: E501
        if 'membership_cancel_date_start' in params:
            query_params.append(('membershipCancelDateStart', params['membership_cancel_date_start']))  # noqa: E501
        if 'membership_cancel_date_end' in params:
            query_params.append(('membershipCancelDateEnd', params['membership_cancel_date_end']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'token_gympass' in params:
            query_params.append(('tokenGympass', params['token_gympass']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'ids_members' in params:
            query_params.append(('idsMembers', params['ids_members']))  # noqa: E501
        if 'only_personal' in params:
            query_params.append(('onlyPersonal', params['only_personal']))  # noqa: E501
        if 'personal_type' in params:
            query_params.append(('personalType', params['personal_type']))  # noqa: E501
        if 'show_activity_data' in params:
            query_params.append(('showActivityData', params['show_activity_data']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MembersApiViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_members_id_member_card_put(self, id_member, **kwargs):  # noqa: E501
        """Update a member card number  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_id_member_card_put(id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member: Filter by a member (required)
        :param str card_number: Card number
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_members_id_member_card_put_with_http_info(id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_members_id_member_card_put_with_http_info(id_member, **kwargs)  # noqa: E501
            return data

    def api_v1_members_id_member_card_put_with_http_info(self, id_member, **kwargs):  # noqa: E501
        """Update a member card number  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_id_member_card_put_with_http_info(id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member: Filter by a member (required)
        :param str card_number: Card number
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_member', 'card_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_members_id_member_card_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `api_v1_members_id_member_card_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []
        if 'card_number' in params:
            query_params.append(('cardNumber', params['card_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/members/{idMember}/card', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_members_id_member_get(self, id_member, **kwargs):  # noqa: E501
        """Get member profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_id_member_get(id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member: Filter by a member (required)
        :return: ClienteDetalhesBasicosApiViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_members_id_member_get_with_http_info(id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_members_id_member_get_with_http_info(id_member, **kwargs)  # noqa: E501
            return data

    def api_v1_members_id_member_get_with_http_info(self, id_member, **kwargs):  # noqa: E501
        """Get member profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_id_member_get_with_http_info(id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member: Filter by a member (required)
        :return: ClienteDetalhesBasicosApiViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_members_id_member_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `api_v1_members_id_member_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/members/{idMember}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClienteDetalhesBasicosApiViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_members_reset_password_get(self, **kwargs):  # noqa: E501
        """Get link for reset password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_reset_password_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool sign_in: Check true if after change password you want sign in
        :param str user: Filter by CPF, idMember or e-mail
        :return: MemberAuthenticateViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_members_reset_password_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_members_reset_password_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_members_reset_password_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get link for reset password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_reset_password_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool sign_in: Check true if after change password you want sign in
        :param str user: Filter by CPF, idMember or e-mail
        :return: MemberAuthenticateViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sign_in', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_members_reset_password_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sign_in' in params:
            query_params.append(('signIn', params['sign_in']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/members/resetPassword', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MemberAuthenticateViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_members_services_get(self, **kwargs):  # noqa: E501
        """Get member services  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_services_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member: Filter by member id
        :return: list[MemberServiceViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_members_services_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_members_services_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_members_services_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get member services  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_services_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member: Filter by member id
        :return: list[MemberServiceViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_members_services_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_member' in params:
            query_params.append(('idMember', params['id_member']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/members/services', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MemberServiceViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_members_transfer_post(self, **kwargs):  # noqa: E501
        """api_v1_members_transfer_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_transfer_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClienteTransferenciaViewModel body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_members_transfer_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_members_transfer_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_members_transfer_post_with_http_info(self, **kwargs):  # noqa: E501
        """api_v1_members_transfer_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_members_transfer_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClienteTransferenciaViewModel body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_members_transfer_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/members/transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def member_data_id_member_patch(self, id_member, **kwargs):  # noqa: E501
        """Update basic member data  # noqa: E501

        Example body                     Body           {              {                  \"idContactType\": 1, { 1 = Telephone, 2 = Cellphone}              }              \"gender\": \"string\", { \"M\" = Male, \"F\" = Female, \"P\" = Other }              \"idState\": 0 {1 = AC, 2 = AL, 3 = AP, 4 = AM, 5 = BA, 6 = CE, 7 = DF, 8 = ES, 9 = GO, 10 = MA, 11 = MT, 12 = MS, 13 = MG, 14 = PA, 15 = PB, 16 = PR, 17 = PE, 18 = PI, 19 = RJ, 20 = RN, 21 = RS, 22 = RO, 23 = RR, 24 = SC, 25 = SP, 26 = SE, 27 = TO}            }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_data_id_member_patch(id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member: (required)
        :param MemberDataViewModel body:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.member_data_id_member_patch_with_http_info(id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.member_data_id_member_patch_with_http_info(id_member, **kwargs)  # noqa: E501
            return data

    def member_data_id_member_patch_with_http_info(self, id_member, **kwargs):  # noqa: E501
        """Update basic member data  # noqa: E501

        Example body                     Body           {              {                  \"idContactType\": 1, { 1 = Telephone, 2 = Cellphone}              }              \"gender\": \"string\", { \"M\" = Male, \"F\" = Female, \"P\" = Other }              \"idState\": 0 {1 = AC, 2 = AL, 3 = AP, 4 = AM, 5 = BA, 6 = CE, 7 = DF, 8 = ES, 9 = GO, 10 = MA, 11 = MT, 12 = MS, 13 = MG, 14 = PA, 15 = PB, 16 = PR, 17 = PE, 18 = PI, 19 = RJ, 20 = RN, 21 = RS, 22 = RO, 23 = RR, 24 = SC, 25 = SP, 26 = SE, 27 = TO}            }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.member_data_id_member_patch_with_http_info(id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_member: (required)
        :param MemberDataViewModel body:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_member', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method member_data_id_member_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `member_data_id_member_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/members/update-member-data/{idMember}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
