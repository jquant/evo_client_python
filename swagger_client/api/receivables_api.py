# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ReceivablesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_receivables_get(self, **kwargs):  # noqa: E501
        """Get receivables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_receivables_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime registration_date_start: Filter by registration of the account starting in a date (yyyy-mm-dd)
        :param datetime registration_date_end: Filter by registration of the account ending in a date (yyyy-mm-dd)
        :param datetime due_date_start: Filter by due of the account starting in a date (yyyy-mm-dd)
        :param datetime due_date_end: Filter by due of the account ending in a date (yyyy-mm-dd)
        :param datetime receiving_date_start: Filter by receiving of the account starting in a date (yyyy-mm-dd)
        :param datetime receiving_date_end: Filter by receiving of the account ending in a date (yyyy-mm-dd)
        :param datetime competence_date_end: Filter by competence of the account ending in a date (yyyy-mm-dd)
        :param datetime competence_date_start: Filter by competence of the account starting in a date (yyyy-mm-dd)
        :param datetime cancellation_date_start: Filter by cancellation of the account starting in a date (yyyy-mm-dd)
        :param datetime cancellation_date_end: Filter by cancellation of the account ending in a date (yyyy-mm-dd)
        :param datetime charge_date_start: Filter by charge of the account starting in a date (yyyy-mm-dd)
        :param datetime charge_date_end: Filter by charge of the account ending in a date (yyyy-mm-dd)
        :param datetime update_date_start: Filter by update of the account starting in a date (yyyy-mm-dd)
        :param datetime update_date_end: Filter by update of the account ending in a date (yyyy-mm-dd)
        :param str description: Filter by description
        :param float ammount_start: Filter by minimun ammount
        :param float ammount_end: Filter by maximun ammount
        :param str payment_types: Filter by a comma separated list of payment types id. Types: 1 - Money, 2 - Credit Card, 3 - Debit Card, 4 - Check, 5 - Boleto Bancário, 6 - PagSeguro, 7 - Deposit, 8 - Account Debit, 9 - Internet, 11 - Sale Credits, 12 - On-line Credit Card, 13 - Transfer, 18 - Pix, 0 - Balance Due.
        :param str account_status: Filter by a comma separated list of status ids. Status: 1 - Opened, 2 - Received, 3 - Canceled, 4 - Overdue
        :param int take: Total number of records to return. (Maximum of 50)
        :param int skip: Total number of records to skip.
        :param int member_id: Filter by a member Id.
        :param int id_sale: Filter by a sale Id.
        :param int id_receivable: Filter by a receivable Id.
        :param datetime invoice_date_start: Filter by invoice date (yyyy-mm-dd)
        :param datetime invoice_date_end: Filter by invoice date (yyyy-mm-dd)
        :param datetime invoice_canceled_date_start: Filter by canceled invoice date (yyyy-mm-dd)
        :param datetime invoice_canceled_date_end: Filter by canceled invoice date (yyyy-mm-dd)
        :param datetime sale_date_start: Filter by sale date (yyyy-mm-dd)
        :param datetime sale_date_end: Filter by sale date (yyyy-mm-dd)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_receivables_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_receivables_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_receivables_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get receivables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_receivables_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime registration_date_start: Filter by registration of the account starting in a date (yyyy-mm-dd)
        :param datetime registration_date_end: Filter by registration of the account ending in a date (yyyy-mm-dd)
        :param datetime due_date_start: Filter by due of the account starting in a date (yyyy-mm-dd)
        :param datetime due_date_end: Filter by due of the account ending in a date (yyyy-mm-dd)
        :param datetime receiving_date_start: Filter by receiving of the account starting in a date (yyyy-mm-dd)
        :param datetime receiving_date_end: Filter by receiving of the account ending in a date (yyyy-mm-dd)
        :param datetime competence_date_end: Filter by competence of the account ending in a date (yyyy-mm-dd)
        :param datetime competence_date_start: Filter by competence of the account starting in a date (yyyy-mm-dd)
        :param datetime cancellation_date_start: Filter by cancellation of the account starting in a date (yyyy-mm-dd)
        :param datetime cancellation_date_end: Filter by cancellation of the account ending in a date (yyyy-mm-dd)
        :param datetime charge_date_start: Filter by charge of the account starting in a date (yyyy-mm-dd)
        :param datetime charge_date_end: Filter by charge of the account ending in a date (yyyy-mm-dd)
        :param datetime update_date_start: Filter by update of the account starting in a date (yyyy-mm-dd)
        :param datetime update_date_end: Filter by update of the account ending in a date (yyyy-mm-dd)
        :param str description: Filter by description
        :param float ammount_start: Filter by minimun ammount
        :param float ammount_end: Filter by maximun ammount
        :param str payment_types: Filter by a comma separated list of payment types id. Types: 1 - Money, 2 - Credit Card, 3 - Debit Card, 4 - Check, 5 - Boleto Bancário, 6 - PagSeguro, 7 - Deposit, 8 - Account Debit, 9 - Internet, 11 - Sale Credits, 12 - On-line Credit Card, 13 - Transfer, 18 - Pix, 0 - Balance Due.
        :param str account_status: Filter by a comma separated list of status ids. Status: 1 - Opened, 2 - Received, 3 - Canceled, 4 - Overdue
        :param int take: Total number of records to return. (Maximum of 50)
        :param int skip: Total number of records to skip.
        :param int member_id: Filter by a member Id.
        :param int id_sale: Filter by a sale Id.
        :param int id_receivable: Filter by a receivable Id.
        :param datetime invoice_date_start: Filter by invoice date (yyyy-mm-dd)
        :param datetime invoice_date_end: Filter by invoice date (yyyy-mm-dd)
        :param datetime invoice_canceled_date_start: Filter by canceled invoice date (yyyy-mm-dd)
        :param datetime invoice_canceled_date_end: Filter by canceled invoice date (yyyy-mm-dd)
        :param datetime sale_date_start: Filter by sale date (yyyy-mm-dd)
        :param datetime sale_date_end: Filter by sale date (yyyy-mm-dd)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_date_start', 'registration_date_end', 'due_date_start', 'due_date_end', 'receiving_date_start', 'receiving_date_end', 'competence_date_end', 'competence_date_start', 'cancellation_date_start', 'cancellation_date_end', 'charge_date_start', 'charge_date_end', 'update_date_start', 'update_date_end', 'description', 'ammount_start', 'ammount_end', 'payment_types', 'account_status', 'take', 'skip', 'member_id', 'id_sale', 'id_receivable', 'invoice_date_start', 'invoice_date_end', 'invoice_canceled_date_start', 'invoice_canceled_date_end', 'sale_date_start', 'sale_date_end']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_receivables_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'registration_date_start' in params:
            query_params.append(('registrationDateStart', params['registration_date_start']))  # noqa: E501
        if 'registration_date_end' in params:
            query_params.append(('registrationDateEnd', params['registration_date_end']))  # noqa: E501
        if 'due_date_start' in params:
            query_params.append(('dueDateStart', params['due_date_start']))  # noqa: E501
        if 'due_date_end' in params:
            query_params.append(('dueDateEnd', params['due_date_end']))  # noqa: E501
        if 'receiving_date_start' in params:
            query_params.append(('receivingDateStart', params['receiving_date_start']))  # noqa: E501
        if 'receiving_date_end' in params:
            query_params.append(('receivingDateEnd', params['receiving_date_end']))  # noqa: E501
        if 'competence_date_end' in params:
            query_params.append(('competenceDateEnd', params['competence_date_end']))  # noqa: E501
        if 'competence_date_start' in params:
            query_params.append(('competenceDateStart', params['competence_date_start']))  # noqa: E501
        if 'cancellation_date_start' in params:
            query_params.append(('cancellationDateStart', params['cancellation_date_start']))  # noqa: E501
        if 'cancellation_date_end' in params:
            query_params.append(('cancellationDateEnd', params['cancellation_date_end']))  # noqa: E501
        if 'charge_date_start' in params:
            query_params.append(('chargeDateStart', params['charge_date_start']))  # noqa: E501
        if 'charge_date_end' in params:
            query_params.append(('chargeDateEnd', params['charge_date_end']))  # noqa: E501
        if 'update_date_start' in params:
            query_params.append(('updateDateStart', params['update_date_start']))  # noqa: E501
        if 'update_date_end' in params:
            query_params.append(('updateDateEnd', params['update_date_end']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'ammount_start' in params:
            query_params.append(('ammountStart', params['ammount_start']))  # noqa: E501
        if 'ammount_end' in params:
            query_params.append(('ammountEnd', params['ammount_end']))  # noqa: E501
        if 'payment_types' in params:
            query_params.append(('paymentTypes', params['payment_types']))  # noqa: E501
        if 'account_status' in params:
            query_params.append(('accountStatus', params['account_status']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'member_id' in params:
            query_params.append(('memberId', params['member_id']))  # noqa: E501
        if 'id_sale' in params:
            query_params.append(('idSale', params['id_sale']))  # noqa: E501
        if 'id_receivable' in params:
            query_params.append(('idReceivable', params['id_receivable']))  # noqa: E501
        if 'invoice_date_start' in params:
            query_params.append(('invoiceDateStart', params['invoice_date_start']))  # noqa: E501
        if 'invoice_date_end' in params:
            query_params.append(('invoiceDateEnd', params['invoice_date_end']))  # noqa: E501
        if 'invoice_canceled_date_start' in params:
            query_params.append(('invoiceCanceledDateStart', params['invoice_canceled_date_start']))  # noqa: E501
        if 'invoice_canceled_date_end' in params:
            query_params.append(('invoiceCanceledDateEnd', params['invoice_canceled_date_end']))  # noqa: E501
        if 'sale_date_start' in params:
            query_params.append(('saleDateStart', params['sale_date_start']))  # noqa: E501
        if 'sale_date_end' in params:
            query_params.append(('saleDateEnd', params['sale_date_end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/receivables', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_revenuecenter_get(self, **kwargs):  # noqa: E501
        """Get Cost Center  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_revenuecenter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int take: Total number of records to return.
        :param int skip: Total number of records to skip.
        :return: RevenueCenterApiViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_revenuecenter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_revenuecenter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_revenuecenter_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Cost Center  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_revenuecenter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int take: Total number of records to return.
        :param int skip: Total number of records to skip.
        :return: RevenueCenterApiViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['take', 'skip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_revenuecenter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/revenuecenter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RevenueCenterApiViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def received_put(self, **kwargs):  # noqa: E501
        """received_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.received_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReceivablesMaskReceivedViewModel body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.received_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.received_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def received_put_with_http_info(self, **kwargs):  # noqa: E501
        """received_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.received_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReceivablesMaskReceivedViewModel body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method received_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/receivables/mark-received', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
