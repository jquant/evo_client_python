# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WebhookApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_webhook_delete(self, **kwargs):  # noqa: E501
        """Remove a specific webhook by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_webhook_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: Webhook id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_webhook_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_webhook_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_webhook_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Remove a specific webhook by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_webhook_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_webhook: Webhook id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_webhook']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_webhook_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_webhook' in params:
            query_params.append(('IdWebhook', params['id_webhook']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/webhook', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_webhook_get(self, **kwargs):  # noqa: E501
        """List all webhooks created  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_webhook_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_webhook_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_webhook_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_webhook_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all webhooks created  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_webhook_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_webhook_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/webhook', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_webhook_post(self, **kwargs):  # noqa: E501
        """Add new webhook  # noqa: E501

        Create webhooks so EVO will notify outside systems every time a certain event happens:  headers is optional*  filters are optional, filters are only available for webhooks of type 'NewSale' and won't be stored for other event types      POST      {         \"IdBranch\": \"Branch number that webhook will be registered (Only available when using a multilocation key, ignored otherwise)\"         \"eventType\": \"Type: String. Specifies the type of event that will trigger this webhook. Available Types: 'NewSale', 'CreateMember', 'AlterMember', 'EndedSessionActivity', 'ClearedDebt', 'AlterReceivables', 'Freeze', 'RecurrentSale', 'entries', 'ActivityEnroll', 'SalesItensUpdated', 'CreateMembership',  'AlterMembership', 'CreateService', 'AlterService', 'CreateProduct', 'AlterProduct'\",         \"urlCallback\": \"Type: String. Url that will be called after the event. The API that will receive the request must accept the type POST and the content in the following format\",         \"headers\": [              {\"name\": \"Type: string\", \"value\": \"Type string\"}          ],          \"filters\": [              {                  \"FilterType\": \"Type: string. Specifies the filter that will be executed. Available Types: 'SaleItemDescription',                  \"Value\": \"Type: string. String that will be used to filter\"              }          ]      }                    POST       {         \"IdW12\": \"Type: Int. Unique gym ID\",         \"IdBranch\": \"Type: Int. Branch number\",         \"IdRecord\": \"Type: Int. Generate resource primary key\",         \"EventType\": \"Type: String. Webhook event type. Ex: 'NewSale'\"      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_webhook_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param W12UtilsWebhookViewModel body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_webhook_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_webhook_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_webhook_post_with_http_info(self, **kwargs):  # noqa: E501
        """Add new webhook  # noqa: E501

        Create webhooks so EVO will notify outside systems every time a certain event happens:  headers is optional*  filters are optional, filters are only available for webhooks of type 'NewSale' and won't be stored for other event types      POST      {         \"IdBranch\": \"Branch number that webhook will be registered (Only available when using a multilocation key, ignored otherwise)\"         \"eventType\": \"Type: String. Specifies the type of event that will trigger this webhook. Available Types: 'NewSale', 'CreateMember', 'AlterMember', 'EndedSessionActivity', 'ClearedDebt', 'AlterReceivables', 'Freeze', 'RecurrentSale', 'entries', 'ActivityEnroll', 'SalesItensUpdated', 'CreateMembership',  'AlterMembership', 'CreateService', 'AlterService', 'CreateProduct', 'AlterProduct'\",         \"urlCallback\": \"Type: String. Url that will be called after the event. The API that will receive the request must accept the type POST and the content in the following format\",         \"headers\": [              {\"name\": \"Type: string\", \"value\": \"Type string\"}          ],          \"filters\": [              {                  \"FilterType\": \"Type: string. Specifies the filter that will be executed. Available Types: 'SaleItemDescription',                  \"Value\": \"Type: string. String that will be used to filter\"              }          ]      }                    POST       {         \"IdW12\": \"Type: Int. Unique gym ID\",         \"IdBranch\": \"Type: Int. Branch number\",         \"IdRecord\": \"Type: Int. Generate resource primary key\",         \"EventType\": \"Type: String. Webhook event type. Ex: 'NewSale'\"      }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_webhook_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param W12UtilsWebhookViewModel body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_webhook_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/webhook', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
