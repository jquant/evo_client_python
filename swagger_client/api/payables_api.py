# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PayablesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_costcenter_get(self, **kwargs):  # noqa: E501
        """Get Cost Center  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_costcenter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int take: Total number of records to return.
        :param int skip: Total number of records to skip.
        :return: CostCenterApiViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_costcenter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_costcenter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_costcenter_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Cost Center  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_costcenter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int take: Total number of records to return.
        :param int skip: Total number of records to skip.
        :return: CostCenterApiViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['take', 'skip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_costcenter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/costcenter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CostCenterApiViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_payables_get(self, **kwargs):  # noqa: E501
        """Get payables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_payables_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str description: Filter by account description
        :param datetime date_input_start: Filter by input of the account starting in a date (yyyy-mm-dd)
        :param datetime date_input_end: Filter by input of the account ending in a date (yyyy-mm-dd)
        :param datetime due_date_start: Filter by due of the account starting in a date (yyyy-mm-dd)
        :param datetime due_date_end: Filter by due of the account ending in a date (yyyy-mm-dd)
        :param datetime date_payment_start:
        :param datetime date_payment_end:
        :param datetime compentence_start:
        :param datetime competence_end:
        :param str bank_account: Filter by bank account id. The bank account id can be obtained from the BankAccounts API. Accounts can be concatenated with a comma to search, for example (2,215), in which case it will return payments from bank accounts 2 and 215.
        :param float ammount_start: Filter by minimun ammount
        :param float ammount_end: Filter by maximun ammount
        :param str account_status: Filter by a comma separated list of status ids. Status: 1 - Opened, 2 - Paid, 3 - Canceled
        :param int take: Total number of records to return. (Maximum of 50)
        :param int skip: Total number of records to skip.
        :return: PayablesApiViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_payables_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_payables_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_payables_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get payables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_payables_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str description: Filter by account description
        :param datetime date_input_start: Filter by input of the account starting in a date (yyyy-mm-dd)
        :param datetime date_input_end: Filter by input of the account ending in a date (yyyy-mm-dd)
        :param datetime due_date_start: Filter by due of the account starting in a date (yyyy-mm-dd)
        :param datetime due_date_end: Filter by due of the account ending in a date (yyyy-mm-dd)
        :param datetime date_payment_start:
        :param datetime date_payment_end:
        :param datetime compentence_start:
        :param datetime competence_end:
        :param str bank_account: Filter by bank account id. The bank account id can be obtained from the BankAccounts API. Accounts can be concatenated with a comma to search, for example (2,215), in which case it will return payments from bank accounts 2 and 215.
        :param float ammount_start: Filter by minimun ammount
        :param float ammount_end: Filter by maximun ammount
        :param str account_status: Filter by a comma separated list of status ids. Status: 1 - Opened, 2 - Paid, 3 - Canceled
        :param int take: Total number of records to return. (Maximum of 50)
        :param int skip: Total number of records to skip.
        :return: PayablesApiViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['description', 'date_input_start', 'date_input_end', 'due_date_start', 'due_date_end', 'date_payment_start', 'date_payment_end', 'compentence_start', 'competence_end', 'bank_account', 'ammount_start', 'ammount_end', 'account_status', 'take', 'skip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_payables_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'date_input_start' in params:
            query_params.append(('dateInputStart', params['date_input_start']))  # noqa: E501
        if 'date_input_end' in params:
            query_params.append(('dateInputEnd', params['date_input_end']))  # noqa: E501
        if 'due_date_start' in params:
            query_params.append(('dueDateStart', params['due_date_start']))  # noqa: E501
        if 'due_date_end' in params:
            query_params.append(('dueDateEnd', params['due_date_end']))  # noqa: E501
        if 'date_payment_start' in params:
            query_params.append(('datePaymentStart', params['date_payment_start']))  # noqa: E501
        if 'date_payment_end' in params:
            query_params.append(('datePaymentEnd', params['date_payment_end']))  # noqa: E501
        if 'compentence_start' in params:
            query_params.append(('compentenceStart', params['compentence_start']))  # noqa: E501
        if 'competence_end' in params:
            query_params.append(('competenceEnd', params['competence_end']))  # noqa: E501
        if 'bank_account' in params:
            query_params.append(('bankAccount', params['bank_account']))  # noqa: E501
        if 'ammount_start' in params:
            query_params.append(('ammountStart', params['ammount_start']))  # noqa: E501
        if 'ammount_end' in params:
            query_params.append(('ammountEnd', params['ammount_end']))  # noqa: E501
        if 'account_status' in params:
            query_params.append(('accountStatus', params['account_status']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/payables', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PayablesApiViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
