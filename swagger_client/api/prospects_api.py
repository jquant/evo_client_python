# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProspectsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_prospects_get(self, **kwargs):  # noqa: E501
        """Get prospects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_prospects_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_prospect:
        :param str name:
        :param str document:
        :param str email:
        :param str phone:
        :param datetime register_date_start:
        :param datetime register_date_end:
        :param datetime conversion_date_start:
        :param datetime conversion_date_end:
        :param int take: Total number of records to return. (Maximum of 50)
        :param int skip: Total number of records to skip.
        :param str gympass_id:
        :return: list[ProspectsResumoApiViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_prospects_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_prospects_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_prospects_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get prospects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_prospects_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_prospect:
        :param str name:
        :param str document:
        :param str email:
        :param str phone:
        :param datetime register_date_start:
        :param datetime register_date_end:
        :param datetime conversion_date_start:
        :param datetime conversion_date_end:
        :param int take: Total number of records to return. (Maximum of 50)
        :param int skip: Total number of records to skip.
        :param str gympass_id:
        :return: list[ProspectsResumoApiViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_prospect', 'name', 'document', 'email', 'phone', 'register_date_start', 'register_date_end', 'conversion_date_start', 'conversion_date_end', 'take', 'skip', 'gympass_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_prospects_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_prospect' in params:
            query_params.append(('idProspect', params['id_prospect']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'document' in params:
            query_params.append(('document', params['document']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'phone' in params:
            query_params.append(('phone', params['phone']))  # noqa: E501
        if 'register_date_start' in params:
            query_params.append(('registerDateStart', params['register_date_start']))  # noqa: E501
        if 'register_date_end' in params:
            query_params.append(('registerDateEnd', params['register_date_end']))  # noqa: E501
        if 'conversion_date_start' in params:
            query_params.append(('conversionDateStart', params['conversion_date_start']))  # noqa: E501
        if 'conversion_date_end' in params:
            query_params.append(('conversionDateEnd', params['conversion_date_end']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'gympass_id' in params:
            query_params.append(('gympassId', params['gympass_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/prospects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProspectsResumoApiViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_prospects_post(self, **kwargs):  # noqa: E501
        """Add prospects  # noqa: E501

        Example body                     Body           {             name(string, required - First Name of the prospect),             email(string, required - E-mail of the prospect),             lastName(string, optional - Last Name of the prospect),             idBranch(int, optional - Branch of the prospect),             ddi(string, optional - Cellphone DDI),             cellphone(string, optional - Cellphone of the prospect),             birthday(DateTime, optional - Birthday of the prospect),             gender(string, optional - Gender of the prospect) { \"M\" = Male, \"F\" = Female, \"P\" = Other },             visit(integer, optional - Origin of the visit of the prospect) { Personal = 1, Email = 2, Telephone = 3, Other = 4 },              marketingType(string, optional - Type of marketing where the prospect met the gym ),             notes(string, optional - Free field for prospect notes),             currentStep(string, optional - Current step in the process for converting the prospect),            }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_prospects_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProspectApiIntegracaoViewModel body:
        :return: ProspectIdViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_prospects_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_prospects_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_prospects_post_with_http_info(self, **kwargs):  # noqa: E501
        """Add prospects  # noqa: E501

        Example body                     Body           {             name(string, required - First Name of the prospect),             email(string, required - E-mail of the prospect),             lastName(string, optional - Last Name of the prospect),             idBranch(int, optional - Branch of the prospect),             ddi(string, optional - Cellphone DDI),             cellphone(string, optional - Cellphone of the prospect),             birthday(DateTime, optional - Birthday of the prospect),             gender(string, optional - Gender of the prospect) { \"M\" = Male, \"F\" = Female, \"P\" = Other },             visit(integer, optional - Origin of the visit of the prospect) { Personal = 1, Email = 2, Telephone = 3, Other = 4 },              marketingType(string, optional - Type of marketing where the prospect met the gym ),             notes(string, optional - Free field for prospect notes),             currentStep(string, optional - Current step in the process for converting the prospect),            }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_prospects_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProspectApiIntegracaoViewModel body:
        :return: ProspectIdViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_prospects_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/prospects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProspectIdViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_prospects_put(self, **kwargs):  # noqa: E501
        """Update prospect  # noqa: E501

        Example body                     Body           {             idProspect(int, required - Id of the Prospect),              name(string, required - First Name of the prospect),             email(string, required - E-mail of the prospect),             lastName(string, optional - Last Name of the prospect),             ddi(string, optional - Cellphone DDI),             cellphone(string, optional - Cellphone of the prospect),             birthday(DateTime, optional - Birthday of the prospect),             gender(string, optional - Gender of the prospect) { \"M\" = Male, \"F\" = Female, \"P\" = Other },                            notes(string, optional - Free field for prospect notes),             currentStep(string, optional - Current step in the process for converting the prospect),            }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_prospects_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProspectApiIntegracaoAtualizacaoViewModel body:
        :return: ProspectIdViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_prospects_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_prospects_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_prospects_put_with_http_info(self, **kwargs):  # noqa: E501
        """Update prospect  # noqa: E501

        Example body                     Body           {             idProspect(int, required - Id of the Prospect),              name(string, required - First Name of the prospect),             email(string, required - E-mail of the prospect),             lastName(string, optional - Last Name of the prospect),             ddi(string, optional - Cellphone DDI),             cellphone(string, optional - Cellphone of the prospect),             birthday(DateTime, optional - Birthday of the prospect),             gender(string, optional - Gender of the prospect) { \"M\" = Male, \"F\" = Female, \"P\" = Other },                            notes(string, optional - Free field for prospect notes),             currentStep(string, optional - Current step in the process for converting the prospect),            }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_prospects_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProspectApiIntegracaoAtualizacaoViewModel body:
        :return: ProspectIdViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_prospects_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/prospects', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProspectIdViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_prospects_services_get(self, **kwargs):  # noqa: E501
        """Get prospect services  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_prospects_services_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_prospect: Filter by prospect id
        :return: list[MemberServiceViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_prospects_services_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_prospects_services_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_prospects_services_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get prospect services  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_prospects_services_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_prospect: Filter by prospect id
        :return: list[MemberServiceViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_prospect']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_prospects_services_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_prospect' in params:
            query_params.append(('idProspect', params['id_prospect']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/prospects/services', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MemberServiceViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_prospects_transfer_post(self, **kwargs):  # noqa: E501
        """api_v1_prospects_transfer_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_prospects_transfer_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProspectTransferenciaViewModel body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_prospects_transfer_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_prospects_transfer_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_prospects_transfer_post_with_http_info(self, **kwargs):  # noqa: E501
        """api_v1_prospects_transfer_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_prospects_transfer_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProspectTransferenciaViewModel body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_prospects_transfer_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/prospects/transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
