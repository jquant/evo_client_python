# coding: utf-8

"""
    EVO API

    Use the DNS of your gym as the User and the Secret Key as the password.The authentication method used in the integration is Basic Authentication  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_service_get(self, **kwargs):  # noqa: E501
        """Get Services  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_service_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_service: Filter by Service Id
        :param str name:
        :param int id_branch: Filber by service IdBranch (Only available when using a multilocation key, ignored otherwise)
        :param int take: Total number of records to return. (Maximum of 50)
        :param int skip: Total number of records to skip.
        :param bool active: Filter by active/inactive services
        :return: list[ServicosResumoApiViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_service_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_service_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_service_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Services  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_service_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_service: Filter by Service Id
        :param str name:
        :param int id_branch: Filber by service IdBranch (Only available when using a multilocation key, ignored otherwise)
        :param int take: Total number of records to return. (Maximum of 50)
        :param int skip: Total number of records to skip.
        :param bool active: Filter by active/inactive services
        :return: list[ServicosResumoApiViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_service', 'name', 'id_branch', 'take', 'skip', 'active']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_service_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_service' in params:
            query_params.append(('idService', params['id_service']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'id_branch' in params:
            query_params.append(('idBranch', params['id_branch']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/service', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ServicosResumoApiViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
